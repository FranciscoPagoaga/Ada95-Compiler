
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Pack;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\373\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\003\000\002\002\012\000\002\002\007\000" +
    "\002\002\007\000\002\002\007\000\002\043\002\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\007\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\030\005\000\002\030\005\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\005\004\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\012\014\000\002\012\014\000\002\012\014\000" +
    "\002\012\014\000\002\012\014\000\002\012\014\000\002" +
    "\012\014\000\002\012\014\000\002\012\013\000\002\012" +
    "\013\000\002\012\013\000\002\012\013\000\002\012\013" +
    "\000\002\012\013\000\002\012\013\000\002\011\016\000" +
    "\002\011\016\000\002\011\016\000\002\011\016\000\002" +
    "\011\016\000\002\011\016\000\002\011\016\000\002\011" +
    "\016\000\002\011\015\000\002\011\015\000\002\011\015" +
    "\000\002\011\015\000\002\011\015\000\002\011\015\000" +
    "\002\011\015\000\002\011\015\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\013\005" +
    "\000\002\013\002\000\002\013\005\000\002\013\005\000" +
    "\002\026\010\000\002\026\010\000\002\026\006\000\002" +
    "\026\006\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\042\003\000\002\042\003" +
    "\000\002\042\004\000\002\042\002\000\002\033\006\000" +
    "\002\033\006\000\002\033\006\000\002\033\006\000\002" +
    "\033\006\000\002\033\006\000\002\033\006\000\002\033" +
    "\006\000\002\033\006\000\002\033\006\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\036\005\000" +
    "\002\036\003\000\002\036\005\000\002\036\005\000\002" +
    "\037\005\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\005\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\017\011\000\002\017\011\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\017\011\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\016\015\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\016\015\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\016\015\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\021\013\000\002\021\013\000\002\021\013\000\002" +
    "\021\013\000\002\021\013\000\002\021\013\000\002\022" +
    "\007\000\002\022\002\000\002\022\007\000\002\022\007" +
    "\000\002\023\004\000\002\023\002\000\002\023\004\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\005\000\002\031\005\000\002\032" +
    "\005\000\002\034\007\000\002\034\007\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\034\007\000" +
    "\002\034\007\000\002\034\007\000\002\034\007\000\002" +
    "\034\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\024\004\000" +
    "\002\024\004\000\002\025\006\000\002\025\005\000\002" +
    "\025\006\000\002\027\005\000\002\027\003\000\002\027" +
    "\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02d2\000\010\003\005\004\004\005\007\001\002\000" +
    "\006\003\u02ca\051\u02c9\001\002\000\006\002\ufffb\051\u02c5" +
    "\001\002\000\004\002\u02c4\001\002\000\006\003\011\051" +
    "\010\001\002\000\012\003\uff93\006\uff93\007\uff93\040\012" +
    "\001\002\000\006\007\uff93\040\012\001\002\000\006\003" +
    "\u02a2\051\u02a1\001\002\000\004\007\014\001\002\000\014" +
    "\003\025\004\021\005\026\010\027\051\024\001\002\000" +
    "\014\003\uffdf\004\021\005\026\010\uffdf\051\024\001\002" +
    "\000\014\003\uffe1\004\021\005\026\010\uffe1\051\024\001" +
    "\002\000\014\003\uffe3\004\021\005\026\010\uffe3\051\024" +
    "\001\002\000\004\002\ufff9\001\002\000\006\003\u025d\051" +
    "\u025c\001\002\000\006\003\u0248\010\u0249\001\002\000\014" +
    "\003\uffe7\004\021\005\026\010\uffe7\051\024\001\002\000" +
    "\010\003\u023e\037\u023f\044\u023d\001\002\000\026\006\042" +
    "\010\u0234\012\044\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\006\003\u01e1\051\u01e0" +
    "\001\002\000\026\003\051\006\042\012\044\016\054\017" +
    "\037\020\040\021\032\046\047\047\057\051\046\001\002" +
    "\000\014\003\uffe5\004\021\005\026\010\uffe5\051\024\001" +
    "\002\000\006\003\uffe6\010\uffe6\001\002\000\006\003\u01d9" +
    "\022\u01da\001\002\000\034\003\uffbb\006\042\011\uffbb\012" +
    "\044\014\uffbb\015\uffbb\016\054\017\037\020\040\021\032" +
    "\046\047\047\057\051\046\001\002\000\034\003\uffbf\006" +
    "\042\011\uffbf\012\044\014\uffbf\015\uffbf\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\034\003\uffc7\006\042\011\uffc7\012\044\014\uffc7\015\uffc7" +
    "\016\054\017\037\020\040\021\032\046\047\047\057\051" +
    "\046\001\002\000\034\003\uffcb\006\042\011\uffcb\012\044" +
    "\014\uffcb\015\uffcb\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\012\003\u0171\040\u013c" +
    "\050\u013a\051\u013d\001\002\000\026\003\u01b2\006\042\012" +
    "\044\016\054\017\037\020\040\021\032\046\047\047\057" +
    "\051\046\001\002\000\034\003\uffc5\006\042\011\uffc5\012" +
    "\044\014\uffc5\015\uffc5\016\054\017\037\020\040\021\032" +
    "\046\047\047\057\051\046\001\002\000\016\003\u01a8\025" +
    "\u01a6\026\u01a7\040\u013c\050\u013a\051\u013d\001\002\000\034" +
    "\003\uffc3\006\042\011\uffc3\012\044\014\uffc3\015\uffc3\016" +
    "\054\017\037\020\040\021\032\046\047\047\057\051\046" +
    "\001\002\000\012\003\u0171\040\u013c\050\u013a\051\u013d\001" +
    "\002\000\006\003\u016e\042\u016f\001\002\000\010\003\u0138" +
    "\036\u0137\040\u0139\001\002\000\006\003\u0117\040\u0118\001" +
    "\002\000\034\003\uffcd\006\042\011\uffcd\012\044\014\uffcd" +
    "\015\uffcd\016\054\017\037\020\040\021\032\046\047\047" +
    "\057\051\046\001\002\000\004\011\u0113\001\002\000\006" +
    "\003\u010a\011\u010b\001\002\000\034\003\uffc9\006\042\011" +
    "\uffc9\012\044\014\uffc9\015\uffc9\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\006\003" +
    "\101\051\100\001\002\000\034\003\uffc1\006\042\011\uffc1" +
    "\012\044\014\uffc1\015\uffc1\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\034\003\uffbd" +
    "\006\042\011\uffbd\012\044\014\uffbd\015\uffbd\016\054\017" +
    "\037\020\040\021\032\046\047\047\057\051\046\001\002" +
    "\000\006\003\060\040\061\001\002\000\004\051\073\001" +
    "\002\000\006\003\063\051\062\001\002\000\006\003\066" +
    "\041\067\001\002\000\004\041\064\001\002\000\004\042" +
    "\065\001\002\000\034\003\uff12\006\uff12\011\uff12\012\uff12" +
    "\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12\021\uff12\046" +
    "\uff12\047\uff12\051\uff12\001\002\000\004\042\072\001\002" +
    "\000\006\003\070\042\071\001\002\000\034\003\uff10\006" +
    "\uff10\011\uff10\012\uff10\014\uff10\015\uff10\016\uff10\017\uff10" +
    "\020\uff10\021\uff10\046\uff10\047\uff10\051\uff10\001\002\000" +
    "\034\003\uff14\006\uff14\011\uff14\012\uff14\014\uff14\015\uff14" +
    "\016\uff14\017\uff14\020\uff14\021\uff14\046\uff14\047\uff14\051" +
    "\uff14\001\002\000\034\003\uff11\006\uff11\011\uff11\012\uff11" +
    "\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11\021\uff11\046" +
    "\uff11\047\uff11\051\uff11\001\002\000\004\041\074\001\002" +
    "\000\004\042\075\001\002\000\034\003\uff13\006\uff13\011" +
    "\uff13\012\uff13\014\uff13\015\uff13\016\uff13\017\uff13\020\uff13" +
    "\021\uff13\046\uff13\047\uff13\051\uff13\001\002\000\012\003" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\001\002\000\012\003\uffc2" +
    "\011\uffc2\014\uffc2\015\uffc2\001\002\000\006\003\140\027" +
    "\137\001\002\000\004\027\102\001\002\000\006\050\104" +
    "\051\103\001\002\000\004\045\122\001\002\000\004\045" +
    "\105\001\002\000\006\050\107\051\106\001\002\000\004" +
    "\020\115\001\002\000\004\020\110\001\002\000\024\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\004\011\112\001\002\000" +
    "\004\020\113\001\002\000\004\042\114\001\002\000\034" +
    "\003\uff5c\006\uff5c\011\uff5c\012\uff5c\014\uff5c\015\uff5c\016" +
    "\uff5c\017\uff5c\020\uff5c\021\uff5c\046\uff5c\047\uff5c\051\uff5c" +
    "\001\002\000\024\006\042\012\044\016\054\017\037\020" +
    "\040\021\032\046\047\047\057\051\046\001\002\000\004" +
    "\011\117\001\002\000\004\020\120\001\002\000\004\042" +
    "\121\001\002\000\034\003\uff47\006\uff47\011\uff47\012\uff47" +
    "\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\046" +
    "\uff47\047\uff47\051\uff47\001\002\000\006\050\123\051\124" +
    "\001\002\000\004\020\132\001\002\000\004\020\125\001" +
    "\002\000\024\006\042\012\044\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\004\011" +
    "\127\001\002\000\004\020\130\001\002\000\004\042\131" +
    "\001\002\000\034\003\uff3d\006\uff3d\011\uff3d\012\uff3d\014" +
    "\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\046\uff3d" +
    "\047\uff3d\051\uff3d\001\002\000\024\006\042\012\044\016" +
    "\054\017\037\020\040\021\032\046\047\047\057\051\046" +
    "\001\002\000\004\011\134\001\002\000\004\020\135\001" +
    "\002\000\004\042\136\001\002\000\034\003\uff51\006\uff51" +
    "\011\uff51\012\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020" +
    "\uff51\021\uff51\046\uff51\047\uff51\051\uff51\001\002\000\010" +
    "\003\177\050\176\051\175\001\002\000\006\050\141\051" +
    "\142\001\002\000\004\045\160\001\002\000\004\045\143" +
    "\001\002\000\006\050\145\051\144\001\002\000\004\020" +
    "\153\001\002\000\004\020\146\001\002\000\024\006\042" +
    "\012\044\016\054\017\037\020\040\021\032\046\047\047" +
    "\057\051\046\001\002\000\004\011\150\001\002\000\004" +
    "\020\151\001\002\000\004\042\152\001\002\000\034\003" +
    "\uff50\006\uff50\011\uff50\012\uff50\014\uff50\015\uff50\016\uff50" +
    "\017\uff50\020\uff50\021\uff50\046\uff50\047\uff50\051\uff50\001" +
    "\002\000\024\006\042\012\044\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\004\011" +
    "\155\001\002\000\004\020\156\001\002\000\004\042\157" +
    "\001\002\000\034\003\uff3c\006\uff3c\011\uff3c\012\uff3c\014" +
    "\uff3c\015\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\046\uff3c" +
    "\047\uff3c\051\uff3c\001\002\000\006\050\162\051\161\001" +
    "\002\000\004\020\170\001\002\000\004\020\163\001\002" +
    "\000\024\006\042\012\044\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\004\011\165" +
    "\001\002\000\004\020\166\001\002\000\004\042\167\001" +
    "\002\000\034\003\uff5b\006\uff5b\011\uff5b\012\uff5b\014\uff5b" +
    "\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\046\uff5b\047" +
    "\uff5b\051\uff5b\001\002\000\024\006\042\012\044\016\054" +
    "\017\037\020\040\021\032\046\047\047\057\051\046\001" +
    "\002\000\004\011\172\001\002\000\004\020\173\001\002" +
    "\000\004\042\174\001\002\000\034\003\uff46\006\uff46\011" +
    "\uff46\012\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46" +
    "\021\uff46\046\uff46\047\uff46\051\uff46\001\002\000\006\003" +
    "\313\045\314\001\002\000\006\003\215\045\216\001\002" +
    "\000\004\045\200\001\002\000\006\050\201\051\202\001" +
    "\002\000\004\020\210\001\002\000\004\020\203\001\002" +
    "\000\024\006\042\012\044\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\004\011\205" +
    "\001\002\000\004\020\206\001\002\000\004\042\207\001" +
    "\002\000\034\003\uff45\006\uff45\011\uff45\012\uff45\014\uff45" +
    "\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\046\uff45\047" +
    "\uff45\051\uff45\001\002\000\024\006\042\012\044\016\054" +
    "\017\037\020\040\021\032\046\047\047\057\051\046\001" +
    "\002\000\004\011\212\001\002\000\004\020\213\001\002" +
    "\000\004\042\214\001\002\000\034\003\uff5a\006\uff5a\011" +
    "\uff5a\012\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a" +
    "\021\uff5a\046\uff5a\047\uff5a\051\uff5a\001\002\000\006\050" +
    "\300\051\277\001\002\000\010\003\221\050\220\051\217" +
    "\001\002\000\006\003\253\020\254\001\002\000\006\003" +
    "\227\020\230\001\002\000\004\020\222\001\002\000\024" +
    "\006\042\012\044\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\004\011\224\001\002" +
    "\000\004\020\225\001\002\000\004\042\226\001\002\000" +
    "\034\003\uff58\006\uff58\011\uff58\012\uff58\014\uff58\015\uff58" +
    "\016\uff58\017\uff58\020\uff58\021\uff58\046\uff58\047\uff58\051" +
    "\uff58\001\002\000\024\006\042\012\044\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\026\003\232\006\042\012\044\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\006\003" +
    "\236\011\237\001\002\000\004\011\233\001\002\000\004" +
    "\020\234\001\002\000\004\042\235\001\002\000\034\003" +
    "\uff53\006\uff53\011\uff53\012\uff53\014\uff53\015\uff53\016\uff53" +
    "\017\uff53\020\uff53\021\uff53\046\uff53\047\uff53\051\uff53\001" +
    "\002\000\004\020\245\001\002\000\006\003\240\020\241" +
    "\001\002\000\004\042\244\001\002\000\006\003\242\042" +
    "\243\001\002\000\034\003\uff54\006\uff54\011\uff54\012\uff54" +
    "\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\046" +
    "\uff54\047\uff54\051\uff54\001\002\000\034\003\uff5d\006\uff5d" +
    "\011\uff5d\012\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020" +
    "\uff5d\021\uff5d\046\uff5d\047\uff5d\051\uff5d\001\002\000\034" +
    "\003\uff55\006\uff55\011\uff55\012\uff55\014\uff55\015\uff55\016" +
    "\uff55\017\uff55\020\uff55\021\uff55\046\uff55\047\uff55\051\uff55" +
    "\001\002\000\004\042\246\001\002\000\034\003\uff56\006" +
    "\uff56\011\uff56\012\uff56\014\uff56\015\uff56\016\uff56\017\uff56" +
    "\020\uff56\021\uff56\046\uff56\047\uff56\051\uff56\001\002\000" +
    "\004\011\250\001\002\000\004\020\251\001\002\000\004" +
    "\042\252\001\002\000\034\003\uff57\006\uff57\011\uff57\012" +
    "\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57\021\uff57" +
    "\046\uff57\047\uff57\051\uff57\001\002\000\024\006\042\012" +
    "\044\016\054\017\037\020\040\021\032\046\047\047\057" +
    "\051\046\001\002\000\026\003\255\006\042\012\044\016" +
    "\054\017\037\020\040\021\032\046\047\047\057\051\046" +
    "\001\002\000\004\011\270\001\002\000\006\003\257\011" +
    "\260\001\002\000\004\020\266\001\002\000\006\003\261" +
    "\020\262\001\002\000\004\042\265\001\002\000\006\003" +
    "\263\042\264\001\002\000\034\003\uff40\006\uff40\011\uff40" +
    "\012\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021" +
    "\uff40\046\uff40\047\uff40\051\uff40\001\002\000\034\003\uff48" +
    "\006\uff48\011\uff48\012\uff48\014\uff48\015\uff48\016\uff48\017" +
    "\uff48\020\uff48\021\uff48\046\uff48\047\uff48\051\uff48\001\002" +
    "\000\034\003\uff41\006\uff41\011\uff41\012\uff41\014\uff41\015" +
    "\uff41\016\uff41\017\uff41\020\uff41\021\uff41\046\uff41\047\uff41" +
    "\051\uff41\001\002\000\004\042\267\001\002\000\034\003" +
    "\uff42\006\uff42\011\uff42\012\uff42\014\uff42\015\uff42\016\uff42" +
    "\017\uff42\020\uff42\021\uff42\046\uff42\047\uff42\051\uff42\001" +
    "\002\000\004\020\271\001\002\000\004\042\272\001\002" +
    "\000\034\003\uff3f\006\uff3f\011\uff3f\012\uff3f\014\uff3f\015" +
    "\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f\046\uff3f\047\uff3f" +
    "\051\uff3f\001\002\000\004\011\274\001\002\000\004\020" +
    "\275\001\002\000\004\042\276\001\002\000\034\003\uff43" +
    "\006\uff43\011\uff43\012\uff43\014\uff43\015\uff43\016\uff43\017" +
    "\uff43\020\uff43\021\uff43\046\uff43\047\uff43\051\uff43\001\002" +
    "\000\004\020\306\001\002\000\004\020\301\001\002\000" +
    "\024\006\042\012\044\016\054\017\037\020\040\021\032" +
    "\046\047\047\057\051\046\001\002\000\004\011\303\001" +
    "\002\000\004\020\304\001\002\000\004\042\305\001\002" +
    "\000\034\003\uff59\006\uff59\011\uff59\012\uff59\014\uff59\015" +
    "\uff59\016\uff59\017\uff59\020\uff59\021\uff59\046\uff59\047\uff59" +
    "\051\uff59\001\002\000\024\006\042\012\044\016\054\017" +
    "\037\020\040\021\032\046\047\047\057\051\046\001\002" +
    "\000\004\011\310\001\002\000\004\020\311\001\002\000" +
    "\004\042\312\001\002\000\034\003\uff44\006\uff44\011\uff44" +
    "\012\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021" +
    "\uff44\046\uff44\047\uff44\051\uff44\001\002\000\006\050\375" +
    "\051\376\001\002\000\010\003\317\050\316\051\315\001" +
    "\002\000\006\003\351\020\352\001\002\000\006\003\325" +
    "\020\326\001\002\000\004\020\320\001\002\000\024\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\004\011\322\001\002\000" +
    "\004\020\323\001\002\000\004\042\324\001\002\000\034" +
    "\003\uff4e\006\uff4e\011\uff4e\012\uff4e\014\uff4e\015\uff4e\016" +
    "\uff4e\017\uff4e\020\uff4e\021\uff4e\046\uff4e\047\uff4e\051\uff4e" +
    "\001\002\000\024\006\042\012\044\016\054\017\037\020" +
    "\040\021\032\046\047\047\057\051\046\001\002\000\026" +
    "\003\327\006\042\012\044\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\004\011\342" +
    "\001\002\000\006\003\331\011\332\001\002\000\004\020" +
    "\340\001\002\000\006\003\333\020\334\001\002\000\004" +
    "\042\337\001\002\000\006\003\335\042\336\001\002\000" +
    "\034\003\uff49\006\uff49\011\uff49\012\uff49\014\uff49\015\uff49" +
    "\016\uff49\017\uff49\020\uff49\021\uff49\046\uff49\047\uff49\051" +
    "\uff49\001\002\000\034\003\uff52\006\uff52\011\uff52\012\uff52" +
    "\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52\021\uff52\046" +
    "\uff52\047\uff52\051\uff52\001\002\000\034\003\uff4a\006\uff4a" +
    "\011\uff4a\012\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\046\uff4a\047\uff4a\051\uff4a\001\002\000\004" +
    "\042\341\001\002\000\034\003\uff4b\006\uff4b\011\uff4b\012" +
    "\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\046\uff4b\047\uff4b\051\uff4b\001\002\000\004\020\343\001" +
    "\002\000\004\042\344\001\002\000\034\003\uff4c\006\uff4c" +
    "\011\uff4c\012\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020" +
    "\uff4c\021\uff4c\046\uff4c\047\uff4c\051\uff4c\001\002\000\004" +
    "\011\346\001\002\000\004\020\347\001\002\000\004\042" +
    "\350\001\002\000\034\003\uff4d\006\uff4d\011\uff4d\012\uff4d" +
    "\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\046" +
    "\uff4d\047\uff4d\051\uff4d\001\002\000\024\006\042\012\044" +
    "\016\054\017\037\020\040\021\032\046\047\047\057\051" +
    "\046\001\002\000\026\003\353\006\042\012\044\016\054" +
    "\017\037\020\040\021\032\046\047\047\057\051\046\001" +
    "\002\000\004\011\366\001\002\000\006\003\355\011\356" +
    "\001\002\000\004\020\364\001\002\000\006\003\357\020" +
    "\360\001\002\000\004\042\363\001\002\000\006\003\361" +
    "\042\362\001\002\000\034\003\uff37\006\uff37\011\uff37\012" +
    "\uff37\014\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37" +
    "\046\uff37\047\uff37\051\uff37\001\002\000\034\003\uff3e\006" +
    "\uff3e\011\uff3e\012\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e" +
    "\020\uff3e\021\uff3e\046\uff3e\047\uff3e\051\uff3e\001\002\000" +
    "\034\003\uff38\006\uff38\011\uff38\012\uff38\014\uff38\015\uff38" +
    "\016\uff38\017\uff38\020\uff38\021\uff38\046\uff38\047\uff38\051" +
    "\uff38\001\002\000\004\042\365\001\002\000\034\003\uff39" +
    "\006\uff39\011\uff39\012\uff39\014\uff39\015\uff39\016\uff39\017" +
    "\uff39\020\uff39\021\uff39\046\uff39\047\uff39\051\uff39\001\002" +
    "\000\004\020\367\001\002\000\004\042\370\001\002\000" +
    "\034\003\uff36\006\uff36\011\uff36\012\uff36\014\uff36\015\uff36" +
    "\016\uff36\017\uff36\020\uff36\021\uff36\046\uff36\047\uff36\051" +
    "\uff36\001\002\000\004\011\372\001\002\000\004\020\373" +
    "\001\002\000\004\042\374\001\002\000\034\003\uff3a\006" +
    "\uff3a\011\uff3a\012\uff3a\014\uff3a\015\uff3a\016\uff3a\017\uff3a" +
    "\020\uff3a\021\uff3a\046\uff3a\047\uff3a\051\uff3a\001\002\000" +
    "\004\020\u0104\001\002\000\004\020\377\001\002\000\024" +
    "\006\042\012\044\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\004\011\u0101\001\002" +
    "\000\004\020\u0102\001\002\000\004\042\u0103\001\002\000" +
    "\034\003\uff3b\006\uff3b\011\uff3b\012\uff3b\014\uff3b\015\uff3b" +
    "\016\uff3b\017\uff3b\020\uff3b\021\uff3b\046\uff3b\047\uff3b\051" +
    "\uff3b\001\002\000\024\006\042\012\044\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\004\011\u0106\001\002\000\004\020\u0107\001\002\000\004" +
    "\042\u0108\001\002\000\034\003\uff4f\006\uff4f\011\uff4f\012" +
    "\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f" +
    "\046\uff4f\047\uff4f\051\uff4f\001\002\000\012\003\uffca\011" +
    "\uffca\014\uffca\015\uffca\001\002\000\004\051\u0111\001\002" +
    "\000\006\003\u010d\051\u010c\001\002\000\006\003\u010f\042" +
    "\u0110\001\002\000\004\042\u010e\001\002\000\004\002\uffeb" +
    "\001\002\000\004\002\uffea\001\002\000\004\002\uffee\001" +
    "\002\000\004\042\u0112\001\002\000\004\002\uffec\001\002" +
    "\000\004\051\u0114\001\002\000\004\042\u0115\001\002\000" +
    "\004\002\uffe9\001\002\000\012\003\uffce\011\uffce\014\uffce" +
    "\015\uffce\001\002\000\010\050\u012e\051\u012f\052\u0130\001" +
    "\002\000\012\003\u011b\050\u0119\051\u011a\052\u011c\001\002" +
    "\000\006\003\u012a\041\u0129\001\002\000\006\003\u0125\041" +
    "\u0124\001\002\000\004\041\u0122\001\002\000\006\003\u011d" +
    "\041\u011e\001\002\000\004\042\u0121\001\002\000\006\003" +
    "\u011f\042\u0120\001\002\000\034\003\uff19\006\uff19\011\uff19" +
    "\012\uff19\014\uff19\015\uff19\016\uff19\017\uff19\020\uff19\021" +
    "\uff19\046\uff19\047\uff19\051\uff19\001\002\000\034\003\uff1c" +
    "\006\uff1c\011\uff1c\012\uff1c\014\uff1c\015\uff1c\016\uff1c\017" +
    "\uff1c\020\uff1c\021\uff1c\046\uff1c\047\uff1c\051\uff1c\001\002" +
    "\000\034\003\uff1a\006\uff1a\011\uff1a\012\uff1a\014\uff1a\015" +
    "\uff1a\016\uff1a\017\uff1a\020\uff1a\021\uff1a\046\uff1a\047\uff1a" +
    "\051\uff1a\001\002\000\004\042\u0123\001\002\000\034\003" +
    "\uff1f\006\uff1f\011\uff1f\012\uff1f\014\uff1f\015\uff1f\016\uff1f" +
    "\017\uff1f\020\uff1f\021\uff1f\046\uff1f\047\uff1f\051\uff1f\001" +
    "\002\000\006\003\u0127\042\u0128\001\002\000\004\042\u0126" +
    "\001\002\000\034\003\uff16\006\uff16\011\uff16\012\uff16\014" +
    "\uff16\015\uff16\016\uff16\017\uff16\020\uff16\021\uff16\046\uff16" +
    "\047\uff16\051\uff16\001\002\000\034\003\uff15\006\uff15\011" +
    "\uff15\012\uff15\014\uff15\015\uff15\016\uff15\017\uff15\020\uff15" +
    "\021\uff15\046\uff15\047\uff15\051\uff15\001\002\000\034\003" +
    "\uff18\006\uff18\011\uff18\012\uff18\014\uff18\015\uff18\016\uff18" +
    "\017\uff18\020\uff18\021\uff18\046\uff18\047\uff18\051\uff18\001" +
    "\002\000\006\003\u012c\042\u012d\001\002\000\004\042\u012b" +
    "\001\002\000\034\003\uff1e\006\uff1e\011\uff1e\012\uff1e\014" +
    "\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e\046\uff1e" +
    "\047\uff1e\051\uff1e\001\002\000\034\003\uff1d\006\uff1d\011" +
    "\uff1d\012\uff1d\014\uff1d\015\uff1d\016\uff1d\017\uff1d\020\uff1d" +
    "\021\uff1d\046\uff1d\047\uff1d\051\uff1d\001\002\000\034\003" +
    "\uff21\006\uff21\011\uff21\012\uff21\014\uff21\015\uff21\016\uff21" +
    "\017\uff21\020\uff21\021\uff21\046\uff21\047\uff21\051\uff21\001" +
    "\002\000\004\041\u0135\001\002\000\004\041\u0133\001\002" +
    "\000\004\041\u0131\001\002\000\004\042\u0132\001\002\000" +
    "\034\003\uff1b\006\uff1b\011\uff1b\012\uff1b\014\uff1b\015\uff1b" +
    "\016\uff1b\017\uff1b\020\uff1b\021\uff1b\046\uff1b\047\uff1b\051" +
    "\uff1b\001\002\000\004\042\u0134\001\002\000\034\003\uff17" +
    "\006\uff17\011\uff17\012\uff17\014\uff17\015\uff17\016\uff17\017" +
    "\uff17\020\uff17\021\uff17\046\uff17\047\uff17\051\uff17\001\002" +
    "\000\004\042\u0136\001\002\000\034\003\uff20\006\uff20\011" +
    "\uff20\012\uff20\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20" +
    "\021\uff20\046\uff20\047\uff20\051\uff20\001\002\000\020\003" +
    "\u0163\025\u0161\026\u0162\040\u013c\050\u013a\051\u013d\052\u0160" +
    "\001\002\000\020\003\u0155\025\u0159\026\u015a\040\u013c\050" +
    "\u013a\051\u013d\052\u0158\001\002\000\014\003\u013e\040\u013c" +
    "\041\u013f\050\u013a\051\u013d\001\002\000\030\003\uff6f\013" +
    "\uff6f\020\uff6f\023\uff6f\024\uff6f\034\uff6f\035\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\044\uff6f\001\002\000\030\003\uff76\013" +
    "\uff76\020\uff76\023\uff76\024\uff76\034\uff76\035\u014a\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\001\002\000\012\003\u0155\040" +
    "\u013c\050\u013a\051\u013d\001\002\000\032\003\uff6e\013\uff6e" +
    "\020\uff6e\023\uff6e\024\uff6e\034\uff6e\035\uff6e\040\u0139\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\001\002\000\014\003\uff07" +
    "\034\u0151\035\u0148\041\uff07\044\u0150\001\002\000\030\003" +
    "\uff0c\013\uff0c\020\uff0c\023\uff0c\024\uff0c\034\uff0c\035\uff0c" +
    "\041\uff0c\042\uff0c\043\uff0c\044\uff0c\001\002\000\030\003" +
    "\uff6d\013\uff6d\020\uff6d\023\uff6d\024\uff6d\034\uff6d\035\uff6d" +
    "\041\uff6d\042\uff6d\043\uff6d\044\uff6d\001\002\000\006\003" +
    "\u014f\041\u014e\001\002\000\030\003\uff72\013\uff72\020\uff72" +
    "\023\uff72\024\uff72\034\uff72\035\uff72\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\001\002\000\012\003\uff09\034\u0145\041\uff09" +
    "\044\u0144\001\002\000\012\003\u013e\040\u013c\050\u013a\051" +
    "\u013d\001\002\000\012\003\u0147\040\u013c\050\u013a\051\u013d" +
    "\001\002\000\030\003\uff77\013\uff77\020\uff77\023\uff77\024" +
    "\uff77\034\uff77\035\u014a\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\001\002\000\030\003\uff75\013\uff75\020\uff75\023\uff75\024" +
    "\uff75\034\uff75\035\u0148\041\uff75\042\uff75\043\uff75\044\uff75" +
    "\001\002\000\010\040\u013c\050\u013a\051\u013d\001\002\000" +
    "\030\003\uff70\013\uff70\020\uff70\023\uff70\024\uff70\034\uff70" +
    "\035\uff70\041\uff70\042\uff70\043\uff70\044\uff70\001\002\000" +
    "\012\003\u014b\040\u013c\050\u013a\051\u013d\001\002\000\030" +
    "\003\uff71\013\uff71\020\uff71\023\uff71\024\uff71\034\uff71\035" +
    "\uff71\041\uff71\042\uff71\043\uff71\044\uff71\001\002\000\030" +
    "\003\uff73\013\uff73\020\uff73\023\uff73\024\uff73\034\uff73\035" +
    "\uff73\041\uff73\042\uff73\043\uff73\044\uff73\001\002\000\006" +
    "\003\uff0a\041\uff0a\001\002\000\030\003\uff0d\013\uff0d\020" +
    "\uff0d\023\uff0d\024\uff0d\034\uff0d\035\uff0d\041\uff0d\042\uff0d" +
    "\043\uff0d\044\uff0d\001\002\000\030\003\uff0b\013\uff0b\020" +
    "\uff0b\023\uff0b\024\uff0b\034\uff0b\035\uff0b\041\uff0b\042\uff0b" +
    "\043\uff0b\044\uff0b\001\002\000\012\003\u013e\040\u013c\050" +
    "\u013a\051\u013d\001\002\000\012\003\u0153\040\u013c\050\u013a" +
    "\051\u013d\001\002\000\030\003\uff74\013\uff74\020\uff74\023" +
    "\uff74\024\uff74\034\uff74\035\u014a\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\001\002\000\004\035\u0148\001\002\000\006\003" +
    "\uff08\041\uff08\001\002\000\006\034\u0151\035\u0148\001\002" +
    "\000\006\034\u0145\041\u0157\001\002\000\030\003\uff6c\013" +
    "\uff6c\020\uff6c\023\uff6c\024\uff6c\034\uff6c\035\uff6c\041\uff6c" +
    "\042\uff6c\043\uff6c\044\uff6c\001\002\000\004\042\u015f\001" +
    "\002\000\004\042\u015e\001\002\000\004\042\u015d\001\002" +
    "\000\006\034\u0145\042\u015c\001\002\000\034\003\uff83\006" +
    "\uff83\011\uff83\012\uff83\014\uff83\015\uff83\016\uff83\017\uff83" +
    "\020\uff83\021\uff83\046\uff83\047\uff83\051\uff83\001\002\000" +
    "\034\003\uff79\006\uff79\011\uff79\012\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\046\uff79\047\uff79\051" +
    "\uff79\001\002\000\034\003\uff7c\006\uff7c\011\uff7c\012\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\046" +
    "\uff7c\047\uff7c\051\uff7c\001\002\000\034\003\uff7f\006\uff7f" +
    "\011\uff7f\012\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020" +
    "\uff7f\021\uff7f\046\uff7f\047\uff7f\051\uff7f\001\002\000\006" +
    "\003\u016c\042\u016d\001\002\000\006\003\u016a\042\u016b\001" +
    "\002\000\006\003\u0168\042\u0169\001\002\000\010\034\u0151" +
    "\035\u0148\042\u0167\001\002\000\010\003\u0165\034\u0145\042" +
    "\u0166\001\002\000\034\003\uff81\006\uff81\011\uff81\012\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\046" +
    "\uff81\047\uff81\051\uff81\001\002\000\034\003\uff84\006\uff84" +
    "\011\uff84\012\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\046\uff84\047\uff84\051\uff84\001\002\000\034" +
    "\003\uff82\006\uff82\011\uff82\012\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\046\uff82\047\uff82\051\uff82" +
    "\001\002\000\034\003\uff78\006\uff78\011\uff78\012\uff78\014" +
    "\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\046\uff78" +
    "\047\uff78\051\uff78\001\002\000\034\003\uff7a\006\uff7a\011" +
    "\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\046\uff7a\047\uff7a\051\uff7a\001\002\000\034\003" +
    "\uff7b\006\uff7b\011\uff7b\012\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\020\uff7b\021\uff7b\046\uff7b\047\uff7b\051\uff7b\001" +
    "\002\000\034\003\uff7d\006\uff7d\011\uff7d\012\uff7d\014\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\046\uff7d\047" +
    "\uff7d\051\uff7d\001\002\000\034\003\uff7e\006\uff7e\011\uff7e" +
    "\012\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\046\uff7e\047\uff7e\051\uff7e\001\002\000\034\003\uff80" +
    "\006\uff80\011\uff80\012\uff80\014\uff80\015\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\046\uff80\047\uff80\051\uff80\001\002" +
    "\000\034\003\uff0e\006\uff0e\011\uff0e\012\uff0e\014\uff0e\015" +
    "\uff0e\016\uff0e\017\uff0e\020\uff0e\021\uff0e\046\uff0e\047\uff0e" +
    "\051\uff0e\001\002\000\034\003\uff0f\006\uff0f\011\uff0f\012" +
    "\uff0f\014\uff0f\015\uff0f\016\uff0f\017\uff0f\020\uff0f\021\uff0f" +
    "\046\uff0f\047\uff0f\051\uff0f\001\002\000\006\003\u017e\013" +
    "\u017f\001\002\000\022\003\uff25\013\uff25\020\uff25\023\u017a" +
    "\024\u017b\034\u0151\035\u0148\042\uff25\001\002\000\016\003" +
    "\uff26\013\uff26\020\uff26\023\u0176\024\u0177\042\uff26\001\002" +
    "\000\006\034\u0145\043\u0174\001\002\000\012\003\u0155\040" +
    "\u013c\050\u013a\051\u013d\001\002\000\020\003\uff22\013\uff22" +
    "\020\uff22\023\uff22\024\uff22\034\u0145\042\uff22\001\002\000" +
    "\012\003\u0171\040\u013c\050\u013a\051\u013d\001\002\000\012" +
    "\003\u0171\040\u013c\050\u013a\051\u013d\001\002\000\012\003" +
    "\uff28\013\uff28\020\uff28\042\uff28\001\002\000\012\003\uff27" +
    "\013\uff27\020\uff27\042\uff27\001\002\000\012\003\u0171\040" +
    "\u013c\050\u013a\051\u013d\001\002\000\012\003\u0171\040\u013c" +
    "\050\u013a\051\u013d\001\002\000\012\003\uff23\013\uff23\020" +
    "\uff23\042\uff23\001\002\000\012\003\uff24\013\uff24\020\uff24" +
    "\042\uff24\001\002\000\024\006\042\012\044\016\054\017" +
    "\037\020\040\021\032\046\047\047\057\051\046\001\002" +
    "\000\026\003\u0180\006\042\012\044\016\054\017\037\020" +
    "\040\021\032\046\047\047\057\051\046\001\002\000\010" +
    "\011\uff2e\014\uff2e\015\u0183\001\002\000\012\003\uff2e\011" +
    "\uff2e\014\uff2e\015\u0183\001\002\000\010\003\uff2a\011\uff2a" +
    "\014\u018e\001\002\000\012\003\u0171\040\u013c\050\u013a\051" +
    "\u013d\001\002\000\006\003\u0185\013\u0186\001\002\000\024" +
    "\006\042\012\044\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\026\003\u0187\006\042" +
    "\012\044\016\054\017\037\020\040\021\032\046\047\047" +
    "\057\051\046\001\002\000\012\003\uff2e\011\uff2e\014\uff2e" +
    "\015\u0183\001\002\000\012\003\uff2e\011\uff2e\014\uff2e\015" +
    "\u0183\001\002\000\010\003\uff2f\011\uff2f\014\uff2f\001\002" +
    "\000\010\003\uff2c\011\uff2c\014\uff2c\001\002\000\012\003" +
    "\uff2e\011\uff2e\014\uff2e\015\u0183\001\002\000\010\003\uff2d" +
    "\011\uff2d\014\uff2d\001\002\000\006\003\u0191\011\u0192\001" +
    "\002\000\026\003\u018f\006\042\012\044\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\006\003\uff29\011\uff29\001\002\000\006\003\uff2b\011\uff2b" +
    "\001\002\000\004\012\u0198\001\002\000\006\003\u0193\012" +
    "\u0194\001\002\000\004\042\u0197\001\002\000\006\003\u0195" +
    "\042\u0196\001\002\000\034\003\uff31\006\uff31\011\uff31\012" +
    "\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31" +
    "\046\uff31\047\uff31\051\uff31\001\002\000\034\003\uff35\006" +
    "\uff35\011\uff35\012\uff35\014\uff35\015\uff35\016\uff35\017\uff35" +
    "\020\uff35\021\uff35\046\uff35\047\uff35\051\uff35\001\002\000" +
    "\034\003\uff32\006\uff32\011\uff32\012\uff32\014\uff32\015\uff32" +
    "\016\uff32\017\uff32\020\uff32\021\uff32\046\uff32\047\uff32\051" +
    "\uff32\001\002\000\004\042\u0199\001\002\000\034\003\uff33" +
    "\006\uff33\011\uff33\012\uff33\014\uff33\015\uff33\016\uff33\017" +
    "\uff33\020\uff33\021\uff33\046\uff33\047\uff33\051\uff33\001\002" +
    "\000\006\011\uff2a\014\u018e\001\002\000\004\011\u019c\001" +
    "\002\000\004\012\u019d\001\002\000\004\042\u019e\001\002" +
    "\000\034\003\uff30\006\uff30\011\uff30\012\uff30\014\uff30\015" +
    "\uff30\016\uff30\017\uff30\020\uff30\021\uff30\046\uff30\047\uff30" +
    "\051\uff30\001\002\000\010\011\uff2e\014\uff2e\015\u0183\001" +
    "\002\000\006\011\uff2a\014\u018e\001\002\000\004\011\u01a2" +
    "\001\002\000\004\012\u01a3\001\002\000\004\042\u01a4\001" +
    "\002\000\034\003\uff34\006\uff34\011\uff34\012\uff34\014\uff34" +
    "\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\046\uff34\047" +
    "\uff34\051\uff34\001\002\000\012\003\uffc4\011\uffc4\014\uffc4" +
    "\015\uffc4\001\002\000\006\003\u01af\042\u01b0\001\002\000" +
    "\006\003\u01ad\042\u01ae\001\002\000\010\034\u0151\035\u0148" +
    "\042\u01ac\001\002\000\010\003\u01aa\034\u0145\042\u01ab\001" +
    "\002\000\034\003\uff96\006\uff96\011\uff96\012\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\046\uff96\047" +
    "\uff96\051\uff96\001\002\000\034\003\uff97\006\uff97\011\uff97" +
    "\012\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\046\uff97\047\uff97\051\uff97\001\002\000\034\003\uff95" +
    "\006\uff95\011\uff95\012\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\046\uff95\047\uff95\051\uff95\001\002" +
    "\000\034\003\uff98\006\uff98\011\uff98\012\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\046\uff98\047\uff98" +
    "\051\uff98\001\002\000\034\003\uff99\006\uff99\011\uff99\012" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\046\uff99\047\uff99\051\uff99\001\002\000\034\003\uff9a\006" +
    "\uff9a\011\uff9a\012\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\046\uff9a\047\uff9a\051\uff9a\001\002\000" +
    "\034\003\uff9b\006\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\046\uff9b\047\uff9b\051" +
    "\uff9b\001\002\000\012\003\uffc6\011\uffc6\014\uffc6\015\uffc6" +
    "\001\002\000\004\011\u01bd\001\002\000\006\003\u01b4\011" +
    "\u01b5\001\002\000\004\020\u01bb\001\002\000\006\003\u01b6" +
    "\020\u01b7\001\002\000\004\042\u01ba\001\002\000\006\003" +
    "\u01b8\042\u01b9\001\002\000\034\003\uff69\006\uff69\011\uff69" +
    "\012\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021" +
    "\uff69\046\uff69\047\uff69\051\uff69\001\002\000\034\003\uff6b" +
    "\006\uff6b\011\uff6b\012\uff6b\014\uff6b\015\uff6b\016\uff6b\017" +
    "\uff6b\020\uff6b\021\uff6b\046\uff6b\047\uff6b\051\uff6b\001\002" +
    "\000\034\003\uff67\006\uff67\011\uff67\012\uff67\014\uff67\015" +
    "\uff67\016\uff67\017\uff67\020\uff67\021\uff67\046\uff67\047\uff67" +
    "\051\uff67\001\002\000\004\042\u01bc\001\002\000\034\003" +
    "\uff6a\006\uff6a\011\uff6a\012\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\017\uff6a\020\uff6a\021\uff6a\046\uff6a\047\uff6a\051\uff6a\001" +
    "\002\000\004\020\u01be\001\002\000\004\042\u01bf\001\002" +
    "\000\034\003\uff68\006\uff68\011\uff68\012\uff68\014\uff68\015" +
    "\uff68\016\uff68\017\uff68\020\uff68\021\uff68\046\uff68\047\uff68" +
    "\051\uff68\001\002\000\006\003\u01c1\020\u01c2\001\002\000" +
    "\024\006\042\012\044\016\054\017\037\020\040\021\032" +
    "\046\047\047\057\051\046\001\002\000\026\003\u01c3\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\004\011\u01ce\001\002\000" +
    "\006\003\u01c5\011\u01c6\001\002\000\004\020\u01cc\001\002" +
    "\000\006\003\u01c7\020\u01c8\001\002\000\004\042\u01cb\001" +
    "\002\000\006\003\u01c9\042\u01ca\001\002\000\034\003\uff61" +
    "\006\uff61\011\uff61\012\uff61\014\uff61\015\uff61\016\uff61\017" +
    "\uff61\020\uff61\021\uff61\046\uff61\047\uff61\051\uff61\001\002" +
    "\000\034\003\uff66\006\uff66\011\uff66\012\uff66\014\uff66\015" +
    "\uff66\016\uff66\017\uff66\020\uff66\021\uff66\046\uff66\047\uff66" +
    "\051\uff66\001\002\000\034\003\uff62\006\uff62\011\uff62\012" +
    "\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62" +
    "\046\uff62\047\uff62\051\uff62\001\002\000\004\042\u01cd\001" +
    "\002\000\034\003\uff63\006\uff63\011\uff63\012\uff63\014\uff63" +
    "\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63\046\uff63\047" +
    "\uff63\051\uff63\001\002\000\004\020\u01cf\001\002\000\004" +
    "\042\u01d0\001\002\000\034\003\uff64\006\uff64\011\uff64\012" +
    "\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64" +
    "\046\uff64\047\uff64\051\uff64\001\002\000\004\011\u01d2\001" +
    "\002\000\004\020\u01d3\001\002\000\004\042\u01d4\001\002" +
    "\000\034\003\uff65\006\uff65\011\uff65\012\uff65\014\uff65\015" +
    "\uff65\016\uff65\017\uff65\020\uff65\021\uff65\046\uff65\047\uff65" +
    "\051\uff65\001\002\000\012\003\uffcc\011\uffcc\014\uffcc\015" +
    "\uffcc\001\002\000\012\003\uffc8\011\uffc8\014\uffc8\015\uffc8" +
    "\001\002\000\012\003\uffc0\011\uffc0\014\uffc0\015\uffc0\001" +
    "\002\000\012\003\uffbc\011\uffbc\014\uffbc\015\uffbc\001\002" +
    "\000\012\003\u0171\040\u013c\050\u013a\051\u013d\001\002\000" +
    "\012\003\u0171\040\u013c\050\u013a\051\u013d\001\002\000\006" +
    "\003\u01dc\042\u01dd\001\002\000\034\003\uff5e\006\uff5e\011" +
    "\uff5e\012\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\046\uff5e\047\uff5e\051\uff5e\001\002\000\034\003" +
    "\uff60\006\uff60\011\uff60\012\uff60\014\uff60\015\uff60\016\uff60" +
    "\017\uff60\020\uff60\021\uff60\046\uff60\047\uff60\051\uff60\001" +
    "\002\000\004\042\u01df\001\002\000\034\003\uff5f\006\uff5f" +
    "\011\uff5f\012\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020" +
    "\uff5f\021\uff5f\046\uff5f\047\uff5f\051\uff5f\001\002\000\010" +
    "\003\uff93\006\uff93\040\012\001\002\000\006\006\uff93\040" +
    "\012\001\002\000\004\006\u01e3\001\002\000\012\003\u01e5" +
    "\031\u01e8\032\u01e6\033\u01e7\001\002\000\006\007\u01e9\042" +
    "\u01ea\001\002\000\012\003\uffdb\007\uffdb\041\uffdb\042\uffdb" +
    "\001\002\000\012\003\uffdd\007\uffdd\041\uffdd\042\uffdd\001" +
    "\002\000\012\003\uffdc\007\uffdc\041\uffdc\042\uffdc\001\002" +
    "\000\012\003\uffde\007\uffde\041\uffde\042\uffde\001\002\000" +
    "\012\004\021\005\026\010\u01ec\051\024\001\002\000\014" +
    "\003\uffd1\004\uffd1\005\uffd1\010\uffd1\051\uffd1\001\002\000" +
    "\004\010\u01f1\001\002\000\024\006\042\012\044\016\054" +
    "\017\037\020\040\021\032\046\047\047\057\051\046\001" +
    "\002\000\004\011\u01ee\001\002\000\004\051\u01ef\001\002" +
    "\000\004\042\u01f0\001\002\000\014\003\uffa2\004\uffa2\005" +
    "\uffa2\010\uffa2\051\uffa2\001\002\000\024\006\042\012\044" +
    "\016\054\017\037\020\040\021\032\046\047\047\057\051" +
    "\046\001\002\000\004\011\u01f3\001\002\000\004\051\u01f4" +
    "\001\002\000\004\042\u01f5\001\002\000\014\003\uffaa\004" +
    "\uffaa\005\uffaa\010\uffaa\051\uffaa\001\002\000\006\003\u01f7" +
    "\006\u01f8\001\002\000\012\003\u01e5\031\u01e8\032\u01e6\033" +
    "\u01e7\001\002\000\012\003\u01e5\031\u01e8\032\u01e6\033\u01e7" +
    "\001\002\000\010\003\u01fa\007\u01fb\042\u01fc\001\002\000" +
    "\014\003\uffcf\004\uffcf\005\uffcf\010\uffcf\051\uffcf\001\002" +
    "\000\014\003\u01fe\004\021\005\026\010\u01ff\051\024\001" +
    "\002\000\014\003\uffd2\004\uffd2\005\uffd2\010\uffd2\051\uffd2" +
    "\001\002\000\006\003\u0212\010\u0213\001\002\000\024\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\026\003\u0200\006\042\012" +
    "\044\016\054\017\037\020\040\021\032\046\047\047\057" +
    "\051\046\001\002\000\004\011\u020b\001\002\000\006\003" +
    "\u0202\011\u0203\001\002\000\004\051\u0209\001\002\000\006" +
    "\003\u0205\051\u0204\001\002\000\006\003\u0207\042\u0208\001" +
    "\002\000\004\042\u0206\001\002\000\014\003\uff9e\004\uff9e" +
    "\005\uff9e\010\uff9e\051\uff9e\001\002\000\014\003\uff9d\004" +
    "\uff9d\005\uff9d\010\uff9d\051\uff9d\001\002\000\014\003\uffa3" +
    "\004\uffa3\005\uffa3\010\uffa3\051\uffa3\001\002\000\004\042" +
    "\u020a\001\002\000\014\003\uff9f\004\uff9f\005\uff9f\010\uff9f" +
    "\051\uff9f\001\002\000\004\051\u020c\001\002\000\004\042" +
    "\u020d\001\002\000\014\003\uff9c\004\uff9c\005\uff9c\010\uff9c" +
    "\051\uff9c\001\002\000\004\011\u020f\001\002\000\004\051" +
    "\u0210\001\002\000\004\042\u0211\001\002\000\014\003\uffa0" +
    "\004\uffa0\005\uffa0\010\uffa0\051\uffa0\001\002\000\024\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\026\003\u0214\006\042\012" +
    "\044\016\054\017\037\020\040\021\032\046\047\047\057" +
    "\051\046\001\002\000\004\011\u021f\001\002\000\006\003" +
    "\u0216\011\u0217\001\002\000\004\051\u021d\001\002\000\006" +
    "\003\u0219\051\u0218\001\002\000\006\003\u021b\042\u021c\001" +
    "\002\000\004\042\u021a\001\002\000\014\003\uffa6\004\uffa6" +
    "\005\uffa6\010\uffa6\051\uffa6\001\002\000\014\003\uffa5\004" +
    "\uffa5\005\uffa5\010\uffa5\051\uffa5\001\002\000\014\003\uffab" +
    "\004\uffab\005\uffab\010\uffab\051\uffab\001\002\000\004\042" +
    "\u021e\001\002\000\014\003\uffa7\004\uffa7\005\uffa7\010\uffa7" +
    "\051\uffa7\001\002\000\004\051\u0220\001\002\000\004\042" +
    "\u0221\001\002\000\014\003\uffa4\004\uffa4\005\uffa4\010\uffa4" +
    "\051\uffa4\001\002\000\004\011\u0223\001\002\000\004\051" +
    "\u0224\001\002\000\004\042\u0225\001\002\000\014\003\uffa8" +
    "\004\uffa8\005\uffa8\010\uffa8\051\uffa8\001\002\000\006\007" +
    "\u0227\042\u0228\001\002\000\012\004\021\005\026\010\u022a" +
    "\051\024\001\002\000\014\003\uffd0\004\uffd0\005\uffd0\010" +
    "\uffd0\051\uffd0\001\002\000\004\010\u022f\001\002\000\024" +
    "\006\042\012\044\016\054\017\037\020\040\021\032\046" +
    "\047\047\057\051\046\001\002\000\004\011\u022c\001\002" +
    "\000\004\051\u022d\001\002\000\004\042\u022e\001\002\000" +
    "\014\003\uffa1\004\uffa1\005\uffa1\010\uffa1\051\uffa1\001\002" +
    "\000\024\006\042\012\044\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\004\011\u0231" +
    "\001\002\000\004\051\u0232\001\002\000\004\042\u0233\001" +
    "\002\000\014\003\uffa9\004\uffa9\005\uffa9\010\uffa9\051\uffa9" +
    "\001\002\000\024\006\042\012\044\016\054\017\037\020" +
    "\040\021\032\046\047\047\057\051\046\001\002\000\004" +
    "\011\u0236\001\002\000\004\051\u0237\001\002\000\004\042" +
    "\u0238\001\002\000\004\002\uffed\001\002\000\004\011\u023a" +
    "\001\002\000\004\051\u023b\001\002\000\004\042\u023c\001" +
    "\002\000\004\002\uffef\001\002\000\004\051\024\001\002" +
    "\000\014\003\u01e5\031\u01e8\032\u01e6\033\u01e7\051\024\001" +
    "\002\000\012\003\u01e5\031\u01e8\032\u01e6\033\u01e7\001\002" +
    "\000\006\003\u0241\042\u0242\001\002\000\014\003\uffd3\004" +
    "\uffd3\005\uffd3\010\uffd3\051\uffd3\001\002\000\014\003\uffd5" +
    "\004\uffd5\005\uffd5\010\uffd5\051\uffd5\001\002\000\004\042" +
    "\u0245\001\002\000\014\003\uffd6\004\uffd6\005\uffd6\010\uffd6" +
    "\051\uffd6\001\002\000\014\003\uffd4\004\uffd4\005\uffd4\010" +
    "\uffd4\051\uffd4\001\002\000\014\003\uffd7\004\uffd7\005\uffd7" +
    "\010\uffd7\051\uffd7\001\002\000\006\003\uffe8\010\uffe8\001" +
    "\002\000\024\006\042\012\044\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\026\003" +
    "\u024a\006\042\012\044\016\054\017\037\020\040\021\032" +
    "\046\047\047\057\051\046\001\002\000\004\011\u0255\001" +
    "\002\000\006\003\u024c\011\u024d\001\002\000\004\051\u0253" +
    "\001\002\000\006\003\u024f\051\u024e\001\002\000\006\003" +
    "\u0251\042\u0252\001\002\000\004\042\u0250\001\002\000\004" +
    "\002\ufff2\001\002\000\004\002\ufff1\001\002\000\004\002" +
    "\ufff5\001\002\000\004\042\u0254\001\002\000\004\002\ufff3" +
    "\001\002\000\004\051\u0256\001\002\000\004\042\u0257\001" +
    "\002\000\004\002\ufff0\001\002\000\004\011\u0259\001\002" +
    "\000\004\051\u025a\001\002\000\004\042\u025b\001\002\000" +
    "\004\002\ufff4\001\002\000\012\003\uff93\007\uff93\040\012" +
    "\042\uff93\001\002\000\010\007\uff93\040\012\042\uff93\001" +
    "\002\000\006\007\u025f\042\u0260\001\002\000\012\004\021" +
    "\005\026\010\u0262\051\024\001\002\000\014\003\uffd9\004" +
    "\uffd9\005\uffd9\010\uffd9\051\uffd9\001\002\000\004\010\u0267" +
    "\001\002\000\024\006\042\012\044\016\054\017\037\020" +
    "\040\021\032\046\047\047\057\051\046\001\002\000\004" +
    "\011\u0264\001\002\000\004\051\u0265\001\002\000\004\042" +
    "\u0266\001\002\000\014\003\uffb1\004\uffb1\005\uffb1\010\uffb1" +
    "\051\uffb1\001\002\000\024\006\042\012\044\016\054\017" +
    "\037\020\040\021\032\046\047\047\057\051\046\001\002" +
    "\000\004\011\u0269\001\002\000\004\051\u026a\001\002\000" +
    "\004\042\u026b\001\002\000\014\003\uffb9\004\uffb9\005\uffb9" +
    "\010\uffb9\051\uffb9\001\002\000\010\003\u026d\007\u026e\042" +
    "\u026f\001\002\000\014\003\uffd8\004\uffd8\005\uffd8\010\uffd8" +
    "\051\uffd8\001\002\000\014\003\u0271\004\021\005\026\010" +
    "\u0272\051\024\001\002\000\014\003\uffda\004\uffda\005\uffda" +
    "\010\uffda\051\uffda\001\002\000\006\003\u028a\010\u028b\001" +
    "\002\000\026\006\042\010\u0281\012\044\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\026\003\u0273\006\042\012\044\016\054\017\037\020\040" +
    "\021\032\046\047\047\057\051\046\001\002\000\004\011" +
    "\u027e\001\002\000\006\003\u0275\011\u0276\001\002\000\004" +
    "\051\u027c\001\002\000\006\003\u0278\051\u0277\001\002\000" +
    "\006\003\u027a\042\u027b\001\002\000\004\042\u0279\001\002" +
    "\000\014\003\uffae\004\uffae\005\uffae\010\uffae\051\uffae\001" +
    "\002\000\014\003\uffad\004\uffad\005\uffad\010\uffad\051\uffad" +
    "\001\002\000\014\003\uffb2\004\uffb2\005\uffb2\010\uffb2\051" +
    "\uffb2\001\002\000\004\042\u027d\001\002\000\014\003\uffaf" +
    "\004\uffaf\005\uffaf\010\uffaf\051\uffaf\001\002\000\004\051" +
    "\u027f\001\002\000\004\042\u0280\001\002\000\014\003\uffac" +
    "\004\uffac\005\uffac\010\uffac\051\uffac\001\002\000\024\006" +
    "\042\012\044\016\054\017\037\020\040\021\032\046\047" +
    "\047\057\051\046\001\002\000\004\011\u0283\001\002\000" +
    "\004\051\u0284\001\002\000\004\042\u0285\001\002\000\014" +
    "\003\uffb0\004\uffb0\005\uffb0\010\uffb0\051\uffb0\001\002\000" +
    "\004\011\u0287\001\002\000\004\051\u0288\001\002\000\004" +
    "\042\u0289\001\002\000\014\003\uffb3\004\uffb3\005\uffb3\010" +
    "\uffb3\051\uffb3\001\002\000\024\006\042\012\044\016\054" +
    "\017\037\020\040\021\032\046\047\047\057\051\046\001" +
    "\002\000\026\003\u028c\006\042\012\044\016\054\017\037" +
    "\020\040\021\032\046\047\047\057\051\046\001\002\000" +
    "\004\011\u0297\001\002\000\006\003\u028e\011\u028f\001\002" +
    "\000\004\051\u0295\001\002\000\006\003\u0291\051\u0290\001" +
    "\002\000\006\003\u0293\042\u0294\001\002\000\004\042\u0292" +
    "\001\002\000\014\003\uffb6\004\uffb6\005\uffb6\010\uffb6\051" +
    "\uffb6\001\002\000\014\003\uffb5\004\uffb5\005\uffb5\010\uffb5" +
    "\051\uffb5\001\002\000\014\003\uffba\004\uffba\005\uffba\010" +
    "\uffba\051\uffba\001\002\000\004\042\u0296\001\002\000\014" +
    "\003\uffb7\004\uffb7\005\uffb7\010\uffb7\051\uffb7\001\002\000" +
    "\004\051\u0298\001\002\000\004\042\u0299\001\002\000\014" +
    "\003\uffb4\004\uffb4\005\uffb4\010\uffb4\051\uffb4\001\002\000" +
    "\004\011\u029b\001\002\000\004\051\u029c\001\002\000\004" +
    "\042\u029d\001\002\000\014\003\uffb8\004\uffb8\005\uffb8\010" +
    "\uffb8\051\uffb8\001\002\000\006\003\uffe4\010\uffe4\001\002" +
    "\000\006\003\uffe2\010\uffe2\001\002\000\006\003\uffe0\010" +
    "\uffe0\001\002\000\010\003\uff8b\037\uff8b\044\u02b8\001\002" +
    "\000\012\003\uff8a\037\uff8a\041\u02b7\044\u02ae\001\002\000" +
    "\006\003\u02b5\041\u02b6\001\002\000\006\003\u02a5\037\u02a6" +
    "\001\002\000\016\003\uff85\027\u02a8\030\u02a7\031\uff85\032" +
    "\uff85\033\uff85\001\002\000\016\003\uff85\027\u02a8\030\u02a7" +
    "\031\uff85\032\uff85\033\uff85\001\002\000\012\003\uff87\031" +
    "\uff87\032\uff87\033\uff87\001\002\000\014\003\uff88\030\u02b0" +
    "\031\uff88\032\uff88\033\uff88\001\002\000\012\003\u01e5\031" +
    "\u01e8\032\u01e6\033\u01e7\001\002\000\010\003\uff8e\041\uff8e" +
    "\042\u02ab\001\002\000\006\003\u02ac\051\u02a1\001\002\000" +
    "\010\003\uff8a\037\uff8a\044\u02ae\001\002\000\006\003\uff90" +
    "\041\uff90\001\002\000\006\003\u02ac\051\u02a1\001\002\000" +
    "\006\003\uff89\037\uff89\001\002\000\012\003\uff86\031\uff86" +
    "\032\uff86\033\uff86\001\002\000\012\003\u01e5\031\u01e8\032" +
    "\u01e6\033\u01e7\001\002\000\010\003\uff8d\041\uff8d\042\u02b3" +
    "\001\002\000\006\003\u02ac\051\u02a1\001\002\000\006\003" +
    "\uff8f\041\uff8f\001\002\000\012\003\uff92\006\uff92\007\uff92" +
    "\042\uff92\001\002\000\012\003\uff94\006\uff94\007\uff94\042" +
    "\uff94\001\002\000\012\003\uff91\006\uff91\007\uff91\042\uff91" +
    "\001\002\000\006\003\u02ac\051\u02a1\001\002\000\006\003" +
    "\uff8c\037\uff8c\001\002\000\010\003\u02bb\006\u02bc\007\u02bd" +
    "\001\002\000\014\003\025\004\021\005\026\010\027\051" +
    "\024\001\002\000\012\003\u01e5\031\u01e8\032\u01e6\033\u01e7" +
    "\001\002\000\004\003\u02be\001\002\000\004\002\ufff7\001" +
    "\002\000\004\007\u02c0\001\002\000\014\003\025\004\021" +
    "\005\026\010\027\051\024\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufff8\001\002" +
    "\000\004\002\001\001\002\000\006\007\uff93\040\012\001" +
    "\002\000\004\007\u02c7\001\002\000\014\003\025\004\021" +
    "\005\026\010\027\051\024\001\002\000\004\002\uffff\001" +
    "\002\000\010\003\uff93\007\uff93\040\012\001\002\000\006" +
    "\007\uff93\040\012\001\002\000\004\007\u02cc\001\002\000" +
    "\014\003\025\004\021\005\026\010\027\051\024\001\002" +
    "\000\004\002\ufffe\001\002\000\006\003\u02cf\007\u02d0\001" +
    "\002\000\014\003\025\004\021\005\026\010\027\051\024" +
    "\001\002\000\014\003\u02d2\004\021\005\026\010\027\051" +
    "\024\001\002\000\004\002\ufff6\001\002\000\030\002\ufffc" +
    "\006\042\010\u0234\012\044\016\054\017\037\020\040\021" +
    "\032\046\047\047\057\051\046\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02d2\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u02b9\001\001\000\004\013\012\001\001\000\006\004" +
    "\u02a3\026\u02a2\001\001\000\002\001\001\000\020\003\021" +
    "\006\017\007\016\010\022\011\014\012\015\030\027\001" +
    "\001\000\016\003\u029f\007\016\010\022\011\014\012\015" +
    "\030\027\001\001\000\016\003\u029e\007\016\010\022\011" +
    "\014\012\015\030\027\001\001\000\016\003\u029d\007\016" +
    "\010\022\011\014\012\015\030\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u0246" +
    "\007\016\010\022\011\014\012\015\030\027\001\001\000" +
    "\002\001\001\000\032\005\u0234\014\055\015\040\016\034" +
    "\017\035\020\032\021\052\024\033\025\044\033\047\034" +
    "\042\035\054\001\001\000\002\001\001\000\032\005\051" +
    "\014\055\015\040\016\034\017\035\020\032\021\052\024" +
    "\033\025\044\033\047\034\042\035\054\001\001\000\016" +
    "\003\030\007\016\010\022\011\014\012\015\030\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\u01d7" +
    "\014\055\015\040\016\034\017\035\020\032\021\052\024" +
    "\033\025\044\033\047\034\042\035\054\001\001\000\032" +
    "\005\u01d6\014\055\015\040\016\034\017\035\020\032\021" +
    "\052\024\033\025\044\033\047\034\042\035\054\001\001" +
    "\000\032\005\u01d5\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\032\005\u01d4\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\016\025\u013f\031\u01bf\032\u0171\036" +
    "\u0172\037\u013a\040\u0141\001\001\000\032\005\u01b2\014\055" +
    "\015\040\016\034\017\035\020\032\021\052\024\033\025" +
    "\044\033\047\034\042\035\054\001\001\000\032\005\u01b0" +
    "\014\055\015\040\016\034\017\035\020\032\021\052\024" +
    "\033\025\044\033\047\034\042\035\054\001\001\000\012" +
    "\025\u013f\036\u01a8\037\u013a\040\u0141\001\001\000\032\005" +
    "\u01a4\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\016\025\u013f\031\u016f\032\u0171\036\u0172\037\u013a\040\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\u0115\014\055\015\040\016\034\017\035" +
    "\020\032\021\052\024\033\025\044\033\047\034\042\035" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\u0108\014\055\015\040\016\034\017\035\020\032\021" +
    "\052\024\033\025\044\033\047\034\042\035\054\001\001" +
    "\000\002\001\001\000\032\005\076\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\032\005\075\014\055\015" +
    "\040\016\034\017\035\020\032\021\052\024\033\025\044" +
    "\033\047\034\042\035\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\110\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\115" +
    "\014\055\015\040\016\034\017\035\020\032\021\052\024" +
    "\033\025\044\033\047\034\042\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\125\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\132\014\055\015\040" +
    "\016\034\017\035\020\032\021\052\024\033\025\044\033" +
    "\047\034\042\035\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\146\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\153\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\163\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\170\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\203\014\055\015\040\016\034" +
    "\017\035\020\032\021\052\024\033\025\044\033\047\034" +
    "\042\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\210\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\222\014\055" +
    "\015\040\016\034\017\035\020\032\021\052\024\033\025" +
    "\044\033\047\034\042\035\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\246\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\032\005\230\014\055\015\040\016\034\017\035" +
    "\020\032\021\052\024\033\025\044\033\047\034\042\035" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\272\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\032\005\255\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\301\014\055\015\040\016\034" +
    "\017\035\020\032\021\052\024\033\025\044\033\047\034" +
    "\042\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\306\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\320\014\055" +
    "\015\040\016\034\017\035\020\032\021\052\024\033\025" +
    "\044\033\047\034\042\035\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\344\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\032\005\327\014\055\015\040\016\034\017\035" +
    "\020\032\021\052\024\033\025\044\033\047\034\042\035" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\370\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\032\005\353\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\377\014\055\015\040\016\034" +
    "\017\035\020\032\021\052\024\033\025\044\033\047\034" +
    "\042\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\u0104\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\u013f\036\u0163\037\u013a\040\u0141\001" +
    "\001\000\012\025\u013f\036\u015a\037\u013a\040\u0141\001\001" +
    "\000\014\025\u013f\027\u0140\036\u0142\037\u013a\040\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\u013f" +
    "\036\u0155\037\u013a\040\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\u013f\027\u014c\036\u0142\037\u013a\040\u0141\001\001\000\010" +
    "\025\u013f\037\u0145\040\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u013f\040\u0148\001\001\000\002" +
    "\001\001\000\006\025\u013f\040\u014b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\u013f\027\u0153\036\u0142\037" +
    "\u013a\040\u0141\001\001\000\010\025\u013f\037\u0151\040\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\u013f\036" +
    "\u0174\037\u013a\040\u0141\001\001\000\002\001\001\000\016" +
    "\025\u013f\031\u0178\032\u0171\036\u0172\037\u013a\040\u0141\001" +
    "\001\000\016\025\u013f\031\u0177\032\u0171\036\u0172\037\u013a" +
    "\040\u0141\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\025\u013f\031\u017c\032\u0171\036\u0172\037\u013a\040\u0141" +
    "\001\001\000\016\025\u013f\031\u017b\032\u0171\036\u0172\037" +
    "\u013a\040\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\u019e\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\032\005\u0180\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\004\022\u0199\001\001\000\004\022" +
    "\u0181\001\001\000\004\023\u018c\001\001\000\016\025\u013f" +
    "\031\u0183\032\u0171\036\u0172\037\u013a\040\u0141\001\001\000" +
    "\002\001\001\000\032\005\u018a\014\055\015\040\016\034" +
    "\017\035\020\032\021\052\024\033\025\044\033\047\034" +
    "\042\035\054\001\001\000\032\005\u0187\014\055\015\040" +
    "\016\034\017\035\020\032\021\052\024\033\025\044\033" +
    "\047\034\042\035\054\001\001\000\004\022\u0189\001\001" +
    "\000\004\022\u0188\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u018b\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\u018f\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u019a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u019f\001\001\000\004" +
    "\023\u01a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\u01d0\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\032\005\u01c3\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\u013f\031\u01dd\032\u0171\036\u0172" +
    "\037\u013a\040\u0141\001\001\000\016\025\u013f\031\u01da\032" +
    "\u0171\036\u0172\037\u013a\040\u0141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01f5\001\001\000\004\013\u01e1" +
    "\001\001\000\002\001\001\000\004\041\u01e3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\u01ea\007\016\010" +
    "\022\011\014\012\015\030\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\u01ec\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\u01f1" +
    "\014\055\015\040\016\034\017\035\020\032\021\052\024" +
    "\033\025\044\033\047\034\042\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0225\001\001\000\004" +
    "\041\u01f8\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\u01fc\007\016\010\022\011\014\012\015\030\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\u020d\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\032\005\u0200\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\u0221\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\032\005" +
    "\u0214\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u0228\007\016\010\022\011\014\012\015\030\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\u022a\014" +
    "\055\015\040\016\034\017\035\020\032\021\052\024\033" +
    "\025\044\033\047\034\042\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\u022f\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\u0238\014\055\015\040" +
    "\016\034\017\035\020\032\021\052\024\033\025\044\033" +
    "\047\034\042\035\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u0245\001\001\000\006\030\u0243\041\u0242\001" +
    "\001\000\004\041\u023f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\u0257\014\055\015\040\016\034\017\035\020" +
    "\032\021\052\024\033\025\044\033\047\034\042\035\054" +
    "\001\001\000\032\005\u024a\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u026b\001\001\000\004\013\u025d\001\001\000\002\001" +
    "\001\000\016\003\u0260\007\016\010\022\011\014\012\015" +
    "\030\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\u0262\014\055\015\040\016\034\017\035\020\032" +
    "\021\052\024\033\025\044\033\047\034\042\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\u0267\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u026f\007\016\010\022\011" +
    "\014\012\015\030\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\u0281\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\032\005\u0273\014\055\015\040\016" +
    "\034\017\035\020\032\021\052\024\033\025\044\033\047" +
    "\034\042\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\u0285\014\055\015\040\016\034\017\035\020\032\021\052" +
    "\024\033\025\044\033\047\034\042\035\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\u0299\014\055\015\040" +
    "\016\034\017\035\020\032\021\052\024\033\025\044\033" +
    "\047\034\042\035\054\001\001\000\032\005\u028c\014\055" +
    "\015\040\016\034\017\035\020\032\021\052\024\033\025" +
    "\044\033\047\034\042\035\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u02b0\001\001\000\004" +
    "\042\u02a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u02a9\001\001\000\002\001\001\000\006\004\u02a3" +
    "\026\u02ac\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u02ae\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u02b1\001\001\000\002\001\001\000\006\004" +
    "\u02a3\026\u02b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u02b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\021" +
    "\006\u02c2\007\016\010\022\011\014\012\015\030\027\001" +
    "\001\000\004\041\u02be\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\021\006\u02c0\007" +
    "\016\010\022\011\014\012\015\030\027\001\001\000\004" +
    "\043\u02c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02c5\001\001\000\002\001\001" +
    "\000\020\003\021\006\u02c7\007\016\010\022\011\014\012" +
    "\015\030\027\001\001\000\002\001\001\000\004\013\u02cd" +
    "\001\001\000\004\013\u02ca\001\001\000\002\001\001\000" +
    "\020\003\021\006\u02cc\007\016\010\022\011\014\012\015" +
    "\030\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\021\006\u02d3\007\016\010\022\011\014\012\015" +
    "\030\027\001\001\000\020\003\021\006\u02d0\007\016\010" +
    "\022\011\014\012\015\030\027\001\001\000\004\043\u02d2" +
    "\001\001\000\032\005\u0234\014\055\015\040\016\034\017" +
    "\035\020\032\021\052\024\033\025\044\033\047\034\042" +
    "\035\054\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_body ::= PROCEDURE ID main_parameters IS begin_main_body fin_parseo 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> beg = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	    Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);

        Nodo tmp3 = new Nodo("ID"); 
        tmp3.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        tmp.addHijo((Nodo)tmp3);

        if (b != null){
            tmp.addHijo(b);        
        }

        System.out.println(beg);

        for(int i = beg.size()-1; i>=0;i--){
            tmp.addHijo(beg.get(i));
        }

        parser.padre = (Nodo) tmp;
        System.out.println("OK begin");
        RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= error ID main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= PROCEDURE error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_body ::= PROCEDURE ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_body ::= PROCEDURE ID main_parameters IS error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_body ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_body ::= FUNCTION ID main_parameters RETURN var_type IS begin_main_body fin_parseo 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> beg = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            Nodo tmp = new Nodo("Inicio");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor("null");

            Nodo tmp2 = new Nodo("ID");
            tmp2.setNumNodo(parser.contador++);
            tmp2.setValor(id);
            tmp.addHijo(tmp2);

            if (b != null){
                tmp.addHijo(b);
            }

            Nodo tmp3 = new Nodo("RETURN_TYPE");
            tmp3.setNumNodo(parser.contador++);
            tmp3.setValor(a);
            tmp.addHijo(tmp3);
            
            for(int i = beg.size()-1; i>=0;i--){
                tmp.addHijo(beg.get(i));
            }

            parser.padre = (Nodo) tmp;
            System.out.println("OK begin");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_body ::= FUNCTION error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_body ::= FUNCTION ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_body ::= FUNCTION ID main_parameters IS error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fin_parseo ::= 
            {
              Nodo RESULT =null;
		 System.out.println("Parseo ha finalizado.");
        MainGui.outputArea.append("Parseo ha finalizado \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_parseo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // begin_main_body ::= declaration_list BEGIN content END ID PYC 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                        LinkedList list = new LinkedList<Nodo>();                        
                        
                        Nodo tmp = new Nodo("DECLARATIONS");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = a.size()-1; i>=0;i--){
                            tmp.addHijo(a.get(i));
                        }

                        Nodo tmp2 = new Nodo("CONTENT");
                        tmp2.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp2.addHijo(e.get(i));
                        }
                        
                        list.add(tmp);

                        list.add(tmp2);
                    
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begin_main_body ::= declaration_list error content END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_main_body ::= declaration_list BEGIN content error ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_main_body ::= declaration_list BEGIN content END error PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_main_body ::= declaration_list BEGIN content END ID error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // begin_main_body ::= declaration_list BEGIN error END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // begin_main_body ::= error BEGIN content END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // begin_main_body ::= BEGIN content END ID PYC 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        Nodo tmp = new Nodo("CONTENT");
                        tmp.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        System.out.println("OK content");
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // begin_main_body ::= error content END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // begin_main_body ::= BEGIN content error ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // begin_main_body ::= BEGIN content END error PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // begin_main_body ::= BEGIN content END ID error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // begin_main_body ::= BEGIN error END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_list ::= procedure_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_list ::= procedure_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= variable_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("VARIABLE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = a.size()-1; i>=0;i--){
                            tmp.addHijo(a.get(i));
                            System.out.println(a.get(i).getNombre());
                        }
                        b.add((Nodo)tmp);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= variable_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("VARIABLE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT=list;                
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_list ::= function_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_list ::= function_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_list ::= procedure_block declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_list ::= procedure_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_list ::= function_block declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration_list ::= function_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        System.out.println(e.getNombre());
                        list.add(e);
                        RESULT=list;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_type ::= INT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_type ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_type ::= FLOAT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_type ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // procedure_declaration ::= PROCEDURE ID main_parameters PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("PROCEDURE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo(tmp2);

                        tmp.addHijo(a);
                        RESULT = tmp;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedure_declaration ::= PROCEDURE error main_parameters PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // procedure_declaration ::= PROCEDURE ID main_parameters error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_declaration ::= ID COMA variable_declaration 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("ID");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        System.out.println(tmp);
                        b.add(tmp);

                        RESULT = b;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable_declaration ::= ID error variable_declaration 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_declaration ::= ID OPDEC var_type PYC 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("ID"); 
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        LinkedList list = new LinkedList<Nodo>();
                        Nodo tmp2 = new Nodo("VAR_TYPE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(x);
                        list.add(tmp2);
                        list.add(tmp);
                        System.out.println("ok variable declaration caso final");

                        RESULT = list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_declaration ::= ID error var_type PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_declaration ::= ID OPDEC var_type error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= FUNCTION ID main_parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("FUNCTION_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo(tmp2);

                        tmp.addHijo(a);

                        Nodo tmp3 = new Nodo("RETURN_TYPE");
                        tmp3.setNumNodo(parser.contador++);
                        tmp3.setValor(b);
                        tmp.addHijo(tmp3);

                        RESULT = tmp;    
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= FUNCTION error main_parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_declaration ::= FUNCTION ID main_parameters error var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_declaration ::= FUNCTION ID main_parameters RETURN var_type error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // content ::= assignment content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // content ::= assignment 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // content ::= while_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           
            b.add(a);
            System.out.println("while + content ");
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // content ::= while_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            System.out.println("ok while");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // content ::= if_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            b.add(a);
			
			System.out.println("if + content ");
			RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // content ::= if_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("if block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // content ::= for_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			b.add(a);

			System.out.println("for + content ");
			RESULT=b;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // content ::= for_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("for_block");
			RESULT=list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // content ::= loop_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			tmp.setNumNodo(parser.contador++);*/
            b.add(a);
			
			System.out.println("loop + content ");
			RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // content ::= loop_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("loop_block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // content ::= put content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);
          
            System.out.println("put + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // content ::= put 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            System.out.println("put");
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // content ::= get content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);

            System.out.println("get + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // content ::= get 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("get");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // content ::= calling_subroutine content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // content ::= calling_subroutine 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // content ::= return_statement content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // content ::= return_statement 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // content ::= exit_cycle content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // content ::= exit_cycle 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("PROCEDURE_BLOCK");
                    tmp.setNumNodo(parser.contador++);

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);

                    tmp.addHijo(tmp2);
                    if(b != null){
                        tmp.addHijo(b);
                    }

                    Nodo tmp4 = new Nodo("DECLARATIONS");
                    tmp4.setNumNodo(parser.contador++);
                    for(int i = d.size()-1; i>=0;i--){
                        tmp4.addHijo(d.get(i));
                    }
                    tmp.addHijo(tmp4);

                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp3.addHijo(c.get(i));
                    }
                    tmp.addHijo((Nodo)tmp3);                    

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_block ::= PROCEDURE error main_parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_block ::= PROCEDURE ID main_parameters IS error BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("PROCEDURE_BLOCK");
                    tmp.setNumNodo(parser.contador++);

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);

                    tmp.addHijo(tmp2);

                    if(b != null){
                        tmp.addHijo(b);
                    }

                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp3.addHijo(c.get(i));
                    }
                    tmp.addHijo((Nodo)tmp3);                    

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedure_block ::= PROCEDURE error main_parameters IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // procedure_block ::= PROCEDURE ID main_parameters IS error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("FUNCTION_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("null");

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);
                    tmp.addHijo(tmp2);

                    if(b != null){
                        tmp.addHijo(b);
                    }

                    Nodo tmp3 = new Nodo("RETURN_TYPE");
                    tmp3.setNumNodo(parser.contador++);
                    tmp3.setValor(a);
                    tmp.addHijo(tmp3);
                    
                    Nodo tmp4 = new Nodo("DECLARATIONS");
                    tmp4.setNumNodo(parser.contador++);
                    for(int i = d.size()-1; i>=0;i--){
                        tmp4.addHijo(d.get(i));
                    }
                    tmp.addHijo(tmp4);

                    Nodo tmp5 = new Nodo("CONTENT");
                    tmp5.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp5.addHijo(c.get(i));
                    }
                    tmp.addHijo(tmp5);

                    RESULT=tmp;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_block ::= FUNCTION error main_parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_block ::= FUNCTION ID main_parameters error var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("FUNCTION_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("null");

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);
                    tmp.addHijo(tmp2);

                    if(b != null){
                        tmp.addHijo(b);
                    }

                    Nodo tmp3 = new Nodo("RETURN_TYPE");
                    tmp3.setNumNodo(parser.contador++);
                    tmp3.setValor(a);
                    tmp.addHijo(tmp3);

                    Nodo tmp5 = new Nodo("CONTENT");
                    tmp5.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp5.addHijo(c.get(i));
                    }
                    tmp.addHijo(tmp5);

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_block ::= FUNCTION error main_parameters RETURN var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_block ::= FUNCTION ID main_parameters error var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // return_statement ::= RETURN TRUE PYC 
            {
              Nodo RESULT =null;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("BOOLEAN_VALUE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor("True");

                        tmp.addHijo(tmp2);
                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // return_statement ::= RETURN TRUE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // return_statement ::= RETURN FALSE PYC 
            {
              Nodo RESULT =null;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);

                        Nodo tmp2 = new Nodo("BOOLEAN_VALUE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor("False");

                        tmp.addHijo(tmp2);
                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // return_statement ::= RETURN FALSE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return_statement ::= RETURN E PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);

                        tmp.addHijo(e);

                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return_statement ::= RETURN E error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_statement ::= RETURN error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // main_parameters ::= PARIZQ parameters_specification PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo tmp = new Nodo("MAIN_PARAMETERS");
                    tmp.setNumNodo(parser.contador++);

                    for(int i = a.size()-1; i>=0;i--){
                        tmp.addHijo(a.get(i));
                        System.out.println(i+") "+a.get(i).getNombre() );
                    }

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // main_parameters ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // main_parameters ::= PARIZQ parameters_specification error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // main_parameters ::= PARIZQ error PARDER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("PARAMETERS_SPECIFICATION");
                                tmp.setNumNodo(parser.contador++);

                                Nodo tmp2 = new Nodo("ID_LIST");
                                tmp2.setNumNodo(parser.contador++);
                                for(int i = b.size()-1; i>=0;i--){
                                    tmp2.addHijo(b.get(i));
                                }
                                tmp.addHijo((Nodo)tmp2);

                                
                                Nodo tmp3 = new Nodo("PARAMETER_MODE");
                                tmp3.setNumNodo(parser.contador++);
                                tmp3.setValor(c);   
                                tmp.addHijo(tmp3);
                                
                                Nodo tmp4 = new Nodo("VARIABLE_TYPE");
                                tmp4.setNumNodo(parser.contador++);
                                tmp4.setValor(a);   
                                tmp.addHijo(tmp4);

                                d.add(tmp);

                                RESULT=d;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parameters_specification ::= ident_list error parameter_mode var_type PYC parameters_specification 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parameters_specification ::= ident_list OPDEC parameter_mode var_type 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("PARAMETERS_SPECIFICATION");
                                tmp.setNumNodo(parser.contador++);

                                Nodo tmp2 = new Nodo("ID_LIST");
                                tmp2.setNumNodo(parser.contador++);
                                for(int i = b.size()-1; i>=0;i--){
                                    tmp2.addHijo(b.get(i));
                                }
                                tmp.addHijo((Nodo)tmp2);

                                
                                Nodo tmp3 = new Nodo("PARAMETER_MODE");
                                tmp3.setNumNodo(parser.contador++);
                                tmp3.setValor(c);   
                                tmp.addHijo(tmp3);
                                
                                Nodo tmp4 = new Nodo("VARIABLE_TYPE");
                                tmp4.setNumNodo(parser.contador++);
                                tmp4.setValor(a);   
                                tmp.addHijo(tmp4);
                                
                                LinkedList list = new LinkedList<Nodo>();
                                list.add(tmp);

                                RESULT=list;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parameters_specification ::= ident_list error parameter_mode var_type 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ident_list ::= ID COMA ident_list 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Nodo tmp = new Nodo("ID");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(id);   

                b.add(tmp); 
                RESULT=b;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ident_list ::= ID 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Nodo tmp = new Nodo("ID");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(id);   

                LinkedList list = new LinkedList<Nodo>();
                list.add(tmp);
                
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ident_list ::= error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ident_list ::= error COMA ident_list 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_mode ::= IN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="In"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_mode ::= OUT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_mode ::= IN OUT 
            {
              String RESULT =null;
		 RESULT="In Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parameter_mode ::= 
            {
              String RESULT =null;
		 RESULT="null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assignment ::= ID OPASG E PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("MATHEMATICAL_EXPRESSION");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("null");
                tmp3.addHijo(e);
                tmp.addHijo(tmp3);

                RESULT=tmp;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assignment ::= ID error E PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // assignment ::= ID OPASG error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // assignment ::= ID OPASG E error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignment ::= ID OPASG STR PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("STR");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor(str.toString().replaceAll("\"",""));
                tmp.addHijo(tmp3);
                
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assignment ::= ID error STR PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // assignment ::= ID OPASG STR error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assignment ::= ID OPASG TRUE PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("BOOLEAN_VALUE");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("True");
                tmp.addHijo(tmp3);
                
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // assignment ::= ID error TRUE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // assignment ::= ID OPASG TRUE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // assignment ::= ID OPASG FALSE PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("BOOLEAN_VALUE");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("False");
                tmp.addHijo(tmp3);
                
                RESULT=tmp;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // assignment ::= ID error FALSE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // assignment ::= ID OPASG FALSE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= E OPSUM T 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("OPSUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(c);
        tmp.addHijo((Nodo)a);
        tmp.addHijo((Nodo)b);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= T 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        System.out.println("OK");
        RESULT=e;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= E OPSUM error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= error OPSUM T 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // T ::= T OPMULT F 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("OPMULT");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(c);
        tmp.addHijo((Nodo)a);
        tmp.addHijo((Nodo)b);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // T ::= F 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        System.out.println("OK");
        RESULT=e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // T ::= T OPMULT error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // T ::= error OPMULT F 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // F ::= NUM 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("NUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(e);
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // F ::= ID 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(e);
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // F ::= call_subroutine 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // F ::= PARIZQ E PARDER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        Nodo tmp = new Nodo("PARENTHESIS");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo)e);
        System.out.println("EOK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // loop_block ::= LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("LOOP_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    
                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp3.addHijo((Nodo)a.get(i));
                    }
                    tmp.addHijo(tmp3);
                    
                    System.out.println("loop_block");
                    RESULT=tmp;
			
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // loop_block ::= LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // loop_block ::= LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // loop_block ::= LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // loop_block ::= LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // while_block ::= WHILE condition LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            Nodo tmp = new Nodo("WHILE_BLOCK");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)e);
            
            Nodo tmp2 = new Nodo("CONTENT");
            tmp2.setNumNodo(parser.contador++);
            for(int i = f.size()-1; i>=0;i--){
                tmp2.addHijo(f.get(i));
            }
            tmp.addHijo((Nodo)tmp2);

            
            System.out.println("ok in while-block ");
            RESULT=tmp;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // while_block ::= WHILE condition error content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // while_block ::= WHILE condition LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // while_block ::= WHILE condition LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // while_block ::= WHILE condition LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // while_block ::= WHILE condition LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exit_cycle ::= EXIT WHEN condition PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo tmp = new Nodo("EXIT_CYCLE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exit_cycle ::= EXIT error condition PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // exit_cycle ::= EXIT WHEN condition error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
				Nodo tmp = new Nodo("FOR_BLOCK");
    			tmp.setNumNodo(parser.contador++);

				Nodo tmp3 = new Nodo("ID");
				tmp3.setValor(id);
				tmp3.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp3);
				
				Nodo tmp4 = new Nodo("NUM");
				tmp4.setValor(num1);
				tmp4.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp4);

				Nodo tmp6 = new Nodo("NUM");
				tmp6.setValor(num2);
				tmp6.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp6);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = a.size()-1; i>=0;i--){
                    tmp2.addHijo(a.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

    			System.out.println("for_block");
    			RESULT=tmp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // for_block ::= FOR error IN NUM DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // for_block ::= FOR ID error NUM DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // for_block ::= FOR ID IN error DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // for_block ::= FOR ID IN NUM error NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // for_block ::= FOR ID IN NUM DOSPUNTOS error LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM error content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // for_block ::= FOR ID IN NUM DOSPUNTOS NUM LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_block ::= FOR ID IN ID DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);
					


					Nodo tmp6 = new Nodo("NUM");
					tmp6.setValor(num2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_block ::= FOR error IN ID DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_block ::= FOR ID error ID DOSPUNTOS NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // for_block ::= FOR ID IN ID error NUM LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // for_block ::= FOR ID IN ID DOSPUNTOS error LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // for_block ::= FOR ID IN ID DOSPUNTOS NUM error content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // for_block ::= FOR ID IN ID DOSPUNTOS NUM LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // for_block ::= FOR ID IN ID DOSPUNTOS NUM LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_block ::= FOR ID IN ID DOSPUNTOS NUM LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_block ::= FOR ID IN ID DOSPUNTOS NUM LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_block ::= FOR ID IN NUM DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("NUM");
					tmp4.setValor(num1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);					

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id1);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // for_block ::= FOR error IN NUM DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // for_block ::= FOR ID error NUM DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // for_block ::= FOR ID IN error DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // for_block ::= FOR ID IN NUM error ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // for_block ::= FOR ID IN NUM DOSPUNTOS ID error content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // for_block ::= FOR ID IN NUM DOSPUNTOS ID LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // for_block ::= FOR ID IN NUM DOSPUNTOS ID LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // for_block ::= FOR ID IN NUM DOSPUNTOS ID LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // for_block ::= FOR ID IN NUM DOSPUNTOS ID LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // for_block ::= FOR ID IN ID DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);

                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }

                    tmp.addHijo((Nodo)tmp2);

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // for_block ::= FOR error IN ID DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // for_block ::= FOR ID error ID DOSPUNTOS ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // for_block ::= FOR ID IN ID error ID LOOP content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // for_block ::= FOR ID IN ID DOSPUNTOS ID error content END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // for_block ::= FOR ID IN ID DOSPUNTOS ID LOOP content error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // for_block ::= FOR ID IN ID DOSPUNTOS ID LOOP content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // for_block ::= FOR ID IN ID DOSPUNTOS ID LOOP content END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // for_block ::= FOR ID IN ID DOSPUNTOS ID LOOP error END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // if_block ::= IF condition THEN content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("IF_BLOCK");
				tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }

                tmp.addHijo((Nodo)tmp2);

                if(a != null){
                    tmp.addHijo((Nodo)a);
                }

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // if_block ::= IF condition error content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // if_block ::= IF condition THEN content elsif_block else_block error IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // if_block ::= IF condition THEN content elsif_block else_block END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // if_block ::= IF condition THEN content elsif_block else_block END IF error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // if_block ::= IF condition THEN error elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // elsif_block ::= ELSIF condition THEN content elsif_block 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSIF_BLOCK");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);
                
                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(r != null){
                    tmp.addHijo((Nodo)r);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // elsif_block ::= 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // elsif_block ::= ELSIF condition error content elsif_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // elsif_block ::= ELSIF condition THEN error elsif_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // else_block ::= ELSE content 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSE_BLOCK");
                tmp.setNumNodo(parser.contador++);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // else_block ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // else_block ::= ELSE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // condition ::= boolean_expr OR condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("OR");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);
                
                

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // condition ::= boolean_expr AND condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("AND");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // condition ::= boolean_expr 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);
                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // condition ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // condition ::= error AND condition 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // condition ::= error OR condition 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // boolean_expr ::= E OPREL E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprel_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprel_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oprel_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("OPREL");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    tmp.setValor(oprel_val.toString());
    RESULT=tmp;
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // put ::= PUT PARIZQ NUM PARDER PYC 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // put ::= PUT error NUM PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // put ::= PUT PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // put ::= PUT PARIZQ NUM error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // put ::= PUT PARIZQ STR PARDER PYC 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo tmp = new Nodo("STR");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(str.toString().replaceAll("\"",""));
        System.out.println("str in put");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // put ::= PUT error STR PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // put ::= PUT PARIZQ STR error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // put ::= PUT PARIZQ STR PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // put ::= PUT PARIZQ ID PARDER PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(id);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // put ::= PUT error ID PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // put ::= PUT PARIZQ ID error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // put ::= PUT PARIZQ ID PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // get ::= GET PARIZQ ID PARDER PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("ID");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(id);
    System.out.println("id in get");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // get ::= GET error ID PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // get ::= GET PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // get ::= GET PARIZQ ID error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // get ::= GET PARIZQ ID PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // calling_subroutine ::= call_subroutine PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // calling_subroutine ::= call_subroutine error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // call_subroutine ::= ID PARIZQ parameter_values PARDER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("Call_Subroutine");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("NULL");

                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo((Nodo)tmp2);

                        Nodo tmp3 = new Nodo("PARAMETER_VALUES");
                        tmp3.setNumNodo(parser.contador++);
                        for(int i = f.size()-1; i>=0;i--){
                            tmp3.addHijo(f.get(i));
                        }

                        tmp.addHijo(tmp3);

                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // call_subroutine ::= ID PARIZQ PARDER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                        Nodo tmp = new Nodo("Call_Subroutine");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("NULL");

                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo((Nodo)tmp2);

                        Nodo tmp3 = new Nodo("PARAMETER_VALUES");
                        tmp3.setNumNodo(parser.contador++);
                        tmp.addHijo(tmp3);

                        RESULT = tmp;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // call_subroutine ::= ID PARIZQ parameter_values error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // parameter_values ::= E COMA parameter_values 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        e.add(b);
                        RESULT=e;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // parameter_values ::= E 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(b);
                        RESULT= list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // parameter_values ::= error COMA parameter_values 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // parameter_values ::= error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
