/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\0\1\27\1\0\1\0\22\0\1\0\15\0\1\25"+
    "\1\0\12\2\1\0\1\26\5\0\1\24\1\1\1\20\1\12\1\6"+
    "\1\5\1\1\1\16\1\4\2\1\1\7\1\1\1\11\1\13\1\17"+
    "\1\1\1\14\1\10\1\23\1\21\1\1\1\15\3\1\4\0\1\22"+
    "\1\0\1\24\1\1\1\20\1\12\1\6\1\5\1\1\1\16\1\4"+
    "\2\1\1\7\1\1\1\11\1\13\1\17\1\1\1\14\1\10\1\23"+
    "\1\21\1\1\1\15\3\1\1\0\1\3\10\0\1\27\u1fa2\0\1\27"+
    "\1\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\2\7\3\1\2\1\4"+
    "\1\3\2\0\2\5\6\0\1\5\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\1\0\1\3\1\6"+
    "\1\3\1\7\3\0\1\7\1\0\1\10\1\0\1\10"+
    "\3\0\2\10\1\3\1\7\1\3\1\7\4\3\1\6"+
    "\1\11\1\0\1\11\1\0\1\12\1\0\1\11\1\12"+
    "\2\13\1\3\1\11\1\12\2\3\1\13\1\6\2\14"+
    "\2\15\1\0\1\14\1\15\1\3\1\6\1\0\1\3"+
    "\1\6\1\0\1\3\1\6\1\0\1\3\1\6\2\16"+
    "\37\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\30\0\u0138\0\u0150"+
    "\0\u0120\0\u0168\0\30\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0"+
    "\0\u01f8\0\60\0\u0210\0\u0228\0\u0240\0\u0258\0\u0270\0\u0288"+
    "\0\u02a0\0\u02b8\0\u02d0\0\u02e8\0\u0300\0\u0318\0\u0330\0\u0348"+
    "\0\u0360\0\u0378\0\u0390\0\u03a8\0\u03c0\0\30\0\u03d8\0\30"+
    "\0\u03f0\0\u0408\0\u0408\0\u0420\0\u0438\0\u03a8\0\60\0\u0450"+
    "\0\u03c0\0\u0468\0\60\0\u0480\0\u0498\0\u04b0\0\u04c8\0\u04e0"+
    "\0\u04f8\0\u0510\0\30\0\u0528\0\30\0\u0540\0\u0510\0\u0540"+
    "\0\30\0\u0540\0\u0558\0\60\0\60\0\u0570\0\u0588\0\60"+
    "\0\u05a0\0\u05b8\0\30\0\u05b8\0\30\0\u05b8\0\60\0\60"+
    "\0\u05d0\0\u05e8\0\u0600\0\u0618\0\u0630\0\u0648\0\u0660\0\u0678"+
    "\0\u0690\0\u06a8\0\u06c0\0\30\0\60\0\u06d8\0\u06f0\0\u0708"+
    "\0\u0720\0\u0738\0\u0750\0\u0768\0\u0780\0\u0798\0\u07b0\0\u07c8"+
    "\0\u07e0\0\u07f8\0\u0810\0\u0828\0\u0840\0\u0858\0\u0870\0\u0888"+
    "\0\u08a0\0\u08b8\0\u08d0\0\u08e8\0\u0900\0\u0918\0\u0930\0\u0948"+
    "\0\u0960\0\u0978\0\u0990\0\30";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\5\3\1\12\1\3\1\13\2\3\1\2\1\14\1\3"+
    "\1\15\1\16\32\0\1\3\1\17\1\0\16\3\1\20"+
    "\2\3\5\0\1\4\22\0\1\21\5\0\1\22\1\0"+
    "\1\23\1\0\1\24\1\0\1\25\1\0\1\26\1\27"+
    "\1\0\1\30\5\0\1\31\4\0\1\3\1\17\1\23"+
    "\1\3\1\32\14\3\1\20\2\3\4\0\1\3\1\17"+
    "\1\33\7\3\1\34\6\3\1\20\1\3\1\35\4\0"+
    "\1\3\1\17\1\36\3\3\1\37\1\3\1\40\10\3"+
    "\1\20\2\3\4\0\1\3\1\17\1\41\7\3\1\42"+
    "\6\3\1\20\2\3\4\0\1\3\1\17\1\30\12\3"+
    "\1\43\3\3\1\20\2\3\4\0\1\3\1\17\1\44"+
    "\10\3\1\45\5\3\1\20\2\3\4\0\1\3\1\17"+
    "\1\46\10\3\1\47\5\3\1\20\2\3\5\0\1\50"+
    "\26\0\2\17\1\0\16\17\1\0\2\17\4\0\2\51"+
    "\1\0\16\51\1\0\2\51\6\0\1\52\1\53\2\0"+
    "\1\54\1\55\1\0\1\56\1\57\1\60\4\0\1\61"+
    "\11\0\1\55\4\0\1\55\22\0\1\56\6\0\1\56"+
    "\20\0\1\62\7\0\1\63\1\60\16\0\1\64\7\0"+
    "\1\65\5\0\1\61\11\0\2\53\26\0\1\54\3\0"+
    "\1\54\23\0\1\66\3\0\1\54\4\0\1\60\14\0"+
    "\1\3\1\17\1\60\10\3\1\67\5\3\1\20\2\3"+
    "\4\0\1\3\1\17\1\54\3\3\1\70\12\3\1\20"+
    "\2\3\6\0\1\71\4\0\1\55\1\0\1\56\16\0"+
    "\1\3\1\17\1\55\4\3\1\72\11\3\1\20\2\3"+
    "\4\0\1\3\1\17\1\56\6\3\1\73\7\3\1\20"+
    "\2\3\6\0\1\63\7\0\1\63\15\0\1\3\1\17"+
    "\1\63\7\3\1\74\6\3\1\20\2\3\4\0\1\3"+
    "\1\17\1\53\1\75\15\3\1\20\2\3\6\0\1\65"+
    "\7\0\1\65\15\0\1\3\1\17\1\65\7\3\1\76"+
    "\6\3\1\20\2\3\6\0\1\61\15\0\1\61\7\0"+
    "\1\3\1\17\1\61\15\3\1\77\1\20\2\3\5\0"+
    "\1\100\26\0\2\51\1\0\16\51\1\20\2\51\6\0"+
    "\1\101\1\102\1\0\1\103\1\104\1\61\6\0\1\105"+
    "\1\106\12\0\1\104\3\0\1\104\23\0\1\61\4\0"+
    "\1\61\22\0\1\107\1\102\1\0\1\103\24\0\1\110"+
    "\13\0\1\105\1\106\12\0\1\111\2\0\1\111\24\0"+
    "\1\105\13\0\1\105\13\0\1\112\2\0\1\111\11\0"+
    "\1\106\12\0\1\106\14\0\1\106\10\0\1\3\1\17"+
    "\1\61\4\3\1\77\11\3\1\20\2\3\4\0\1\3"+
    "\1\17\1\107\1\113\1\3\1\114\13\3\1\20\2\3"+
    "\4\0\1\3\1\17\1\105\13\3\1\115\2\3\1\20"+
    "\2\3\4\0\1\3\1\17\1\104\3\3\1\116\12\3"+
    "\1\20\2\3\4\0\1\3\1\17\1\106\14\3\1\117"+
    "\1\3\1\20\2\3\4\0\1\3\1\17\1\111\2\3"+
    "\1\120\13\3\1\20\2\3\5\0\1\121\30\0\1\122"+
    "\1\0\1\123\1\124\24\0\1\123\1\0\1\123\25\0"+
    "\1\125\2\0\1\125\24\0\1\126\2\0\1\126\22\0"+
    "\1\3\1\17\1\123\1\3\1\127\14\3\1\20\2\3"+
    "\4\0\1\3\1\17\1\125\2\3\1\130\13\3\1\20"+
    "\2\3\4\0\1\3\1\17\1\126\2\3\1\131\13\3"+
    "\1\20\2\3\5\0\1\132\30\0\1\133\6\0\1\133"+
    "\16\0\1\3\1\17\1\133\6\3\1\134\7\3\1\20"+
    "\2\3\5\0\1\135\30\0\1\136\15\0\1\136\7\0"+
    "\1\3\1\17\1\136\15\3\1\137\1\20\2\3\5\0"+
    "\1\140\30\0\1\141\10\0\1\141\14\0\1\3\1\17"+
    "\1\141\10\3\1\142\5\3\1\20\2\3\5\0\1\143"+
    "\30\0\1\144\2\0\1\144\22\0\1\3\1\17\1\144"+
    "\2\3\1\145\13\3\1\20\2\3\5\0\1\146\27\0"+
    "\1\147\27\0\1\150\27\0\1\151\27\0\1\152\27\0"+
    "\1\153\27\0\1\154\27\0\1\155\27\0\1\156\27\0"+
    "\1\157\27\0\1\160\27\0\1\161\27\0\1\162\27\0"+
    "\1\163\27\0\1\164\27\0\1\165\27\0\1\166\27\0"+
    "\1\167\27\0\1\170\27\0\1\171\27\0\1\172\27\0"+
    "\1\173\27\0\1\174\27\0\1\175\27\0\1\176\27\0"+
    "\1\177\27\0\1\200\27\0\1\201\27\0\1\202\27\0"+
    "\1\203\27\0\1\204\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2472];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\1\1\2\0\1\1\1\11"+
    "\6\0\1\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\3\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\0\14\1\1\0\1\11\1\0\1\11"+
    "\1\0\2\1\1\11\11\1\1\11\1\1\1\11\1\0"+
    "\4\1\1\0\2\1\1\0\2\1\1\0\2\1\1\11"+
    "\37\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("<integerValue> "+yytext());
            } 
            // fall through
          case 15: break;
          case 2: 
            { 
            } 
            // fall through
          case 16: break;
          case 3: 
            { System.out.println("<id> "+yytext());
            } 
            // fall through
          case 17: break;
          case 4: 
            { System.out.println("<puntoycoma> "+yytext());
            } 
            // fall through
          case 18: break;
          case 5: 
            { System.out.println("<IF> "+yytext());
            } 
            // fall through
          case 19: break;
          case 6: 
            { System.out.println("<floatValues> "+yytext());
            } 
            // fall through
          case 20: break;
          case 7: 
            { System.out.println("<END> "+yytext());
            } 
            // fall through
          case 21: break;
          case 8: 
            { System.out.println("<FOR> "+yytext());
            } 
            // fall through
          case 22: break;
          case 9: 
            { System.out.println("<ELSE> "+yytext());
            } 
            // fall through
          case 23: break;
          case 10: 
            { System.out.println("<loop> "+yytext());
            } 
            // fall through
          case 24: break;
          case 11: 
            { System.out.println("<booleanValue> "+yytext());
            } 
            // fall through
          case 25: break;
          case 12: 
            { System.out.println("<ELSIF> "+yytext());
            } 
            // fall through
          case 26: break;
          case 13: 
            { System.out.println("<WHILE> "+yytext());
            } 
            // fall through
          case 27: break;
          case 14: 
            { System.out.println("<procedure> "+yytext());
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
