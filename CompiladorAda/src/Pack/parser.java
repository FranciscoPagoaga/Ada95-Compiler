
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pack;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\311\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\011" +
    "\000\002\002\007\000\002\002\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\007\005\000\002\007\005\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\006\010\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\012\014\000" +
    "\002\012\014\000\002\012\014\000\002\012\014\000\002" +
    "\012\014\000\002\012\014\000\002\011\016\000\002\011" +
    "\016\000\002\011\016\000\002\011\016\000\002\011\016" +
    "\000\002\011\016\000\002\011\016\000\002\045\002\000" +
    "\002\013\006\000\002\013\002\000\002\013\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\015" +
    "\010\000\002\015\010\000\002\015\006\000\002\015\006" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\002\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\040\005\000\002\040\003" +
    "\000\002\041\005\000\002\041\003\000\002\042\003\000" +
    "\002\042\005\000\002\020\010\000\002\020\010\000\002" +
    "\020\010\000\002\022\012\000\002\022\012\000\002\022" +
    "\012\000\002\022\012\000\002\022\012\000\002\023\006" +
    "\000\002\023\002\000\002\023\006\000\002\023\006\000" +
    "\002\021\015\000\002\021\015\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\021" +
    "\015\000\002\021\015\000\002\021\015\000\002\021\015" +
    "\000\002\021\015\000\002\021\015\000\002\021\015\000" +
    "\002\021\015\000\002\021\015\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\021" +
    "\015\000\002\021\015\000\002\021\015\000\002\021\015" +
    "\000\002\021\015\000\002\021\015\000\002\021\015\000" +
    "\002\021\015\000\002\021\015\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\024" +
    "\013\000\002\024\013\000\002\024\013\000\002\024\013" +
    "\000\002\024\013\000\002\025\007\000\002\025\002\000" +
    "\002\025\007\000\002\026\004\000\002\026\002\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\034\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\036\007\000" +
    "\002\036\007\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\007\000\002\037\007\000\002\037\007" +
    "\000\002\037\007\000\002\037\007\000\002\037\007\000" +
    "\002\027\004\000\002\027\004\000\002\030\006\000\002" +
    "\030\006\000\002\031\005\000\002\031\003\000\002\031" +
    "\005\000\002\031\003\000\002\031\005\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023e\000\010\003\005\004\004\005\007\001\002\000" +
    "\006\003\u0238\051\u0237\001\002\000\004\051\u0233\001\002" +
    "\000\004\002\u0232\001\002\000\006\003\011\051\010\001" +
    "\002\000\012\003\uffb6\006\uffb6\040\013\041\012\001\002" +
    "\000\010\007\uffb6\040\013\041\012\001\002\000\006\003" +
    "\u01ab\051\u01aa\001\002\000\006\003\u01ab\051\u01aa\001\002" +
    "\000\004\007\015\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\014\003\uffe6\004\022" +
    "\005\027\010\uffe6\051\025\001\002\000\014\003\uffe8\004" +
    "\022\005\027\010\uffe8\051\025\001\002\000\014\003\uffea" +
    "\004\022\005\027\010\uffea\051\025\001\002\000\004\002" +
    "\ufffb\001\002\000\006\003\u0204\051\u0203\001\002\000\006" +
    "\003\u01f3\010\u01f4\001\002\000\014\003\uffee\004\022\005" +
    "\027\010\uffee\051\025\001\002\000\010\003\u01e9\037\u01ea" +
    "\044\u01e8\001\002\000\020\012\043\016\036\017\033\020" +
    "\040\046\035\047\050\051\046\001\002\000\006\003\u0198" +
    "\051\u0197\001\002\000\020\012\043\016\036\017\033\020" +
    "\040\046\035\047\050\051\046\001\002\000\014\003\uffec" +
    "\004\022\005\027\010\uffec\051\025\001\002\000\006\003" +
    "\uffed\010\uffed\001\002\000\010\003\202\050\177\051\176" +
    "\001\002\000\032\003\uffd4\011\uffd4\012\043\014\uffd4\015" +
    "\uffd4\016\036\017\033\020\040\021\uffd4\046\035\047\050" +
    "\051\046\001\002\000\006\003\u016c\040\u016d\001\002\000" +
    "\006\003\277\051\276\001\002\000\032\003\uffc8\011\uffc8" +
    "\012\043\014\uffc8\015\uffc8\016\036\017\033\020\040\021" +
    "\uffc8\046\035\047\050\051\046\001\002\000\020\012\043" +
    "\016\036\017\033\020\040\046\035\047\050\051\046\001" +
    "\002\000\032\003\uffc6\011\uffc6\012\043\014\uffc6\015\uffc6" +
    "\016\036\017\033\020\040\021\uffc6\046\035\047\050\051" +
    "\046\001\002\000\032\003\uffce\011\uffce\012\043\014\uffce" +
    "\015\uffce\016\036\017\033\020\040\021\uffce\046\035\047" +
    "\050\051\046\001\002\000\010\003\202\050\177\051\176" +
    "\001\002\000\006\003\165\011\166\001\002\000\032\003" +
    "\uffca\011\uffca\012\043\014\uffca\015\uffca\016\036\017\033" +
    "\020\040\021\uffca\046\035\047\050\051\046\001\002\000" +
    "\010\003\100\036\077\040\101\001\002\000\032\003\uffcc" +
    "\011\uffcc\012\043\014\uffcc\015\uffcc\016\036\017\033\020" +
    "\040\021\uffcc\046\035\047\050\051\046\001\002\000\006" +
    "\003\060\040\061\001\002\000\006\003\056\042\057\001" +
    "\002\000\032\003\uffd0\011\uffd0\012\043\014\uffd0\015\uffd0" +
    "\016\036\017\033\020\040\021\uffd0\046\035\047\050\051" +
    "\046\001\002\000\032\003\uffd2\011\uffd2\012\043\014\uffd2" +
    "\015\uffd2\016\036\017\033\020\040\021\uffd2\046\035\047" +
    "\050\051\046\001\002\000\014\003\uffd3\011\uffd3\014\uffd3" +
    "\015\uffd3\021\uffd3\001\002\000\014\003\uffd1\011\uffd1\014" +
    "\uffd1\015\uffd1\021\uffd1\001\002\000\032\003\uff41\011\uff41" +
    "\012\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021" +
    "\uff41\046\uff41\047\uff41\051\uff41\001\002\000\032\003\uff42" +
    "\011\uff42\012\uff42\014\uff42\015\uff42\016\uff42\017\uff42\020" +
    "\uff42\021\uff42\046\uff42\047\uff42\051\uff42\001\002\000\004" +
    "\051\073\001\002\000\006\003\063\051\062\001\002\000" +
    "\006\003\066\041\067\001\002\000\004\041\064\001\002" +
    "\000\004\042\065\001\002\000\032\003\uff45\011\uff45\012" +
    "\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45" +
    "\046\uff45\047\uff45\051\uff45\001\002\000\004\042\072\001" +
    "\002\000\006\003\070\042\071\001\002\000\032\003\uff43" +
    "\011\uff43\012\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020" +
    "\uff43\021\uff43\046\uff43\047\uff43\051\uff43\001\002\000\032" +
    "\003\uff47\011\uff47\012\uff47\014\uff47\015\uff47\016\uff47\017" +
    "\uff47\020\uff47\021\uff47\046\uff47\047\uff47\051\uff47\001\002" +
    "\000\032\003\uff44\011\uff44\012\uff44\014\uff44\015\uff44\016" +
    "\uff44\017\uff44\020\uff44\021\uff44\046\uff44\047\uff44\051\uff44" +
    "\001\002\000\004\041\074\001\002\000\004\042\075\001" +
    "\002\000\032\003\uff46\011\uff46\012\uff46\014\uff46\015\uff46" +
    "\016\uff46\017\uff46\020\uff46\021\uff46\046\uff46\047\uff46\051" +
    "\uff46\001\002\000\014\003\uffcd\011\uffcd\014\uffcd\015\uffcd" +
    "\021\uffcd\001\002\000\020\003\146\025\144\026\145\040" +
    "\122\050\116\051\124\052\143\001\002\000\016\025\120" +
    "\026\123\040\122\050\116\051\124\052\117\001\002\000" +
    "\010\003\105\050\102\051\103\001\002\000\010\003\uff39" +
    "\041\uff39\044\114\001\002\000\010\003\uff3d\041\uff3d\044" +
    "\112\001\002\000\006\003\111\041\110\001\002\000\010" +
    "\003\uff3b\041\uff3b\044\106\001\002\000\010\003\105\050" +
    "\102\051\103\001\002\000\006\003\uff3c\041\uff3c\001\002" +
    "\000\020\003\uff40\013\uff40\020\uff40\023\uff40\024\uff40\042" +
    "\uff40\043\uff40\001\002\000\020\003\uff3f\013\uff3f\020\uff3f" +
    "\023\uff3f\024\uff3f\042\uff3f\043\uff3f\001\002\000\010\003" +
    "\105\050\102\051\103\001\002\000\006\003\uff3e\041\uff3e" +
    "\001\002\000\010\003\105\050\102\051\103\001\002\000" +
    "\006\003\uff3a\041\uff3a\001\002\000\014\003\uff91\034\uff91" +
    "\035\uff91\041\uff91\042\uff91\001\002\000\004\042\142\001" +
    "\002\000\004\042\141\001\002\000\014\003\uff94\034\uff94" +
    "\035\133\041\uff94\042\uff94\001\002\000\006\040\122\050" +
    "\116\001\002\000\004\042\136\001\002\000\004\040\101" +
    "\001\002\000\004\042\135\001\002\000\014\003\uff92\034" +
    "\uff92\035\uff92\041\uff92\042\uff92\001\002\000\006\034\130" +
    "\042\131\001\002\000\006\040\122\050\116\001\002\000" +
    "\032\003\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\046\uffa4\047\uffa4\051\uffa4\001" +
    "\002\000\014\003\uff95\034\uff95\035\133\041\uff95\042\uff95" +
    "\001\002\000\006\040\122\050\116\001\002\000\014\003" +
    "\uff93\034\uff93\035\uff93\041\uff93\042\uff93\001\002\000\032" +
    "\003\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\046\uffa0\047\uffa0\051\uffa0\001\002" +
    "\000\032\003\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\046\uff97\047\uff97\051\uff97" +
    "\001\002\000\006\034\130\041\140\001\002\000\014\003" +
    "\uff90\034\uff90\035\uff90\041\uff90\042\uff90\001\002\000\032" +
    "\003\uff9a\011\uff9a\012\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\046\uff9a\047\uff9a\051\uff9a\001\002" +
    "\000\032\003\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\001\002\000\006\003\162\042\163\001\002\000\006\003" +
    "\160\042\161\001\002\000\006\003\156\042\157\001\002" +
    "\000\004\042\155\001\002\000\006\003\153\042\154\001" +
    "\002\000\010\003\151\034\130\042\152\001\002\000\032" +
    "\003\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\046\uffa2\047\uffa2\051\uffa2\001\002" +
    "\000\032\003\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\046\uffa5\047\uffa5\051\uffa5" +
    "\001\002\000\032\003\uff9f\011\uff9f\012\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\046\uff9f\047\uff9f" +
    "\051\uff9f\001\002\000\032\003\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\046\uffa1" +
    "\047\uffa1\051\uffa1\001\002\000\032\003\uffa3\011\uffa3\012" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\046\uffa3\047\uffa3\051\uffa3\001\002\000\032\003\uff96\011" +
    "\uff96\012\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\046\uff96\047\uff96\051\uff96\001\002\000\032\003" +
    "\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\046\uff98\047\uff98\051\uff98\001\002\000" +
    "\032\003\uff99\011\uff99\012\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\046\uff99\047\uff99\051\uff99\001" +
    "\002\000\032\003\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\046\uff9b\047\uff9b\051" +
    "\uff9b\001\002\000\032\003\uff9c\011\uff9c\012\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\046\uff9c\047" +
    "\uff9c\051\uff9c\001\002\000\032\003\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\046" +
    "\uff9e\047\uff9e\051\uff9e\001\002\000\014\003\uffcb\011\uffcb" +
    "\014\uffcb\015\uffcb\021\uffcb\001\002\000\004\051\174\001" +
    "\002\000\006\003\170\051\167\001\002\000\006\003\172" +
    "\042\173\001\002\000\004\042\171\001\002\000\004\002" +
    "\ufff1\001\002\000\004\002\ufff0\001\002\000\004\002\ufff4" +
    "\001\002\000\004\042\175\001\002\000\004\002\ufff2\001" +
    "\002\000\022\003\uff54\013\uff54\020\uff54\023\uff54\024\uff54" +
    "\040\101\042\uff54\043\uff54\001\002\000\020\003\uff53\013" +
    "\uff53\020\uff53\023\uff53\024\uff53\042\uff53\043\uff53\001\002" +
    "\000\016\003\uff57\013\uff57\020\uff57\023\246\024\247\042" +
    "\uff57\001\002\000\004\043\243\001\002\000\014\003\uff56" +
    "\013\uff56\020\uff56\042\uff56\043\uff51\001\002\000\020\003" +
    "\uff52\013\uff52\020\uff52\023\uff52\024\uff52\042\uff52\043\uff52" +
    "\001\002\000\006\003\205\013\206\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\012\003\uff5d\011\uff5d" +
    "\014\uff5d\015\211\001\002\000\010\003\uff5a\011\uff5a\014" +
    "\222\001\002\000\010\003\202\050\177\051\176\001\002" +
    "\000\006\003\213\013\214\001\002\000\020\012\043\016" +
    "\036\017\033\020\040\046\035\047\050\051\046\001\002" +
    "\000\020\012\043\016\036\017\033\020\040\046\035\047" +
    "\050\051\046\001\002\000\012\003\uff5d\011\uff5d\014\uff5d" +
    "\015\211\001\002\000\010\003\uff5e\011\uff5e\014\uff5e\001" +
    "\002\000\012\003\uff5d\011\uff5d\014\uff5d\015\211\001\002" +
    "\000\010\003\uff5c\011\uff5c\014\uff5c\001\002\000\006\003" +
    "\224\011\225\001\002\000\020\012\043\016\036\017\033" +
    "\020\040\046\035\047\050\051\046\001\002\000\006\003" +
    "\uff5b\011\uff5b\001\002\000\004\012\233\001\002\000\006" +
    "\003\226\012\227\001\002\000\004\042\232\001\002\000" +
    "\006\003\230\042\231\001\002\000\032\003\uff5f\011\uff5f" +
    "\012\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021" +
    "\uff5f\046\uff5f\047\uff5f\051\uff5f\001\002\000\032\003\uff63" +
    "\011\uff63\012\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020" +
    "\uff63\021\uff63\046\uff63\047\uff63\051\uff63\001\002\000\032" +
    "\003\uff60\011\uff60\012\uff60\014\uff60\015\uff60\016\uff60\017" +
    "\uff60\020\uff60\021\uff60\046\uff60\047\uff60\051\uff60\001\002" +
    "\000\004\042\234\001\002\000\032\003\uff61\011\uff61\012" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\046\uff61\047\uff61\051\uff61\001\002\000\010\011\uff5d\014" +
    "\uff5d\015\211\001\002\000\006\011\uff5a\014\222\001\002" +
    "\000\004\011\240\001\002\000\004\012\241\001\002\000" +
    "\004\042\242\001\002\000\032\003\uff62\011\uff62\012\uff62" +
    "\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62\046" +
    "\uff62\047\uff62\051\uff62\001\002\000\010\003\245\050\177" +
    "\051\176\001\002\000\016\003\uff55\013\uff55\020\uff55\023" +
    "\uff55\024\uff55\042\uff55\001\002\000\016\003\uff51\013\uff51" +
    "\020\uff51\023\uff51\024\uff51\042\uff51\001\002\000\010\003" +
    "\202\050\177\051\176\001\002\000\010\003\202\050\177" +
    "\051\176\001\002\000\012\003\uff59\013\uff59\020\uff59\042" +
    "\uff59\001\002\000\012\003\uff58\013\uff58\020\uff58\042\uff58" +
    "\001\002\000\014\003\uffcf\011\uffcf\014\uffcf\015\uffcf\021" +
    "\uffcf\001\002\000\014\003\uffc7\011\uffc7\014\uffc7\015\uffc7" +
    "\021\uffc7\001\002\000\010\003\uff86\011\uff86\021\256\001" +
    "\002\000\006\003\266\011\267\001\002\000\006\003\257" +
    "\022\260\001\002\000\010\003\202\050\177\051\176\001" +
    "\002\000\010\003\202\050\177\051\176\001\002\000\006" +
    "\003\262\042\263\001\002\000\006\003\uff84\011\uff84\001" +
    "\002\000\006\003\uff87\011\uff87\001\002\000\004\042\265" +
    "\001\002\000\006\003\uff85\011\uff85\001\002\000\004\020" +
    "\273\001\002\000\004\020\270\001\002\000\006\003\271" +
    "\042\272\001\002\000\032\003\uff8d\011\uff8d\012\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\046\uff8d" +
    "\047\uff8d\051\uff8d\001\002\000\032\003\uff8f\011\uff8f\012" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\046\uff8f\047\uff8f\051\uff8f\001\002\000\004\042\274\001" +
    "\002\000\032\003\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\046\uff8e\047\uff8e\051" +
    "\uff8e\001\002\000\014\003\uffc9\011\uffc9\014\uffc9\015\uffc9" +
    "\021\uffc9\001\002\000\010\003\342\050\340\051\341\001" +
    "\002\000\006\050\300\051\301\001\002\000\004\045\321" +
    "\001\002\000\004\045\302\001\002\000\006\050\304\051" +
    "\303\001\002\000\004\020\313\001\002\000\004\020\305" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\006\011\uff86\021\256" +
    "\001\002\000\004\011\310\001\002\000\004\020\311\001" +
    "\002\000\004\042\312\001\002\000\032\003\uff79\011\uff79" +
    "\012\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021" +
    "\uff79\046\uff79\047\uff79\051\uff79\001\002\000\020\012\043" +
    "\016\036\017\033\020\040\046\035\047\050\051\046\001" +
    "\002\000\006\011\uff86\021\256\001\002\000\004\011\316" +
    "\001\002\000\004\020\317\001\002\000\004\042\320\001" +
    "\002\000\032\003\uff69\011\uff69\012\uff69\014\uff69\015\uff69" +
    "\016\uff69\017\uff69\020\uff69\021\uff69\046\uff69\047\uff69\051" +
    "\uff69\001\002\000\006\050\322\051\323\001\002\000\004" +
    "\020\332\001\002\000\004\020\324\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\006\011\uff86\021\256\001\002\000\004\011" +
    "\327\001\002\000\004\020\330\001\002\000\004\042\331" +
    "\001\002\000\032\003\uff71\011\uff71\012\uff71\014\uff71\015" +
    "\uff71\016\uff71\017\uff71\020\uff71\021\uff71\046\uff71\047\uff71" +
    "\051\uff71\001\002\000\020\012\043\016\036\017\033\020" +
    "\040\046\035\047\050\051\046\001\002\000\006\011\uff86" +
    "\021\256\001\002\000\004\011\335\001\002\000\004\020" +
    "\336\001\002\000\004\042\337\001\002\000\032\003\uff82" +
    "\011\uff82\012\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020" +
    "\uff82\021\uff82\046\uff82\047\uff82\051\uff82\001\002\000\006" +
    "\003\u012f\045\u0130\001\002\000\006\003\362\045\363\001" +
    "\002\000\004\045\343\001\002\000\006\050\345\051\344" +
    "\001\002\000\004\020\354\001\002\000\004\020\346\001" +
    "\002\000\020\012\043\016\036\017\033\020\040\046\035" +
    "\047\050\051\046\001\002\000\006\011\uff86\021\256\001" +
    "\002\000\004\011\351\001\002\000\004\020\352\001\002" +
    "\000\004\042\353\001\002\000\032\003\uff81\011\uff81\012" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\046\uff81\047\uff81\051\uff81\001\002\000\020\012\043\016" +
    "\036\017\033\020\040\046\035\047\050\051\046\001\002" +
    "\000\006\011\uff86\021\256\001\002\000\004\011\357\001" +
    "\002\000\004\020\360\001\002\000\004\042\361\001\002" +
    "\000\032\003\uff70\011\uff70\012\uff70\014\uff70\015\uff70\016" +
    "\uff70\017\uff70\020\uff70\021\uff70\046\uff70\047\uff70\051\uff70" +
    "\001\002\000\006\050\u0122\051\u0121\001\002\000\010\003" +
    "\366\050\365\051\364\001\002\000\006\003\u010f\020\u0110" +
    "\001\002\000\006\003\375\020\376\001\002\000\004\020" +
    "\367\001\002\000\020\012\043\016\036\017\033\020\040" +
    "\046\035\047\050\051\046\001\002\000\006\011\uff86\021" +
    "\256\001\002\000\004\011\372\001\002\000\004\020\373" +
    "\001\002\000\004\042\374\001\002\000\032\003\uff77\011" +
    "\uff77\012\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77" +
    "\021\uff77\046\uff77\047\uff77\051\uff77\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\010\003\uff86\011\uff86" +
    "\021\256\001\002\000\006\003\u0101\011\u0102\001\002\000" +
    "\004\020\u0108\001\002\000\006\003\u0103\020\u0104\001\002" +
    "\000\004\042\u0107\001\002\000\006\003\u0105\042\u0106\001" +
    "\002\000\032\003\uff73\011\uff73\012\uff73\014\uff73\015\uff73" +
    "\016\uff73\017\uff73\020\uff73\021\uff73\046\uff73\047\uff73\051" +
    "\uff73\001\002\000\032\003\uff7a\011\uff7a\012\uff7a\014\uff7a" +
    "\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\046\uff7a\047" +
    "\uff7a\051\uff7a\001\002\000\032\003\uff74\011\uff74\012\uff74" +
    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\046" +
    "\uff74\047\uff74\051\uff74\001\002\000\004\042\u0109\001\002" +
    "\000\032\003\uff75\011\uff75\012\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\046\uff75\047\uff75\051\uff75" +
    "\001\002\000\006\011\uff86\021\256\001\002\000\004\011" +
    "\u010c\001\002\000\004\020\u010d\001\002\000\004\042\u010e" +
    "\001\002\000\032\003\uff76\011\uff76\012\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\020\uff76\021\uff76\046\uff76\047\uff76" +
    "\051\uff76\001\002\000\020\012\043\016\036\017\033\020" +
    "\040\046\035\047\050\051\046\001\002\000\020\012\043" +
    "\016\036\017\033\020\040\046\035\047\050\051\046\001" +
    "\002\000\010\003\uff86\011\uff86\021\256\001\002\000\006" +
    "\003\u0113\011\u0114\001\002\000\004\020\u011a\001\002\000" +
    "\006\003\u0115\020\u0116\001\002\000\004\042\u0119\001\002" +
    "\000\006\003\u0117\042\u0118\001\002\000\032\003\uff64\011" +
    "\uff64\012\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020\uff64" +
    "\021\uff64\046\uff64\047\uff64\051\uff64\001\002\000\032\003" +
    "\uff6a\011\uff6a\012\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\021\uff6a\046\uff6a\047\uff6a\051\uff6a\001\002\000" +
    "\032\003\uff65\011\uff65\012\uff65\014\uff65\015\uff65\016\uff65" +
    "\017\uff65\020\uff65\021\uff65\046\uff65\047\uff65\051\uff65\001" +
    "\002\000\004\042\u011b\001\002\000\032\003\uff66\011\uff66" +
    "\012\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021" +
    "\uff66\046\uff66\047\uff66\051\uff66\001\002\000\006\011\uff86" +
    "\021\256\001\002\000\004\011\u011e\001\002\000\004\020" +
    "\u011f\001\002\000\004\042\u0120\001\002\000\032\003\uff67" +
    "\011\uff67\012\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020" +
    "\uff67\021\uff67\046\uff67\047\uff67\051\uff67\001\002\000\004" +
    "\020\u0129\001\002\000\004\020\u0123\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\006\011\uff86\021\256\001\002\000\004\011" +
    "\u0126\001\002\000\004\020\u0127\001\002\000\004\042\u0128" +
    "\001\002\000\032\003\uff78\011\uff78\012\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\046\uff78\047\uff78" +
    "\051\uff78\001\002\000\020\012\043\016\036\017\033\020" +
    "\040\046\035\047\050\051\046\001\002\000\006\011\uff86" +
    "\021\256\001\002\000\004\011\u012c\001\002\000\004\020" +
    "\u012d\001\002\000\004\042\u012e\001\002\000\032\003\uff68" +
    "\011\uff68\012\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020" +
    "\uff68\021\uff68\046\uff68\047\uff68\051\uff68\001\002\000\006" +
    "\050\u015e\051\u015f\001\002\000\010\003\u0133\050\u0131\051" +
    "\u0132\001\002\000\006\003\u014c\020\u014d\001\002\000\006" +
    "\003\u013a\020\u013b\001\002\000\004\020\u0134\001\002\000" +
    "\020\012\043\016\036\017\033\020\040\046\035\047\050" +
    "\051\046\001\002\000\006\011\uff86\021\256\001\002\000" +
    "\004\011\u0137\001\002\000\004\020\u0138\001\002\000\004" +
    "\042\u0139\001\002\000\032\003\uff7f\011\uff7f\012\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\046\uff7f" +
    "\047\uff7f\051\uff7f\001\002\000\020\012\043\016\036\017" +
    "\033\020\040\046\035\047\050\051\046\001\002\000\020" +
    "\012\043\016\036\017\033\020\040\046\035\047\050\051" +
    "\046\001\002\000\010\003\uff86\011\uff86\021\256\001\002" +
    "\000\006\003\u013e\011\u013f\001\002\000\004\020\u0145\001" +
    "\002\000\006\003\u0140\020\u0141\001\002\000\004\042\u0144" +
    "\001\002\000\006\003\u0142\042\u0143\001\002\000\032\003" +
    "\uff6b\011\uff6b\012\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b" +
    "\020\uff6b\021\uff6b\046\uff6b\047\uff6b\051\uff6b\001\002\000" +
    "\032\003\uff72\011\uff72\012\uff72\014\uff72\015\uff72\016\uff72" +
    "\017\uff72\020\uff72\021\uff72\046\uff72\047\uff72\051\uff72\001" +
    "\002\000\032\003\uff6c\011\uff6c\012\uff6c\014\uff6c\015\uff6c" +
    "\016\uff6c\017\uff6c\020\uff6c\021\uff6c\046\uff6c\047\uff6c\051" +
    "\uff6c\001\002\000\004\042\u0146\001\002\000\032\003\uff6d" +
    "\011\uff6d\012\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020" +
    "\uff6d\021\uff6d\046\uff6d\047\uff6d\051\uff6d\001\002\000\006" +
    "\011\uff86\021\256\001\002\000\004\011\u0149\001\002\000" +
    "\004\020\u014a\001\002\000\004\042\u014b\001\002\000\032" +
    "\003\uff6e\011\uff6e\012\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\046\uff6e\047\uff6e\051\uff6e\001\002" +
    "\000\020\012\043\016\036\017\033\020\040\046\035\047" +
    "\050\051\046\001\002\000\020\012\043\016\036\017\033" +
    "\020\040\046\035\047\050\051\046\001\002\000\010\003" +
    "\uff86\011\uff86\021\256\001\002\000\006\003\u0150\011\u0151" +
    "\001\002\000\004\020\u0157\001\002\000\006\003\u0152\020" +
    "\u0153\001\002\000\004\042\u0156\001\002\000\006\003\u0154" +
    "\042\u0155\001\002\000\032\003\uff7b\011\uff7b\012\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\046\uff7b" +
    "\047\uff7b\051\uff7b\001\002\000\032\003\uff83\011\uff83\012" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\046\uff83\047\uff83\051\uff83\001\002\000\032\003\uff7c\011" +
    "\uff7c\012\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c" +
    "\021\uff7c\046\uff7c\047\uff7c\051\uff7c\001\002\000\004\042" +
    "\u0158\001\002\000\032\003\uff7d\011\uff7d\012\uff7d\014\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\046\uff7d\047" +
    "\uff7d\051\uff7d\001\002\000\006\011\uff86\021\256\001\002" +
    "\000\004\011\u015b\001\002\000\004\020\u015c\001\002\000" +
    "\004\042\u015d\001\002\000\032\003\uff7e\011\uff7e\012\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\046" +
    "\uff7e\047\uff7e\051\uff7e\001\002\000\004\020\u0166\001\002" +
    "\000\004\020\u0160\001\002\000\020\012\043\016\036\017" +
    "\033\020\040\046\035\047\050\051\046\001\002\000\006" +
    "\011\uff86\021\256\001\002\000\004\011\u0163\001\002\000" +
    "\004\020\u0164\001\002\000\004\042\u0165\001\002\000\032" +
    "\003\uff6f\011\uff6f\012\uff6f\014\uff6f\015\uff6f\016\uff6f\017" +
    "\uff6f\020\uff6f\021\uff6f\046\uff6f\047\uff6f\051\uff6f\001\002" +
    "\000\020\012\043\016\036\017\033\020\040\046\035\047" +
    "\050\051\046\001\002\000\006\011\uff86\021\256\001\002" +
    "\000\004\011\u0169\001\002\000\004\020\u016a\001\002\000" +
    "\004\042\u016b\001\002\000\032\003\uff80\011\uff80\012\uff80" +
    "\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\046" +
    "\uff80\047\uff80\051\uff80\001\002\000\006\050\u017d\052\u017e" +
    "\001\002\000\010\003\u016f\050\u016e\052\u0170\001\002\000" +
    "\006\003\u0179\041\u0178\001\002\000\004\041\u0176\001\002" +
    "\000\006\003\u0171\041\u0172\001\002\000\004\042\u0175\001" +
    "\002\000\006\003\u0173\042\u0174\001\002\000\032\003\uff48" +
    "\011\uff48\012\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020" +
    "\uff48\021\uff48\046\uff48\047\uff48\051\uff48\001\002\000\032" +
    "\003\uff4b\011\uff4b\012\uff4b\014\uff4b\015\uff4b\016\uff4b\017" +
    "\uff4b\020\uff4b\021\uff4b\046\uff4b\047\uff4b\051\uff4b\001\002" +
    "\000\032\003\uff49\011\uff49\012\uff49\014\uff49\015\uff49\016" +
    "\uff49\017\uff49\020\uff49\021\uff49\046\uff49\047\uff49\051\uff49" +
    "\001\002\000\004\042\u0177\001\002\000\032\003\uff4e\011" +
    "\uff4e\012\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e" +
    "\021\uff4e\046\uff4e\047\uff4e\051\uff4e\001\002\000\006\003" +
    "\u017b\042\u017c\001\002\000\004\042\u017a\001\002\000\032" +
    "\003\uff4d\011\uff4d\012\uff4d\014\uff4d\015\uff4d\016\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\046\uff4d\047\uff4d\051\uff4d\001\002" +
    "\000\032\003\uff4c\011\uff4c\012\uff4c\014\uff4c\015\uff4c\016" +
    "\uff4c\017\uff4c\020\uff4c\021\uff4c\046\uff4c\047\uff4c\051\uff4c" +
    "\001\002\000\032\003\uff50\011\uff50\012\uff50\014\uff50\015" +
    "\uff50\016\uff50\017\uff50\020\uff50\021\uff50\046\uff50\047\uff50" +
    "\051\uff50\001\002\000\004\041\u0181\001\002\000\004\041" +
    "\u017f\001\002\000\004\042\u0180\001\002\000\032\003\uff4a" +
    "\011\uff4a\012\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020" +
    "\uff4a\021\uff4a\046\uff4a\047\uff4a\051\uff4a\001\002\000\004" +
    "\042\u0182\001\002\000\032\003\uff4f\011\uff4f\012\uff4f\014" +
    "\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\046\uff4f" +
    "\047\uff4f\051\uff4f\001\002\000\014\003\uffd5\011\uffd5\014" +
    "\uffd5\015\uffd5\021\uffd5\001\002\000\006\003\u0185\020\u0186" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\020\012\043\016\036" +
    "\017\033\020\040\046\035\047\050\051\046\001\002\000" +
    "\010\003\uff86\011\uff86\021\256\001\002\000\006\003\u0189" +
    "\011\u018a\001\002\000\004\020\u0190\001\002\000\006\003" +
    "\u018b\020\u018c\001\002\000\004\042\u018f\001\002\000\006" +
    "\003\u018d\042\u018e\001\002\000\032\003\uff88\011\uff88\012" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\046\uff88\047\uff88\051\uff88\001\002\000\032\003\uff8c\011" +
    "\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\046\uff8c\047\uff8c\051\uff8c\001\002\000\032\003" +
    "\uff89\011\uff89\012\uff89\014\uff89\015\uff89\016\uff89\017\uff89" +
    "\020\uff89\021\uff89\046\uff89\047\uff89\051\uff89\001\002\000" +
    "\004\042\u0191\001\002\000\032\003\uff8a\011\uff8a\012\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\046" +
    "\uff8a\047\uff8a\051\uff8a\001\002\000\006\011\uff86\021\256" +
    "\001\002\000\004\011\u0194\001\002\000\004\020\u0195\001" +
    "\002\000\004\042\u0196\001\002\000\032\003\uff8b\011\uff8b" +
    "\012\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\046\uff8b\047\uff8b\051\uff8b\001\002\000\006\003\u0199" +
    "\040\u019a\001\002\000\006\003\u0199\040\u019a\001\002\000" +
    "\006\003\u01ab\051\u01aa\001\002\000\006\003\u01ab\051\u01aa" +
    "\001\002\000\004\006\u019c\001\002\000\012\003\u019e\031" +
    "\u01a1\032\u019f\033\u01a0\001\002\000\006\007\u01a2\042\u01a3" +
    "\001\002\000\012\003\uffe2\007\uffe2\041\uffe2\042\uffe2\001" +
    "\002\000\012\003\uffe4\007\uffe4\041\uffe4\042\uffe4\001\002" +
    "\000\012\003\uffe3\007\uffe3\041\uffe3\042\uffe3\001\002\000" +
    "\012\003\uffe5\007\uffe5\041\uffe5\042\uffe5\001\002\000\010" +
    "\004\022\005\027\051\025\001\002\000\014\003\uffd8\004" +
    "\uffd8\005\uffd8\010\uffd8\051\uffd8\001\002\000\004\010\u01a5" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\004\011\u01a7\001\002" +
    "\000\004\051\u01a8\001\002\000\004\042\u01a9\001\002\000" +
    "\014\003\uffbe\004\uffbe\005\uffbe\010\uffbe\051\uffbe\001\002" +
    "\000\010\003\uffac\037\uffac\044\u01bf\001\002\000\010\003" +
    "\uffab\037\uffab\044\u01bd\001\002\000\006\003\u01bc\041\u01bb" +
    "\001\002\000\006\003\u01ae\037\u01af\001\002\000\016\003" +
    "\uffa6\027\u01b1\030\u01b0\031\uffa6\032\uffa6\033\uffa6\001\002" +
    "\000\016\003\uffa6\027\u01b1\030\u01b0\031\uffa6\032\uffa6\033" +
    "\uffa6\001\002\000\012\003\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\001\002\000\014\003\uffa9\030\u01b6\031\uffa9\032\uffa9\033" +
    "\uffa9\001\002\000\012\003\u019e\031\u01a1\032\u019f\033\u01a0" +
    "\001\002\000\010\003\uffaf\041\uffaf\042\u01b4\001\002\000" +
    "\006\003\u01ab\051\u01aa\001\002\000\006\003\uffb1\041\uffb1" +
    "\001\002\000\012\003\uffa7\031\uffa7\032\uffa7\033\uffa7\001" +
    "\002\000\012\003\u019e\031\u01a1\032\u019f\033\u01a0\001\002" +
    "\000\010\003\uffae\041\uffae\042\u01b9\001\002\000\006\003" +
    "\u01ab\051\u01aa\001\002\000\006\003\uffb0\041\uffb0\001\002" +
    "\000\012\003\uffb4\006\uffb4\007\uffb4\042\uffb4\001\002\000" +
    "\012\003\uffb2\006\uffb2\007\uffb2\042\uffb2\001\002\000\006" +
    "\003\u01ab\051\u01aa\001\002\000\006\003\uffaa\037\uffaa\001" +
    "\002\000\006\003\u01ab\051\u01aa\001\002\000\006\003\uffad" +
    "\037\uffad\001\002\000\004\041\u01c2\001\002\000\012\003" +
    "\uffb3\006\uffb3\007\uffb3\042\uffb3\001\002\000\006\003\u01c4" +
    "\006\u01c5\001\002\000\012\003\u019e\031\u01a1\032\u019f\033" +
    "\u01a0\001\002\000\012\003\u019e\031\u01a1\032\u019f\033\u01a0" +
    "\001\002\000\010\003\u01c7\007\u01c8\042\u01c9\001\002\000" +
    "\014\003\uffd6\004\uffd6\005\uffd6\010\uffd6\051\uffd6\001\002" +
    "\000\010\004\022\005\027\051\025\001\002\000\014\003" +
    "\uffd9\004\uffd9\005\uffd9\010\uffd9\051\uffd9\001\002\000\006" +
    "\003\u01cb\010\u01cc\001\002\000\020\012\043\016\036\017" +
    "\033\020\040\046\035\047\050\051\046\001\002\000\020" +
    "\012\043\016\036\017\033\020\040\046\035\047\050\051" +
    "\046\001\002\000\006\003\u01ce\011\u01cf\001\002\000\004" +
    "\051\u01d5\001\002\000\006\003\u01d1\051\u01d0\001\002\000" +
    "\006\003\u01d3\042\u01d4\001\002\000\004\042\u01d2\001\002" +
    "\000\014\003\uffba\004\uffba\005\uffba\010\uffba\051\uffba\001" +
    "\002\000\014\003\uffb9\004\uffb9\005\uffb9\010\uffb9\051\uffb9" +
    "\001\002\000\014\003\uffbf\004\uffbf\005\uffbf\010\uffbf\051" +
    "\uffbf\001\002\000\004\042\u01d6\001\002\000\014\003\uffbb" +
    "\004\uffbb\005\uffbb\010\uffbb\051\uffbb\001\002\000\004\011" +
    "\u01d8\001\002\000\004\051\u01d9\001\002\000\004\042\u01da" +
    "\001\002\000\014\003\uffbc\004\uffbc\005\uffbc\010\uffbc\051" +
    "\uffbc\001\002\000\006\007\u01dc\042\u01dd\001\002\000\010" +
    "\004\022\005\027\051\025\001\002\000\014\003\uffd7\004" +
    "\uffd7\005\uffd7\010\uffd7\051\uffd7\001\002\000\004\010\u01df" +
    "\001\002\000\020\012\043\016\036\017\033\020\040\046" +
    "\035\047\050\051\046\001\002\000\004\011\u01e1\001\002" +
    "\000\004\051\u01e2\001\002\000\004\042\u01e3\001\002\000" +
    "\014\003\uffbd\004\uffbd\005\uffbd\010\uffbd\051\uffbd\001\002" +
    "\000\004\011\u01e5\001\002\000\004\051\u01e6\001\002\000" +
    "\004\042\u01e7\001\002\000\004\002\ufff3\001\002\000\004" +
    "\051\025\001\002\000\014\003\u019e\031\u01a1\032\u019f\033" +
    "\u01a0\051\025\001\002\000\012\003\u019e\031\u01a1\032\u019f" +
    "\033\u01a0\001\002\000\006\003\u01ec\042\u01ed\001\002\000" +
    "\014\003\uffda\004\uffda\005\uffda\010\uffda\051\uffda\001\002" +
    "\000\014\003\uffdc\004\uffdc\005\uffdc\010\uffdc\051\uffdc\001" +
    "\002\000\004\042\u01f0\001\002\000\014\003\uffdd\004\uffdd" +
    "\005\uffdd\010\uffdd\051\uffdd\001\002\000\014\003\uffdb\004" +
    "\uffdb\005\uffdb\010\uffdb\051\uffdb\001\002\000\014\003\uffde" +
    "\004\uffde\005\uffde\010\uffde\051\uffde\001\002\000\006\003" +
    "\uffef\010\uffef\001\002\000\020\012\043\016\036\017\033" +
    "\020\040\046\035\047\050\051\046\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\006\003\u01f6\011\u01f7\001\002\000\004\051" +
    "\u01fd\001\002\000\006\003\u01f9\051\u01f8\001\002\000\006" +
    "\003\u01fb\042\u01fc\001\002\000\004\042\u01fa\001\002\000" +
    "\004\002\ufff6\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\ufff9\001\002\000\004\042\u01fe\001\002\000\004\002" +
    "\ufff7\001\002\000\004\011\u0200\001\002\000\004\051\u0201" +
    "\001\002\000\004\042\u0202\001\002\000\004\002\ufff8\001" +
    "\002\000\006\003\u0199\040\u019a\001\002\000\006\003\u0199" +
    "\040\u019a\001\002\000\006\007\u0206\042\u0207\001\002\000" +
    "\010\004\022\005\027\051\025\001\002\000\014\003\uffe0" +
    "\004\uffe0\005\uffe0\010\uffe0\051\uffe0\001\002\000\004\010" +
    "\u0209\001\002\000\020\012\043\016\036\017\033\020\040" +
    "\046\035\047\050\051\046\001\002\000\004\011\u020b\001" +
    "\002\000\004\051\u020c\001\002\000\004\042\u020d\001\002" +
    "\000\014\003\uffc4\004\uffc4\005\uffc4\010\uffc4\051\uffc4\001" +
    "\002\000\010\003\u020f\007\u0210\042\u0211\001\002\000\014" +
    "\003\uffdf\004\uffdf\005\uffdf\010\uffdf\051\uffdf\001\002\000" +
    "\010\004\022\005\027\051\025\001\002\000\014\003\uffe1" +
    "\004\uffe1\005\uffe1\010\uffe1\051\uffe1\001\002\000\006\003" +
    "\u0213\010\u0214\001\002\000\020\012\043\016\036\017\033" +
    "\020\040\046\035\047\050\051\046\001\002\000\020\012" +
    "\043\016\036\017\033\020\040\046\035\047\050\051\046" +
    "\001\002\000\006\003\u0216\011\u0217\001\002\000\004\051" +
    "\u021d\001\002\000\006\003\u0219\051\u0218\001\002\000\006" +
    "\003\u021b\042\u021c\001\002\000\004\042\u021a\001\002\000" +
    "\014\003\uffc1\004\uffc1\005\uffc1\010\uffc1\051\uffc1\001\002" +
    "\000\014\003\uffc0\004\uffc0\005\uffc0\010\uffc0\051\uffc0\001" +
    "\002\000\014\003\uffc5\004\uffc5\005\uffc5\010\uffc5\051\uffc5" +
    "\001\002\000\004\042\u021e\001\002\000\014\003\uffc2\004" +
    "\uffc2\005\uffc2\010\uffc2\051\uffc2\001\002\000\004\011\u0220" +
    "\001\002\000\004\051\u0221\001\002\000\004\042\u0222\001" +
    "\002\000\014\003\uffc3\004\uffc3\005\uffc3\010\uffc3\051\uffc3" +
    "\001\002\000\006\003\uffeb\010\uffeb\001\002\000\006\003" +
    "\uffe9\010\uffe9\001\002\000\006\003\uffe7\010\uffe7\001\002" +
    "\000\004\041\uffb8\001\002\000\004\041\u0228\001\002\000" +
    "\010\003\uffb7\006\uffb7\007\uffb7\001\002\000\004\003\u022a" +
    "\001\002\000\010\003\uffb5\006\uffb5\007\uffb5\001\002\000" +
    "\006\003\u022d\006\u022c\001\002\000\012\003\u019e\031\u01a1" +
    "\032\u019f\033\u01a0\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\004\002\ufffa\001\002" +
    "\000\004\007\u0230\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\001\001\002\000\010\007\uffb6\040\013\041" +
    "\012\001\002\000\004\007\u0235\001\002\000\014\003\026" +
    "\004\022\005\027\010\030\051\025\001\002\000\004\002" +
    "\uffff\001\002\000\012\003\uffb6\007\uffb6\040\013\041\012" +
    "\001\002\000\010\007\uffb6\040\013\041\012\001\002\000" +
    "\004\007\u023a\001\002\000\014\003\026\004\022\005\027" +
    "\010\030\051\025\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\u023d\007\u023e\001\002\000\014\003\026\004\022" +
    "\005\027\010\030\051\025\001\002\000\014\003\026\004" +
    "\022\005\027\010\030\051\025\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023e\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u022a\001\001\000\004\013\013\001\001\000\006\015" +
    "\u0228\016\u01ac\001\001\000\006\015\u0225\016\u01ac\001\001" +
    "\000\002\001\001\000\020\003\020\005\022\006\017\007" +
    "\030\010\023\011\015\012\016\001\001\000\016\005\u0224" +
    "\006\017\007\030\010\023\011\015\012\016\001\001\000" +
    "\016\005\u0223\006\017\007\030\010\023\011\015\012\016" +
    "\001\001\000\016\005\u0222\006\017\007\030\010\023\011" +
    "\015\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u01f1\006\017\007\030\010" +
    "\023\011\015\012\016\001\001\000\002\001\001\000\026" +
    "\004\u01e3\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\002\001\001" +
    "\000\026\004\043\020\046\021\041\022\052\024\051\027" +
    "\040\030\050\035\033\036\044\037\036\001\001\000\016" +
    "\005\031\006\017\007\030\010\023\011\015\012\016\001" +
    "\001\000\002\001\001\000\012\030\202\032\u0183\033\200" +
    "\034\177\001\001\000\026\004\u0182\020\046\021\041\022" +
    "\052\024\051\027\040\030\050\035\033\036\044\037\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\274\020\046\021\041\022\052\024\051\027\040\030\050" +
    "\035\033\036\044\037\036\001\001\000\026\004\253\020" +
    "\046\021\041\022\052\024\051\027\040\030\050\035\033" +
    "\036\044\037\036\001\001\000\026\004\252\020\046\021" +
    "\041\022\052\024\051\027\040\030\050\035\033\036\044" +
    "\037\036\001\001\000\026\004\251\020\046\021\041\022" +
    "\052\024\051\027\040\030\050\035\033\036\044\037\036" +
    "\001\001\000\012\030\202\032\203\033\200\034\177\001" +
    "\001\000\002\001\001\000\026\004\163\020\046\021\041" +
    "\022\052\024\051\027\040\030\050\035\033\036\044\037" +
    "\036\001\001\000\002\001\001\000\026\004\075\020\046" +
    "\021\041\022\052\024\051\027\040\030\050\035\033\036" +
    "\044\037\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\054\020\046\021\041\022\052\024\051\027" +
    "\040\030\050\035\033\036\044\037\036\001\001\000\026" +
    "\004\053\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\146\040\147" +
    "\041\120\042\125\001\001\000\012\030\124\040\126\041" +
    "\120\042\125\001\001\000\004\031\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\112\001\001\000" +
    "\002\001\001\000\004\031\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\136\041\120\042\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\131\042\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\234\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\026\004\206" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\004\025\207\001\001" +
    "\000\004\026\220\001\001\000\012\030\202\032\211\033" +
    "\200\034\177\001\001\000\002\001\001\000\026\004\216" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\026\004\214\020\046" +
    "\021\041\022\052\024\051\027\040\030\050\035\033\036" +
    "\044\037\036\001\001\000\004\025\215\001\001\000\002" +
    "\001\001\000\004\025\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\222\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\235\001\001\000\004\026\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\202\033\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\202\032\250" +
    "\033\200\034\177\001\001\000\012\030\202\032\247\033" +
    "\200\034\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\202" +
    "\032\263\033\200\034\177\001\001\000\012\030\202\032" +
    "\260\033\200\034\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\305" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\004\023\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\313\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\004\023\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\324" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\004\023\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\332\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\004\023\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\346\020" +
    "\046\021\041\022\052\024\051\027\040\030\050\035\033" +
    "\036\044\037\036\001\001\000\004\023\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\354\020\046\021\041\022\052\024" +
    "\051\027\040\030\050\035\033\036\044\037\036\001\001" +
    "\000\004\023\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\367\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\004\023\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0109\020\046\021\041\022\052\024\051\027\040\030\050" +
    "\035\033\036\044\037\036\001\001\000\026\004\376\020" +
    "\046\021\041\022\052\024\051\027\040\030\050\035\033" +
    "\036\044\037\036\001\001\000\004\023\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u011b" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\026\004\u0110\020\046" +
    "\021\041\022\052\024\051\027\040\030\050\035\033\036" +
    "\044\037\036\001\001\000\004\023\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u0123\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\004\023\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0129\020\046\021\041\022\052\024\051\027\040\030\050" +
    "\035\033\036\044\037\036\001\001\000\004\023\u012a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u0134\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\004\023\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0146\020\046\021\041" +
    "\022\052\024\051\027\040\030\050\035\033\036\044\037" +
    "\036\001\001\000\026\004\u013b\020\046\021\041\022\052" +
    "\024\051\027\040\030\050\035\033\036\044\037\036\001" +
    "\001\000\004\023\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u0158\020\046\021\041\022" +
    "\052\024\051\027\040\030\050\035\033\036\044\037\036" +
    "\001\001\000\026\004\u014d\020\046\021\041\022\052\024" +
    "\051\027\040\030\050\035\033\036\044\037\036\001\001" +
    "\000\004\023\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u0160\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\004\023\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0166\020\046\021\041" +
    "\022\052\024\051\027\040\030\050\035\033\036\044\037" +
    "\036\001\001\000\004\023\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0191\020" +
    "\046\021\041\022\052\024\051\027\040\030\050\035\033" +
    "\036\044\037\036\001\001\000\026\004\u0186\020\046\021" +
    "\041\022\052\024\051\027\040\030\050\035\033\036\044" +
    "\037\036\001\001\000\004\023\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u01c2\001\001" +
    "\000\004\014\u019a\001\001\000\006\015\u01c0\016\u01ac\001" +
    "\001\000\006\015\u01ab\016\u01ac\001\001\000\002\001\001" +
    "\000\004\043\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\u01a3\006\017\007\030\010\023\011\015\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u01a5\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u01b6\001\001\000\004\017\u01b1\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u01b2" +
    "\001\001\000\002\001\001\000\006\015\u01b4\016\u01ac\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u01b7" +
    "\001\001\000\002\001\001\000\006\015\u01b9\016\u01ac\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u01bd\001\001\000\002\001\001\000\004\016" +
    "\u01bf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u01da\001\001\000" +
    "\004\043\u01c5\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\u01c9\006\017\007\030\010\023\011\015\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u01d6\020\046\021\041\022\052\024\051\027\040\030" +
    "\050\035\033\036\044\037\036\001\001\000\026\004\u01cc" +
    "\020\046\021\041\022\052\024\051\027\040\030\050\035" +
    "\033\036\044\037\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\u01dd\006\017\007\030\010\023\011" +
    "\015\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\u01df\020\046\021\041\022\052\024\051\027" +
    "\040\030\050\035\033\036\044\037\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u01f0\001\001\000\006\007" +
    "\u01ee\043\u01ed\001\001\000\004\043\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u01fe\020\046\021\041\022" +
    "\052\024\051\027\040\030\050\035\033\036\044\037\036" +
    "\001\001\000\026\004\u01f4\020\046\021\041\022\052\024" +
    "\051\027\040\030\050\035\033\036\044\037\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u020d\001\001\000\004\014" +
    "\u0204\001\001\000\002\001\001\000\016\005\u0207\006\017" +
    "\007\030\010\023\011\015\012\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0209\020\046\021\041" +
    "\022\052\024\051\027\040\030\050\035\033\036\044\037" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\u0211\006\017\007\030\010\023\011\015" +
    "\012\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u021e\020\046\021\041\022\052\024\051\027\040" +
    "\030\050\035\033\036\044\037\036\001\001\000\026\004" +
    "\u0214\020\046\021\041\022\052\024\051\027\040\030\050" +
    "\035\033\036\044\037\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u0226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u022e\001\001\000\020\003\u022d\005\022\006\017\007" +
    "\030\010\023\011\015\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u0230\005\022\006\017\007" +
    "\030\010\023\011\015\012\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0233\001\001\000\002\001" +
    "\001\000\020\003\u0235\005\022\006\017\007\030\010\023" +
    "\011\015\012\016\001\001\000\002\001\001\000\004\013" +
    "\u023b\001\001\000\004\013\u0238\001\001\000\002\001\001" +
    "\000\020\003\u023a\005\022\006\017\007\030\010\023\011" +
    "\015\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\u023f\005\022\006\017\007\030\010\023\011" +
    "\015\012\016\001\001\000\020\003\u023e\005\022\006\017" +
    "\007\030\010\023\011\015\012\016\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_body ::= PROCEDURE ID main_parameters IS begin_main_body 
            {
              Object RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);
        
        Nodo tmp2 = new Nodo("PROCEDURE"); 
        tmp.setNumNodo(parser.contador++);
        tmp2.setValor("null");
        
        Nodo tmp3 = new Nodo("ID"); 
        tmp.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        
        tmp.addHijo((Nodo)tmp2);
        tmp.addHijo((Nodo)tmp3);
        tmp.addHijo((Nodo)beg);
        
	parser.padre = (Nodo) tmp;
	System.out.println("OK begin");
        RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= error ID main_parameters IS begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= PROCEDURE error main_parameters IS begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_body ::= PROCEDURE ID main_parameters error begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_body ::= FUNCTION ID main_parameters RETURN var_type IS begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_body ::= FUNCTION error main_parameters IS begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_body ::= FUNCTION ID main_parameters error begin_main_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // begin_main_body ::= declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // begin_main_body ::= declaration_list error content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // begin_main_body ::= declaration_list BEGIN content error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // begin_main_body ::= declaration_list BEGIN content END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // begin_main_body ::= declaration_list BEGIN content END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begin_main_body ::= BEGIN content END ID PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                                                                                                        Nodo tmp = new Nodo("CONTENT");
                                                                                                        tmp.setNumNodo(parser.contador++);
                                                                                                        tmp.addHijo((Nodo)e);
                                                                                                            //parser.padre = (Nodo) tmp;
                                                                                                            System.out.println("OK begin main body");
                                                                                                        RESULT=tmp;
                                                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_main_body ::= error content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_main_body ::= BEGIN content error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_main_body ::= BEGIN content END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // begin_main_body ::= BEGIN content END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration_list ::= procedure_declaration declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_list ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_list ::= variable_declaration declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_list ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_list ::= function_declaration declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration_list ::= procedure_block declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_list ::= procedure_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_list ::= function_block declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= function_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_type ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_declaration ::= PROCEDURE ID parameters PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_declaration ::= PROCEDURE error parameters PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration ::= PROCEDURE ID parameters error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_declaration ::= ID COMA variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_declaration ::= ID error variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_declaration ::= ID OPDEC var_type PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_declaration ::= ID error var_type PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration ::= ID OPDEC var_type error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= FUNCTION ID parameters RETURN var_type PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_declaration ::= FUNCTION error parameters RETURN var_type PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_declaration ::= FUNCTION ID parameters error var_type PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_declaration ::= FUNCTION ID parameters RETURN var_type error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // content ::= assignment content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // content ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // content ::= while_block content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // content ::= while_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // content ::= if_block content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // content ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // content ::= for_block content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // content ::= for_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // content ::= loop_block content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // content ::= loop_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // content ::= put content 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //Nodo tmp = new Nodo("CONTENT");
    Nodo tmp2 = new Nodo("PUT");
    tmp2.setNumNodo(parser.contador++);
    tmp2.addHijo((Nodo)a);
    tmp2.setNumNodo(parser.contador++);
    tmp2.addHijo((Nodo)b);
    
    //tmp.setNumNodo(parser.contador++);
    //tmp.addHijo((Nodo)tmp2);
 
    System.out.println("put + content ");
    RESULT=tmp2;
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // content ::= put 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("PUT");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    System.out.println("put");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // content ::= get content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // content ::= get 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // content ::= calling_subroutine content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // content ::= calling_subroutine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procedure_block ::= PROCEDURE error parameters IS declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procedure_block ::= PROCEDURE ID parameters IS declaration_list error content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // function_block ::= FUNCTION error parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_block ::= FUNCTION ID parameters error var_type IS declaration_list BEGIN content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list error content END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // main_parameters ::= PARIZQ parameters_specification NT$0 PARDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // main_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // main_parameters ::= PARDER parameters_specification error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameters ::= PARIZQ parameters_specification PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameters ::= error parameters_specification PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parameters ::= PARIZQ parameters_specification error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameters_specification ::= ident_list error parameter_mode var_type PYC parameters_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameters_specification ::= ident_list OPDEC parameter_mode var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameters_specification ::= ident_list error parameter_mode var_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ident_list ::= ID COMA ident_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ident_list ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ident_list ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ident_list ::= error COMA ident_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter_mode ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameter_mode ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_mode ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_mode ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment ::= ID OPASG E PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignment ::= ID error E PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment ::= ID OPASG error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment ::= ID OPASG E error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment ::= ID OPASG call_subroutine PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment ::= ID error call_subroutine PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment ::= ID OPASG call_subroutine error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment ::= ID OPASG STR PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment ::= ID error STR PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment ::= ID OPASG STR error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment ::= ID OPASG TRUE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assignment ::= ID error TRUE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment ::= ID OPASG TRUE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment ::= ID OPASG FALSE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment ::= ID error FALSE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment ::= ID OPASG FALSE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E OPSUM T 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("OPSUM");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo)b);
                RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("T");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
                //parser.padre = (Nodo) tmp;
                System.out.println("OK");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // T ::= T OPMULT F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("OPMULT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo)b);
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // T ::= F 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("F");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
                //parser.padre = (Nodo) tmp;
                System.out.println("OK");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= NUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("NUM");
            tmp.setNumNodo(parser.contador++);
            //tmp.addHijo((Nodo)e);
            //parser.padre = (Nodo) tmp;
            tmp.setValor(e);
            System.out.println("OK");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Nodo tmp = new Nodo("E");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            //parser.padre = (Nodo) tmp;
            System.out.println("EOK");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // loop_block ::= LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // loop_block ::= LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // loop_block ::= LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_block ::= WHILE condition LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_block ::= WHILE condition error content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_block ::= WHILE condition LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_block ::= WHILE condition LOOP content salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_block ::= WHILE condition LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // salir_ciclo ::= EXIT WHEN condition PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // salir_ciclo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // salir_ciclo ::= EXIT error condition PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // salir_ciclo ::= EXIT WHEN condition error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_block ::= FOR error NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_block ::= FOR ID error DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for_block ::= FOR ID NUM error NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for_block ::= FOR ID NUM DOSPUNTOS error LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for_block ::= FOR ID NUM DOSPUNTOS NUM error content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_block ::= FOR error ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_block ::= FOR ID ID error NUM LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_block ::= FOR ID ID DOSPUNTOS error LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // for_block ::= FOR ID ID DOSPUNTOS NUM error content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // for_block ::= FOR error NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // for_block ::= FOR ID error DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // for_block ::= FOR ID NUM error ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // for_block ::= FOR ID NUM DOSPUNTOS ID error content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_block ::= FOR error ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_block ::= FOR ID ID error ID LOOP content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // for_block ::= FOR ID ID DOSPUNTOS ID error content salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // if_block ::= IF condition THEN content elsif_block else_block END IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // if_block ::= IF condition error content elsif_block else_block END IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // if_block ::= IF condition THEN content elsif_block else_block error IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // if_block ::= IF condition THEN content elsif_block else_block END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // if_block ::= IF condition THEN content elsif_block else_block END IF error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // elsif_block ::= ELSIF condition THEN content elsif_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // elsif_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // elsif_block ::= ELSIF condition error content elsif_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // else_block ::= ELSE content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condition ::= boolean_expr OR condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condition ::= boolean_expr AND condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condition ::= boolean_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condition ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // boolean_expr ::= rel_operand OPREL rel_operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // rel_operand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // rel_operand ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // rel_operand ::= call_subroutine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // rel_operand ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // put ::= PUT PARIZQ NUM PARDER PYC 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // put ::= PUT error NUM PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // put ::= PUT PARIZQ error PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // put ::= PUT PARIZQ NUM error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // put ::= PUT PARIZQ STR PARDER PYC 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("STR");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(str.toString().replaceAll("\"",""));
    System.out.println("str in put");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // put ::= PUT error STR PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // put ::= PUT PARIZQ STR error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // put ::= PUT PARIZQ STR PARDER error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // get ::= GET PARIZQ ID PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // get ::= GET error ID PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // get ::= GET PARIZQ error PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // get ::= GET PARIZQ ID error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // get ::= GET PARIZQ ID PARDER error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // calling_subroutine ::= call_subroutine PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // calling_subroutine ::= call_subroutine error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // call_subroutine ::= ID PARIZQ parameter_values PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // call_subroutine ::= ID PARIZQ parameter_values error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parameter_values ::= ID COMA parameter_values 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // parameter_values ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parameter_values ::= error COMA parameter_values 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parameter_values ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // parameter_values ::= NUM COMA parameter_values 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // parameter_values ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
