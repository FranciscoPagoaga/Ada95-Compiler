
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pack;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\011" +
    "\000\002\002\007\000\002\002\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\007\005\000\002" +
    "\007\005\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\012\014\000\002\012\014\000\002" +
    "\012\014\000\002\012\014\000\002\012\014\000\002\012" +
    "\014\000\002\011\016\000\002\011\016\000\002\011\016" +
    "\000\002\011\016\000\002\011\016\000\002\011\016\000" +
    "\002\011\016\000\002\045\002\000\002\013\006\000\002" +
    "\013\002\000\002\013\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\015\010\000\002\015\010" +
    "\000\002\015\006\000\002\015\006\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\002\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\035\006" +
    "\000\002\040\005\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\042\003\000\002\042\005\000\002" +
    "\020\010\000\002\020\010\000\002\020\010\000\002\022" +
    "\012\000\002\022\012\000\002\022\012\000\002\022\012" +
    "\000\002\022\012\000\002\023\006\000\002\023\002\000" +
    "\002\023\006\000\002\023\006\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\021" +
    "\015\000\002\021\015\000\002\021\015\000\002\021\015" +
    "\000\002\021\015\000\002\021\015\000\002\021\015\000" +
    "\002\021\015\000\002\021\015\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\021" +
    "\015\000\002\021\015\000\002\021\015\000\002\021\015" +
    "\000\002\021\015\000\002\021\015\000\002\021\015\000" +
    "\002\021\015\000\002\021\015\000\002\021\015\000\002" +
    "\021\015\000\002\021\015\000\002\021\015\000\002\021" +
    "\015\000\002\021\015\000\002\024\013\000\002\024\013" +
    "\000\002\024\013\000\002\024\013\000\002\024\013\000" +
    "\002\025\007\000\002\025\002\000\002\025\007\000\002" +
    "\026\004\000\002\026\002\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\034\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\007\000\002\036\007\000\002\036\007" +
    "\000\002\037\007\000\002\037\007\000\002\037\007\000" +
    "\002\037\007\000\002\037\007\000\002\027\004\000\002" +
    "\027\004\000\002\030\006\000\002\030\006\000\002\031" +
    "\005\000\002\031\003\000\002\031\005\000\002\031\003" +
    "\000\002\031\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0246\000\010\003\005\004\004\005\007\001\002\000" +
    "\006\003\u0240\051\u023f\001\002\000\004\051\u023b\001\002" +
    "\000\004\002\u023a\001\002\000\006\003\011\051\010\001" +
    "\002\000\012\003\uffb4\006\uffb4\040\013\041\012\001\002" +
    "\000\010\007\uffb4\040\013\041\012\001\002\000\006\003" +
    "\u01af\051\u01ae\001\002\000\006\003\u01af\051\u01ae\001\002" +
    "\000\004\007\015\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\014\003\uffe4\004\022" +
    "\005\027\010\uffe4\051\025\001\002\000\014\003\uffe6\004" +
    "\022\005\027\010\uffe6\051\025\001\002\000\014\003\uffe8" +
    "\004\022\005\027\010\uffe8\051\025\001\002\000\004\002" +
    "\ufffb\001\002\000\006\003\u020c\051\u020b\001\002\000\006" +
    "\003\u01f7\010\u01f8\001\002\000\014\003\uffec\004\022\005" +
    "\027\010\uffec\051\025\001\002\000\010\003\u01ed\037\u01ee" +
    "\044\u01ec\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\006\003\u019c" +
    "\051\u019b\001\002\000\022\003\047\012\042\016\052\017" +
    "\036\020\037\046\045\047\054\051\044\001\002\000\014" +
    "\003\uffea\004\022\005\027\010\uffea\051\025\001\002\000" +
    "\006\003\uffeb\010\uffeb\001\002\000\032\003\uffc4\011\uffc4" +
    "\012\042\014\uffc4\015\uffc4\016\052\017\036\020\037\021" +
    "\uffc4\046\045\047\054\051\044\001\002\000\032\003\uffcc" +
    "\011\uffcc\012\042\014\uffcc\015\uffcc\016\052\017\036\020" +
    "\037\021\uffcc\046\045\047\054\051\044\001\002\000\032" +
    "\003\uffd0\011\uffd0\012\042\014\uffd0\015\uffd0\016\052\017" +
    "\036\020\037\021\uffd0\046\045\047\054\051\044\001\002" +
    "\000\010\003\115\050\111\051\114\001\002\000\020\012" +
    "\042\016\052\017\036\020\037\046\045\047\054\051\044" +
    "\001\002\000\032\003\uffca\011\uffca\012\042\014\uffca\015" +
    "\uffca\016\052\017\036\020\037\021\uffca\046\045\047\054" +
    "\051\044\001\002\000\032\003\uffc8\011\uffc8\012\042\014" +
    "\uffc8\015\uffc8\016\052\017\036\020\037\021\uffc8\046\045" +
    "\047\054\051\044\001\002\000\010\003\115\050\111\051" +
    "\114\001\002\000\006\003\u0159\042\u015a\001\002\000\010" +
    "\003\u0132\036\u0131\040\122\001\002\000\006\003\u011a\040" +
    "\u011b\001\002\000\032\003\uffd2\011\uffd2\012\042\014\uffd2" +
    "\015\uffd2\016\052\017\036\020\037\021\uffd2\046\045\047" +
    "\054\051\044\001\002\000\004\011\u0116\001\002\000\006" +
    "\003\u010d\011\u010e\001\002\000\032\003\uffce\011\uffce\012" +
    "\042\014\uffce\015\uffce\016\052\017\036\020\037\021\uffce" +
    "\046\045\047\054\051\044\001\002\000\006\003\075\051" +
    "\074\001\002\000\032\003\uffc6\011\uffc6\012\042\014\uffc6" +
    "\015\uffc6\016\052\017\036\020\037\021\uffc6\046\045\047" +
    "\054\051\044\001\002\000\006\003\055\040\056\001\002" +
    "\000\004\051\070\001\002\000\006\003\060\051\057\001" +
    "\002\000\006\003\064\041\063\001\002\000\004\041\061" +
    "\001\002\000\004\042\062\001\002\000\032\003\uff43\011" +
    "\uff43\012\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43" +
    "\021\uff43\046\uff43\047\uff43\051\uff43\001\002\000\006\003" +
    "\066\042\067\001\002\000\004\042\065\001\002\000\032" +
    "\003\uff42\011\uff42\012\uff42\014\uff42\015\uff42\016\uff42\017" +
    "\uff42\020\uff42\021\uff42\046\uff42\047\uff42\051\uff42\001\002" +
    "\000\032\003\uff41\011\uff41\012\uff41\014\uff41\015\uff41\016" +
    "\uff41\017\uff41\020\uff41\021\uff41\046\uff41\047\uff41\051\uff41" +
    "\001\002\000\032\003\uff45\011\uff45\012\uff45\014\uff45\015" +
    "\uff45\016\uff45\017\uff45\020\uff45\021\uff45\046\uff45\047\uff45" +
    "\051\uff45\001\002\000\004\041\071\001\002\000\004\042" +
    "\072\001\002\000\032\003\uff44\011\uff44\012\uff44\014\uff44" +
    "\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\046\uff44\047" +
    "\uff44\051\uff44\001\002\000\014\003\uffc7\011\uffc7\014\uffc7" +
    "\015\uffc7\021\uffc7\001\002\000\010\003\202\050\200\051" +
    "\201\001\002\000\006\050\076\051\077\001\002\000\004" +
    "\045\161\001\002\000\004\045\100\001\002\000\006\050" +
    "\102\051\101\001\002\000\004\020\153\001\002\000\004" +
    "\020\103\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\006\011\uff84" +
    "\021\106\001\002\000\004\011\150\001\002\000\006\003" +
    "\107\022\110\001\002\000\010\003\115\050\111\051\114" +
    "\001\002\000\010\003\115\050\111\051\114\001\002\000" +
    "\020\003\uff51\013\uff51\020\uff51\023\uff51\024\uff51\042\uff51" +
    "\043\uff51\001\002\000\004\043\143\001\002\000\016\003" +
    "\uff55\013\uff55\020\uff55\023\137\024\140\042\uff55\001\002" +
    "\000\022\003\uff52\013\uff52\020\uff52\023\uff52\024\uff52\040" +
    "\122\042\uff52\043\uff52\001\002\000\014\003\uff54\013\uff54" +
    "\020\uff54\042\uff54\043\uff4f\001\002\000\020\003\uff50\013" +
    "\uff50\020\uff50\023\uff50\024\uff50\042\uff50\043\uff50\001\002" +
    "\000\006\003\120\042\121\001\002\000\006\003\uff82\011" +
    "\uff82\001\002\000\006\003\uff85\011\uff85\001\002\000\010" +
    "\003\126\050\123\051\124\001\002\000\010\003\uff37\041" +
    "\uff37\044\135\001\002\000\010\003\uff3b\041\uff3b\044\133" +
    "\001\002\000\006\003\132\041\131\001\002\000\010\003" +
    "\uff39\041\uff39\044\127\001\002\000\010\003\126\050\123" +
    "\051\124\001\002\000\006\003\uff3a\041\uff3a\001\002\000" +
    "\020\003\uff3e\013\uff3e\020\uff3e\023\uff3e\024\uff3e\042\uff3e" +
    "\043\uff3e\001\002\000\020\003\uff3d\013\uff3d\020\uff3d\023" +
    "\uff3d\024\uff3d\042\uff3d\043\uff3d\001\002\000\010\003\126" +
    "\050\123\051\124\001\002\000\006\003\uff3c\041\uff3c\001" +
    "\002\000\010\003\126\050\123\051\124\001\002\000\006" +
    "\003\uff38\041\uff38\001\002\000\010\003\115\050\111\051" +
    "\114\001\002\000\010\003\115\050\111\051\114\001\002" +
    "\000\012\003\uff57\013\uff57\020\uff57\042\uff57\001\002\000" +
    "\012\003\uff56\013\uff56\020\uff56\042\uff56\001\002\000\010" +
    "\003\145\050\111\051\114\001\002\000\016\003\uff53\013" +
    "\uff53\020\uff53\023\uff53\024\uff53\042\uff53\001\002\000\016" +
    "\003\uff4f\013\uff4f\020\uff4f\023\uff4f\024\uff4f\042\uff4f\001" +
    "\002\000\004\042\147\001\002\000\006\003\uff83\011\uff83" +
    "\001\002\000\004\020\151\001\002\000\004\042\152\001" +
    "\002\000\032\003\uff77\011\uff77\012\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\046\uff77\047\uff77\051" +
    "\uff77\001\002\000\020\012\042\016\052\017\036\020\037" +
    "\046\045\047\054\051\044\001\002\000\006\011\uff84\021" +
    "\106\001\002\000\004\011\156\001\002\000\004\020\157" +
    "\001\002\000\004\042\160\001\002\000\032\003\uff67\011" +
    "\uff67\012\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67" +
    "\021\uff67\046\uff67\047\uff67\051\uff67\001\002\000\006\050" +
    "\162\051\163\001\002\000\004\020\172\001\002\000\004" +
    "\020\164\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\006\011\uff84" +
    "\021\106\001\002\000\004\011\167\001\002\000\004\020" +
    "\170\001\002\000\004\042\171\001\002\000\032\003\uff6f" +
    "\011\uff6f\012\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\046\uff6f\047\uff6f\051\uff6f\001\002\000\020" +
    "\012\042\016\052\017\036\020\037\046\045\047\054\051" +
    "\044\001\002\000\006\011\uff84\021\106\001\002\000\004" +
    "\011\175\001\002\000\004\020\176\001\002\000\004\042" +
    "\177\001\002\000\032\003\uff80\011\uff80\012\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\046\uff80\047" +
    "\uff80\051\uff80\001\002\000\006\003\317\045\320\001\002" +
    "\000\006\003\222\045\223\001\002\000\004\045\203\001" +
    "\002\000\006\050\204\051\205\001\002\000\004\020\214" +
    "\001\002\000\004\020\206\001\002\000\020\012\042\016" +
    "\052\017\036\020\037\046\045\047\054\051\044\001\002" +
    "\000\006\011\uff84\021\106\001\002\000\004\011\211\001" +
    "\002\000\004\020\212\001\002\000\004\042\213\001\002" +
    "\000\032\003\uff6e\011\uff6e\012\uff6e\014\uff6e\015\uff6e\016" +
    "\uff6e\017\uff6e\020\uff6e\021\uff6e\046\uff6e\047\uff6e\051\uff6e" +
    "\001\002\000\020\012\042\016\052\017\036\020\037\046" +
    "\045\047\054\051\044\001\002\000\006\011\uff84\021\106" +
    "\001\002\000\004\011\217\001\002\000\004\020\220\001" +
    "\002\000\004\042\221\001\002\000\032\003\uff7f\011\uff7f" +
    "\012\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\046\uff7f\047\uff7f\051\uff7f\001\002\000\006\050\302" +
    "\051\301\001\002\000\010\003\226\050\225\051\224\001" +
    "\002\000\006\003\257\020\260\001\002\000\006\003\235" +
    "\020\236\001\002\000\004\020\227\001\002\000\020\012" +
    "\042\016\052\017\036\020\037\046\045\047\054\051\044" +
    "\001\002\000\006\011\uff84\021\106\001\002\000\004\011" +
    "\232\001\002\000\004\020\233\001\002\000\004\042\234" +
    "\001\002\000\032\003\uff75\011\uff75\012\uff75\014\uff75\015" +
    "\uff75\016\uff75\017\uff75\020\uff75\021\uff75\046\uff75\047\uff75" +
    "\051\uff75\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\020\012\042" +
    "\016\052\017\036\020\037\046\045\047\054\051\044\001" +
    "\002\000\010\003\uff84\011\uff84\021\106\001\002\000\006" +
    "\003\241\011\242\001\002\000\004\020\250\001\002\000" +
    "\006\003\243\020\244\001\002\000\004\042\247\001\002" +
    "\000\006\003\245\042\246\001\002\000\032\003\uff71\011" +
    "\uff71\012\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71" +
    "\021\uff71\046\uff71\047\uff71\051\uff71\001\002\000\032\003" +
    "\uff78\011\uff78\012\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\046\uff78\047\uff78\051\uff78\001\002\000" +
    "\032\003\uff72\011\uff72\012\uff72\014\uff72\015\uff72\016\uff72" +
    "\017\uff72\020\uff72\021\uff72\046\uff72\047\uff72\051\uff72\001" +
    "\002\000\004\042\251\001\002\000\032\003\uff73\011\uff73" +
    "\012\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021" +
    "\uff73\046\uff73\047\uff73\051\uff73\001\002\000\006\011\uff84" +
    "\021\106\001\002\000\004\011\254\001\002\000\004\020" +
    "\255\001\002\000\004\042\256\001\002\000\032\003\uff74" +
    "\011\uff74\012\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\046\uff74\047\uff74\051\uff74\001\002\000\020" +
    "\012\042\016\052\017\036\020\037\046\045\047\054\051" +
    "\044\001\002\000\020\012\042\016\052\017\036\020\037" +
    "\046\045\047\054\051\044\001\002\000\010\003\uff84\011" +
    "\uff84\021\106\001\002\000\006\003\263\011\264\001\002" +
    "\000\004\020\272\001\002\000\006\003\265\020\266\001" +
    "\002\000\004\042\271\001\002\000\006\003\267\042\270" +
    "\001\002\000\032\003\uff62\011\uff62\012\uff62\014\uff62\015" +
    "\uff62\016\uff62\017\uff62\020\uff62\021\uff62\046\uff62\047\uff62" +
    "\051\uff62\001\002\000\032\003\uff68\011\uff68\012\uff68\014" +
    "\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\046\uff68" +
    "\047\uff68\051\uff68\001\002\000\032\003\uff63\011\uff63\012" +
    "\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63" +
    "\046\uff63\047\uff63\051\uff63\001\002\000\004\042\273\001" +
    "\002\000\032\003\uff64\011\uff64\012\uff64\014\uff64\015\uff64" +
    "\016\uff64\017\uff64\020\uff64\021\uff64\046\uff64\047\uff64\051" +
    "\uff64\001\002\000\006\011\uff84\021\106\001\002\000\004" +
    "\011\276\001\002\000\004\020\277\001\002\000\004\042" +
    "\300\001\002\000\032\003\uff65\011\uff65\012\uff65\014\uff65" +
    "\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\046\uff65\047" +
    "\uff65\051\uff65\001\002\000\004\020\311\001\002\000\004" +
    "\020\303\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\006\011\uff84" +
    "\021\106\001\002\000\004\011\306\001\002\000\004\020" +
    "\307\001\002\000\004\042\310\001\002\000\032\003\uff76" +
    "\011\uff76\012\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020" +
    "\uff76\021\uff76\046\uff76\047\uff76\051\uff76\001\002\000\020" +
    "\012\042\016\052\017\036\020\037\046\045\047\054\051" +
    "\044\001\002\000\006\011\uff84\021\106\001\002\000\004" +
    "\011\314\001\002\000\004\020\315\001\002\000\004\042" +
    "\316\001\002\000\032\003\uff66\011\uff66\012\uff66\014\uff66" +
    "\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66\046\uff66\047" +
    "\uff66\051\uff66\001\002\000\006\050\376\051\377\001\002" +
    "\000\010\003\323\050\322\051\321\001\002\000\006\003" +
    "\354\020\355\001\002\000\006\003\332\020\333\001\002" +
    "\000\004\020\324\001\002\000\020\012\042\016\052\017" +
    "\036\020\037\046\045\047\054\051\044\001\002\000\006" +
    "\011\uff84\021\106\001\002\000\004\011\327\001\002\000" +
    "\004\020\330\001\002\000\004\042\331\001\002\000\032" +
    "\003\uff7d\011\uff7d\012\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\046\uff7d\047\uff7d\051\uff7d\001\002" +
    "\000\020\012\042\016\052\017\036\020\037\046\045\047" +
    "\054\051\044\001\002\000\020\012\042\016\052\017\036" +
    "\020\037\046\045\047\054\051\044\001\002\000\010\003" +
    "\uff84\011\uff84\021\106\001\002\000\006\003\336\011\337" +
    "\001\002\000\004\020\345\001\002\000\006\003\340\020" +
    "\341\001\002\000\004\042\344\001\002\000\006\003\342" +
    "\042\343\001\002\000\032\003\uff79\011\uff79\012\uff79\014" +
    "\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\046\uff79" +
    "\047\uff79\051\uff79\001\002\000\032\003\uff81\011\uff81\012" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\046\uff81\047\uff81\051\uff81\001\002\000\032\003\uff7a\011" +
    "\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\046\uff7a\047\uff7a\051\uff7a\001\002\000\004\042" +
    "\346\001\002\000\032\003\uff7b\011\uff7b\012\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\046\uff7b\047" +
    "\uff7b\051\uff7b\001\002\000\006\011\uff84\021\106\001\002" +
    "\000\004\011\351\001\002\000\004\020\352\001\002\000" +
    "\004\042\353\001\002\000\032\003\uff7c\011\uff7c\012\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\046" +
    "\uff7c\047\uff7c\051\uff7c\001\002\000\020\012\042\016\052" +
    "\017\036\020\037\046\045\047\054\051\044\001\002\000" +
    "\020\012\042\016\052\017\036\020\037\046\045\047\054" +
    "\051\044\001\002\000\010\003\uff84\011\uff84\021\106\001" +
    "\002\000\006\003\360\011\361\001\002\000\004\020\367" +
    "\001\002\000\006\003\362\020\363\001\002\000\004\042" +
    "\366\001\002\000\006\003\364\042\365\001\002\000\032" +
    "\003\uff69\011\uff69\012\uff69\014\uff69\015\uff69\016\uff69\017" +
    "\uff69\020\uff69\021\uff69\046\uff69\047\uff69\051\uff69\001\002" +
    "\000\032\003\uff70\011\uff70\012\uff70\014\uff70\015\uff70\016" +
    "\uff70\017\uff70\020\uff70\021\uff70\046\uff70\047\uff70\051\uff70" +
    "\001\002\000\032\003\uff6a\011\uff6a\012\uff6a\014\uff6a\015" +
    "\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\046\uff6a\047\uff6a" +
    "\051\uff6a\001\002\000\004\042\370\001\002\000\032\003" +
    "\uff6b\011\uff6b\012\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b" +
    "\020\uff6b\021\uff6b\046\uff6b\047\uff6b\051\uff6b\001\002\000" +
    "\006\011\uff84\021\106\001\002\000\004\011\373\001\002" +
    "\000\004\020\374\001\002\000\004\042\375\001\002\000" +
    "\032\003\uff6c\011\uff6c\012\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\046\uff6c\047\uff6c\051\uff6c\001" +
    "\002\000\004\020\u0106\001\002\000\004\020\u0100\001\002" +
    "\000\020\012\042\016\052\017\036\020\037\046\045\047" +
    "\054\051\044\001\002\000\006\011\uff84\021\106\001\002" +
    "\000\004\011\u0103\001\002\000\004\020\u0104\001\002\000" +
    "\004\042\u0105\001\002\000\032\003\uff6d\011\uff6d\012\uff6d" +
    "\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\046" +
    "\uff6d\047\uff6d\051\uff6d\001\002\000\020\012\042\016\052" +
    "\017\036\020\037\046\045\047\054\051\044\001\002\000" +
    "\006\011\uff84\021\106\001\002\000\004\011\u0109\001\002" +
    "\000\004\020\u010a\001\002\000\004\042\u010b\001\002\000" +
    "\032\003\uff7e\011\uff7e\012\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\046\uff7e\047\uff7e\051\uff7e\001" +
    "\002\000\014\003\uffcf\011\uffcf\014\uffcf\015\uffcf\021\uffcf" +
    "\001\002\000\004\051\u0114\001\002\000\006\003\u0110\051" +
    "\u010f\001\002\000\006\003\u0112\042\u0113\001\002\000\004" +
    "\042\u0111\001\002\000\004\002\ufff0\001\002\000\004\002" +
    "\uffef\001\002\000\004\002\ufff3\001\002\000\004\042\u0115" +
    "\001\002\000\004\002\ufff1\001\002\000\004\051\u0117\001" +
    "\002\000\004\042\u0118\001\002\000\004\002\uffee\001\002" +
    "\000\014\003\uffd3\011\uffd3\014\uffd3\015\uffd3\021\uffd3\001" +
    "\002\000\006\050\u012b\052\u012c\001\002\000\010\003\u011d" +
    "\050\u011c\052\u011e\001\002\000\006\003\u0126\041\u0127\001" +
    "\002\000\004\041\u0124\001\002\000\006\003\u0120\041\u011f" +
    "\001\002\000\006\003\u0122\042\u0123\001\002\000\004\042" +
    "\u0121\001\002\000\032\003\uff47\011\uff47\012\uff47\014\uff47" +
    "\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\046\uff47\047" +
    "\uff47\051\uff47\001\002\000\032\003\uff46\011\uff46\012\uff46" +
    "\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\046" +
    "\uff46\047\uff46\051\uff46\001\002\000\032\003\uff49\011\uff49" +
    "\012\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021" +
    "\uff49\046\uff49\047\uff49\051\uff49\001\002\000\004\042\u0125" +
    "\001\002\000\032\003\uff4c\011\uff4c\012\uff4c\014\uff4c\015" +
    "\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\046\uff4c\047\uff4c" +
    "\051\uff4c\001\002\000\004\042\u012a\001\002\000\006\003" +
    "\u0128\042\u0129\001\002\000\032\003\uff4a\011\uff4a\012\uff4a" +
    "\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a\046" +
    "\uff4a\047\uff4a\051\uff4a\001\002\000\032\003\uff4e\011\uff4e" +
    "\012\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021" +
    "\uff4e\046\uff4e\047\uff4e\051\uff4e\001\002\000\032\003\uff4b" +
    "\011\uff4b\012\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020" +
    "\uff4b\021\uff4b\046\uff4b\047\uff4b\051\uff4b\001\002\000\004" +
    "\041\u012f\001\002\000\004\041\u012d\001\002\000\004\042" +
    "\u012e\001\002\000\032\003\uff48\011\uff48\012\uff48\014\uff48" +
    "\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\046\uff48\047" +
    "\uff48\051\uff48\001\002\000\004\042\u0130\001\002\000\032" +
    "\003\uff4d\011\uff4d\012\uff4d\014\uff4d\015\uff4d\016\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\046\uff4d\047\uff4d\051\uff4d\001\002" +
    "\000\020\003\u014b\025\u0149\026\u014a\040\u0137\050\u0133\051" +
    "\u0139\052\u0148\001\002\000\016\025\u0135\026\u0138\040\u0137" +
    "\050\u0133\051\u0139\052\u0134\001\002\000\014\003\uff8f\034" +
    "\uff8f\035\uff8f\041\uff8f\042\uff8f\001\002\000\004\042\u0147" +
    "\001\002\000\004\042\u0146\001\002\000\014\003\uff92\034" +
    "\uff92\035\u0140\041\uff92\042\uff92\001\002\000\006\040\u0137" +
    "\050\u0133\001\002\000\004\042\u0143\001\002\000\004\040" +
    "\122\001\002\000\004\042\u0142\001\002\000\014\003\uff90" +
    "\034\uff90\035\uff90\041\uff90\042\uff90\001\002\000\006\034" +
    "\u013d\042\u013e\001\002\000\006\040\u0137\050\u0133\001\002" +
    "\000\032\003\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\046\uffa2\047\uffa2\051\uffa2" +
    "\001\002\000\014\003\uff93\034\uff93\035\u0140\041\uff93\042" +
    "\uff93\001\002\000\006\040\u0137\050\u0133\001\002\000\014" +
    "\003\uff91\034\uff91\035\uff91\041\uff91\042\uff91\001\002\000" +
    "\032\003\uff9e\011\uff9e\012\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\046\uff9e\047\uff9e\051\uff9e\001" +
    "\002\000\032\003\uff95\011\uff95\012\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\020\uff95\021\uff95\046\uff95\047\uff95\051" +
    "\uff95\001\002\000\006\034\u013d\041\u0145\001\002\000\014" +
    "\003\uff8e\034\uff8e\035\uff8e\041\uff8e\042\uff8e\001\002\000" +
    "\032\003\uff98\011\uff98\012\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\046\uff98\047\uff98\051\uff98\001" +
    "\002\000\032\003\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\046\uff9b\047\uff9b\051" +
    "\uff9b\001\002\000\006\003\u0157\042\u0158\001\002\000\006" +
    "\003\u0155\042\u0156\001\002\000\006\003\u0153\042\u0154\001" +
    "\002\000\004\042\u0152\001\002\000\006\003\u0150\042\u0151" +
    "\001\002\000\010\003\u014e\034\u013d\042\u014f\001\002\000" +
    "\032\003\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\046\uffa0\047\uffa0\051\uffa0\001" +
    "\002\000\032\003\uffa3\011\uffa3\012\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\046\uffa3\047\uffa3\051" +
    "\uffa3\001\002\000\032\003\uff9d\011\uff9d\012\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\046\uff9d\047" +
    "\uff9d\051\uff9d\001\002\000\032\003\uff9f\011\uff9f\012\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\046" +
    "\uff9f\047\uff9f\051\uff9f\001\002\000\032\003\uffa1\011\uffa1" +
    "\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\046\uffa1\047\uffa1\051\uffa1\001\002\000\032\003\uff94" +
    "\011\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\046\uff94\047\uff94\051\uff94\001\002\000\032" +
    "\003\uff96\011\uff96\012\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\046\uff96\047\uff96\051\uff96\001\002" +
    "\000\032\003\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\046\uff97\047\uff97\051\uff97" +
    "\001\002\000\032\003\uff99\011\uff99\012\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\046\uff99\047\uff99" +
    "\051\uff99\001\002\000\032\003\uff9a\011\uff9a\012\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\046\uff9a" +
    "\047\uff9a\051\uff9a\001\002\000\032\003\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\046\uff9c\047\uff9c\051\uff9c\001\002\000\032\003\uff3f\011" +
    "\uff3f\012\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f" +
    "\021\uff3f\046\uff3f\047\uff3f\051\uff3f\001\002\000\032\003" +
    "\uff40\011\uff40\012\uff40\014\uff40\015\uff40\016\uff40\017\uff40" +
    "\020\uff40\021\uff40\046\uff40\047\uff40\051\uff40\001\002\000" +
    "\006\003\u015c\013\u015d\001\002\000\020\012\042\016\052" +
    "\017\036\020\037\046\045\047\054\051\044\001\002\000" +
    "\020\012\042\016\052\017\036\020\037\046\045\047\054" +
    "\051\044\001\002\000\012\003\uff5b\011\uff5b\014\uff5b\015" +
    "\u0160\001\002\000\010\003\uff58\011\uff58\014\u0169\001\002" +
    "\000\010\003\115\050\111\051\114\001\002\000\006\003" +
    "\u0163\013\u0162\001\002\000\020\012\042\016\052\017\036" +
    "\020\037\046\045\047\054\051\044\001\002\000\020\012" +
    "\042\016\052\017\036\020\037\046\045\047\054\051\044" +
    "\001\002\000\012\003\uff5b\011\uff5b\014\uff5b\015\u0160\001" +
    "\002\000\010\003\uff5a\011\uff5a\014\uff5a\001\002\000\012" +
    "\003\uff5b\011\uff5b\014\uff5b\015\u0160\001\002\000\010\003" +
    "\uff5c\011\uff5c\014\uff5c\001\002\000\006\003\u016b\011\u016c" +
    "\001\002\000\020\012\042\016\052\017\036\020\037\046" +
    "\045\047\054\051\044\001\002\000\006\003\uff59\011\uff59" +
    "\001\002\000\004\012\u0172\001\002\000\006\003\u016d\012" +
    "\u016e\001\002\000\004\042\u0171\001\002\000\006\003\u016f" +
    "\042\u0170\001\002\000\032\003\uff5d\011\uff5d\012\uff5d\014" +
    "\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\046\uff5d" +
    "\047\uff5d\051\uff5d\001\002\000\032\003\uff61\011\uff61\012" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\046\uff61\047\uff61\051\uff61\001\002\000\032\003\uff5e\011" +
    "\uff5e\012\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\046\uff5e\047\uff5e\051\uff5e\001\002\000\004\042" +
    "\u0173\001\002\000\032\003\uff5f\011\uff5f\012\uff5f\014\uff5f" +
    "\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\046\uff5f\047" +
    "\uff5f\051\uff5f\001\002\000\010\011\uff5b\014\uff5b\015\u0160" +
    "\001\002\000\006\011\uff58\014\u0169\001\002\000\004\011" +
    "\u0177\001\002\000\004\012\u0178\001\002\000\004\042\u0179" +
    "\001\002\000\032\003\uff60\011\uff60\012\uff60\014\uff60\015" +
    "\uff60\016\uff60\017\uff60\020\uff60\021\uff60\046\uff60\047\uff60" +
    "\051\uff60\001\002\000\014\003\uffc9\011\uffc9\014\uffc9\015" +
    "\uffc9\021\uffc9\001\002\000\014\003\uffcb\011\uffcb\014\uffcb" +
    "\015\uffcb\021\uffcb\001\002\000\010\003\uff84\011\uff84\021" +
    "\106\001\002\000\006\003\u017e\011\u017f\001\002\000\004" +
    "\020\u0183\001\002\000\004\020\u0180\001\002\000\006\003" +
    "\u0181\042\u0182\001\002\000\032\003\uff8b\011\uff8b\012\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\046" +
    "\uff8b\047\uff8b\051\uff8b\001\002\000\032\003\uff8d\011\uff8d" +
    "\012\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\046\uff8d\047\uff8d\051\uff8d\001\002\000\004\042\u0184" +
    "\001\002\000\032\003\uff8c\011\uff8c\012\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\046\uff8c\047\uff8c" +
    "\051\uff8c\001\002\000\006\003\u0186\020\u0187\001\002\000" +
    "\020\012\042\016\052\017\036\020\037\046\045\047\054" +
    "\051\044\001\002\000\020\012\042\016\052\017\036\020" +
    "\037\046\045\047\054\051\044\001\002\000\010\003\uff84" +
    "\011\uff84\021\106\001\002\000\006\003\u018a\011\u018b\001" +
    "\002\000\004\020\u0191\001\002\000\006\003\u018c\020\u018d" +
    "\001\002\000\004\042\u0190\001\002\000\006\003\u018e\042" +
    "\u018f\001\002\000\032\003\uff86\011\uff86\012\uff86\014\uff86" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\046\uff86\047" +
    "\uff86\051\uff86\001\002\000\032\003\uff8a\011\uff8a\012\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\046" +
    "\uff8a\047\uff8a\051\uff8a\001\002\000\032\003\uff87\011\uff87" +
    "\012\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\046\uff87\047\uff87\051\uff87\001\002\000\004\042\u0192" +
    "\001\002\000\032\003\uff88\011\uff88\012\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\046\uff88\047\uff88" +
    "\051\uff88\001\002\000\006\011\uff84\021\106\001\002\000" +
    "\004\011\u0195\001\002\000\004\020\u0196\001\002\000\004" +
    "\042\u0197\001\002\000\032\003\uff89\011\uff89\012\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\046\uff89" +
    "\047\uff89\051\uff89\001\002\000\014\003\uffd1\011\uffd1\014" +
    "\uffd1\015\uffd1\021\uffd1\001\002\000\014\003\uffcd\011\uffcd" +
    "\014\uffcd\015\uffcd\021\uffcd\001\002\000\014\003\uffc5\011" +
    "\uffc5\014\uffc5\015\uffc5\021\uffc5\001\002\000\006\003\u019d" +
    "\040\u019e\001\002\000\006\003\u019d\040\u019e\001\002\000" +
    "\006\003\u01af\051\u01ae\001\002\000\006\003\u01af\051\u01ae" +
    "\001\002\000\004\006\u01a0\001\002\000\012\003\u01a2\031" +
    "\u01a5\032\u01a3\033\u01a4\001\002\000\006\007\u01a6\042\u01a7" +
    "\001\002\000\012\003\uffe0\007\uffe0\041\uffe0\042\uffe0\001" +
    "\002\000\012\003\uffe2\007\uffe2\041\uffe2\042\uffe2\001\002" +
    "\000\012\003\uffe1\007\uffe1\041\uffe1\042\uffe1\001\002\000" +
    "\012\003\uffe3\007\uffe3\041\uffe3\042\uffe3\001\002\000\010" +
    "\004\022\005\027\051\025\001\002\000\014\003\uffd6\004" +
    "\uffd6\005\uffd6\010\uffd6\051\uffd6\001\002\000\004\010\u01a9" +
    "\001\002\000\020\012\042\016\052\017\036\020\037\046" +
    "\045\047\054\051\044\001\002\000\004\011\u01ab\001\002" +
    "\000\004\051\u01ac\001\002\000\004\042\u01ad\001\002\000" +
    "\014\003\uffbc\004\uffbc\005\uffbc\010\uffbc\051\uffbc\001\002" +
    "\000\010\003\uffaa\037\uffaa\044\u01c3\001\002\000\010\003" +
    "\uffa9\037\uffa9\044\u01c1\001\002\000\006\003\u01bf\041\u01c0" +
    "\001\002\000\006\003\u01b2\037\u01b3\001\002\000\016\003" +
    "\uffa4\027\u01b5\030\u01b4\031\uffa4\032\uffa4\033\uffa4\001\002" +
    "\000\016\003\uffa4\027\u01b5\030\u01b4\031\uffa4\032\uffa4\033" +
    "\uffa4\001\002\000\012\003\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\001\002\000\014\003\uffa7\030\u01ba\031\uffa7\032\uffa7\033" +
    "\uffa7\001\002\000\012\003\u01a2\031\u01a5\032\u01a3\033\u01a4" +
    "\001\002\000\010\003\uffad\041\uffad\042\u01b8\001\002\000" +
    "\006\003\u01af\051\u01ae\001\002\000\006\003\uffaf\041\uffaf" +
    "\001\002\000\012\003\uffa5\031\uffa5\032\uffa5\033\uffa5\001" +
    "\002\000\012\003\u01a2\031\u01a5\032\u01a3\033\u01a4\001\002" +
    "\000\010\003\uffac\041\uffac\042\u01bd\001\002\000\006\003" +
    "\u01af\051\u01ae\001\002\000\006\003\uffae\041\uffae\001\002" +
    "\000\012\003\uffb0\006\uffb0\007\uffb0\042\uffb0\001\002\000" +
    "\012\003\uffb2\006\uffb2\007\uffb2\042\uffb2\001\002\000\006" +
    "\003\u01af\051\u01ae\001\002\000\006\003\uffa8\037\uffa8\001" +
    "\002\000\006\003\u01af\051\u01ae\001\002\000\006\003\uffab" +
    "\037\uffab\001\002\000\004\041\u01c6\001\002\000\012\003" +
    "\uffb1\006\uffb1\007\uffb1\042\uffb1\001\002\000\006\003\u01c8" +
    "\006\u01c9\001\002\000\012\003\u01a2\031\u01a5\032\u01a3\033" +
    "\u01a4\001\002\000\012\003\u01a2\031\u01a5\032\u01a3\033\u01a4" +
    "\001\002\000\010\003\u01cb\007\u01cc\042\u01cd\001\002\000" +
    "\014\003\uffd4\004\uffd4\005\uffd4\010\uffd4\051\uffd4\001\002" +
    "\000\010\004\022\005\027\051\025\001\002\000\014\003" +
    "\uffd7\004\uffd7\005\uffd7\010\uffd7\051\uffd7\001\002\000\006" +
    "\003\u01cf\010\u01d0\001\002\000\020\012\042\016\052\017" +
    "\036\020\037\046\045\047\054\051\044\001\002\000\020" +
    "\012\042\016\052\017\036\020\037\046\045\047\054\051" +
    "\044\001\002\000\006\003\u01d2\011\u01d3\001\002\000\004" +
    "\051\u01d9\001\002\000\006\003\u01d5\051\u01d4\001\002\000" +
    "\006\003\u01d7\042\u01d8\001\002\000\004\042\u01d6\001\002" +
    "\000\014\003\uffb8\004\uffb8\005\uffb8\010\uffb8\051\uffb8\001" +
    "\002\000\014\003\uffb7\004\uffb7\005\uffb7\010\uffb7\051\uffb7" +
    "\001\002\000\014\003\uffbd\004\uffbd\005\uffbd\010\uffbd\051" +
    "\uffbd\001\002\000\004\042\u01da\001\002\000\014\003\uffb9" +
    "\004\uffb9\005\uffb9\010\uffb9\051\uffb9\001\002\000\004\011" +
    "\u01dc\001\002\000\004\051\u01dd\001\002\000\004\042\u01de" +
    "\001\002\000\014\003\uffba\004\uffba\005\uffba\010\uffba\051" +
    "\uffba\001\002\000\006\007\u01e0\042\u01e1\001\002\000\010" +
    "\004\022\005\027\051\025\001\002\000\014\003\uffd5\004" +
    "\uffd5\005\uffd5\010\uffd5\051\uffd5\001\002\000\004\010\u01e3" +
    "\001\002\000\020\012\042\016\052\017\036\020\037\046" +
    "\045\047\054\051\044\001\002\000\004\011\u01e5\001\002" +
    "\000\004\051\u01e6\001\002\000\004\042\u01e7\001\002\000" +
    "\014\003\uffbb\004\uffbb\005\uffbb\010\uffbb\051\uffbb\001\002" +
    "\000\004\011\u01e9\001\002\000\004\051\u01ea\001\002\000" +
    "\004\042\u01eb\001\002\000\004\002\ufff2\001\002\000\004" +
    "\051\025\001\002\000\014\003\u01a2\031\u01a5\032\u01a3\033" +
    "\u01a4\051\025\001\002\000\012\003\u01a2\031\u01a5\032\u01a3" +
    "\033\u01a4\001\002\000\006\003\u01f0\042\u01f1\001\002\000" +
    "\014\003\uffd8\004\uffd8\005\uffd8\010\uffd8\051\uffd8\001\002" +
    "\000\014\003\uffda\004\uffda\005\uffda\010\uffda\051\uffda\001" +
    "\002\000\004\042\u01f4\001\002\000\014\003\uffdb\004\uffdb" +
    "\005\uffdb\010\uffdb\051\uffdb\001\002\000\014\003\uffd9\004" +
    "\uffd9\005\uffd9\010\uffd9\051\uffd9\001\002\000\014\003\uffdc" +
    "\004\uffdc\005\uffdc\010\uffdc\051\uffdc\001\002\000\006\003" +
    "\uffed\010\uffed\001\002\000\020\012\042\016\052\017\036" +
    "\020\037\046\045\047\054\051\044\001\002\000\022\003" +
    "\u01f9\012\042\016\052\017\036\020\037\046\045\047\054" +
    "\051\044\001\002\000\004\011\u0204\001\002\000\006\003" +
    "\u01fb\011\u01fc\001\002\000\004\051\u0202\001\002\000\006" +
    "\003\u01fe\051\u01fd\001\002\000\006\003\u0200\042\u0201\001" +
    "\002\000\004\042\u01ff\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\ufff5\001\002\000\004\002\ufff9\001\002\000" +
    "\004\042\u0203\001\002\000\004\002\ufff7\001\002\000\004" +
    "\051\u0205\001\002\000\004\042\u0206\001\002\000\004\002" +
    "\ufff4\001\002\000\004\011\u0208\001\002\000\004\051\u0209" +
    "\001\002\000\004\042\u020a\001\002\000\004\002\ufff8\001" +
    "\002\000\006\003\u019d\040\u019e\001\002\000\006\003\u019d" +
    "\040\u019e\001\002\000\006\007\u020e\042\u020f\001\002\000" +
    "\010\004\022\005\027\051\025\001\002\000\014\003\uffde" +
    "\004\uffde\005\uffde\010\uffde\051\uffde\001\002\000\004\010" +
    "\u0211\001\002\000\020\012\042\016\052\017\036\020\037" +
    "\046\045\047\054\051\044\001\002\000\004\011\u0213\001" +
    "\002\000\004\051\u0214\001\002\000\004\042\u0215\001\002" +
    "\000\014\003\uffc2\004\uffc2\005\uffc2\010\uffc2\051\uffc2\001" +
    "\002\000\010\003\u0217\007\u0218\042\u0219\001\002\000\014" +
    "\003\uffdd\004\uffdd\005\uffdd\010\uffdd\051\uffdd\001\002\000" +
    "\010\004\022\005\027\051\025\001\002\000\014\003\uffdf" +
    "\004\uffdf\005\uffdf\010\uffdf\051\uffdf\001\002\000\006\003" +
    "\u021b\010\u021c\001\002\000\020\012\042\016\052\017\036" +
    "\020\037\046\045\047\054\051\044\001\002\000\020\012" +
    "\042\016\052\017\036\020\037\046\045\047\054\051\044" +
    "\001\002\000\006\003\u021e\011\u021f\001\002\000\004\051" +
    "\u0225\001\002\000\006\003\u0221\051\u0220\001\002\000\006" +
    "\003\u0223\042\u0224\001\002\000\004\042\u0222\001\002\000" +
    "\014\003\uffbf\004\uffbf\005\uffbf\010\uffbf\051\uffbf\001\002" +
    "\000\014\003\uffbe\004\uffbe\005\uffbe\010\uffbe\051\uffbe\001" +
    "\002\000\014\003\uffc3\004\uffc3\005\uffc3\010\uffc3\051\uffc3" +
    "\001\002\000\004\042\u0226\001\002\000\014\003\uffc0\004" +
    "\uffc0\005\uffc0\010\uffc0\051\uffc0\001\002\000\004\011\u0228" +
    "\001\002\000\004\051\u0229\001\002\000\004\042\u022a\001" +
    "\002\000\014\003\uffc1\004\uffc1\005\uffc1\010\uffc1\051\uffc1" +
    "\001\002\000\006\003\uffe9\010\uffe9\001\002\000\006\003" +
    "\uffe7\010\uffe7\001\002\000\006\003\uffe5\010\uffe5\001\002" +
    "\000\004\041\uffb6\001\002\000\004\041\u0230\001\002\000" +
    "\010\003\uffb5\006\uffb5\007\uffb5\001\002\000\004\003\u0232" +
    "\001\002\000\010\003\uffb3\006\uffb3\007\uffb3\001\002\000" +
    "\006\003\u0235\006\u0234\001\002\000\012\003\u01a2\031\u01a5" +
    "\032\u01a3\033\u01a4\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\004\002\ufffa\001\002" +
    "\000\004\007\u0238\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\001\001\002\000\010\007\uffb4\040\013\041" +
    "\012\001\002\000\004\007\u023d\001\002\000\014\003\026" +
    "\004\022\005\027\010\030\051\025\001\002\000\004\002" +
    "\uffff\001\002\000\012\003\uffb4\007\uffb4\040\013\041\012" +
    "\001\002\000\010\007\uffb4\040\013\041\012\001\002\000" +
    "\004\007\u0242\001\002\000\014\003\026\004\022\005\027" +
    "\010\030\051\025\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\u0245\007\u0246\001\002\000\014\003\026\004\022" +
    "\005\027\010\030\051\025\001\002\000\014\003\026\004" +
    "\022\005\027\010\030\051\025\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0246\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0232\001\001\000\004\013\013\001\001\000\006\015" +
    "\u0230\016\u01b0\001\001\000\006\015\u022d\016\u01b0\001\001" +
    "\000\002\001\001\000\020\003\020\005\022\006\017\007" +
    "\030\010\023\011\015\012\016\001\001\000\016\005\u022c" +
    "\006\017\007\030\010\023\011\015\012\016\001\001\000" +
    "\016\005\u022b\006\017\007\030\010\023\011\015\012\016" +
    "\001\001\000\016\005\u022a\006\017\007\030\010\023\011" +
    "\015\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u01f5\006\017\007\030\010" +
    "\023\011\015\012\016\001\001\000\002\001\001\000\026" +
    "\004\u01e7\020\037\021\033\022\034\024\050\027\032\030" +
    "\042\035\045\036\040\037\052\001\001\000\002\001\001" +
    "\000\026\004\047\020\037\021\033\022\034\024\050\027" +
    "\032\030\042\035\045\036\040\037\052\001\001\000\016" +
    "\005\031\006\017\007\030\010\023\011\015\012\016\001" +
    "\001\000\002\001\001\000\026\004\u0199\020\037\021\033" +
    "\022\034\024\050\027\032\030\042\035\045\036\040\037" +
    "\052\001\001\000\026\004\u0198\020\037\021\033\022\034" +
    "\024\050\027\032\030\042\035\045\036\040\037\052\001" +
    "\001\000\026\004\u0197\020\037\021\033\022\034\024\050" +
    "\027\032\030\042\035\045\036\040\037\052\001\001\000" +
    "\012\030\115\032\u0184\033\111\034\112\001\001\000\026" +
    "\004\u017b\020\037\021\033\022\034\024\050\027\032\030" +
    "\042\035\045\036\040\037\052\001\001\000\026\004\u017a" +
    "\020\037\021\033\022\034\024\050\027\032\030\042\035" +
    "\045\036\040\037\052\001\001\000\026\004\u0179\020\037" +
    "\021\033\022\034\024\050\027\032\030\042\035\045\036" +
    "\040\037\052\001\001\000\012\030\115\032\u015a\033\111" +
    "\034\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u0118\020\037\021\033\022\034" +
    "\024\050\027\032\030\042\035\045\036\040\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u010b" +
    "\020\037\021\033\022\034\024\050\027\032\030\042\035" +
    "\045\036\040\037\052\001\001\000\002\001\001\000\026" +
    "\004\072\020\037\021\033\022\034\024\050\027\032\030" +
    "\042\035\045\036\040\037\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\103\020\037\021\033\022\034\024\050\027\032\030\042" +
    "\035\045\036\040\037\052\001\001\000\004\023\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\115" +
    "\032\145\033\111\034\112\001\001\000\012\030\115\032" +
    "\116\033\111\034\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\133\001\001\000\002" +
    "\001\001\000\004\031\135\001\001\000\002\001\001\000" +
    "\012\030\115\032\141\033\111\034\112\001\001\000\012" +
    "\030\115\032\140\033\111\034\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\115\033\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\153\020\037\021\033\022\034\024" +
    "\050\027\032\030\042\035\045\036\040\037\052\001\001" +
    "\000\004\023\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\164\020" +
    "\037\021\033\022\034\024\050\027\032\030\042\035\045" +
    "\036\040\037\052\001\001\000\004\023\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\172\020\037\021\033\022\034\024" +
    "\050\027\032\030\042\035\045\036\040\037\052\001\001" +
    "\000\004\023\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\206\020\037" +
    "\021\033\022\034\024\050\027\032\030\042\035\045\036" +
    "\040\037\052\001\001\000\004\023\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\214\020\037\021\033\022\034\024\050" +
    "\027\032\030\042\035\045\036\040\037\052\001\001\000" +
    "\004\023\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\227\020\037\021\033\022\034\024" +
    "\050\027\032\030\042\035\045\036\040\037\052\001\001" +
    "\000\004\023\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\251" +
    "\020\037\021\033\022\034\024\050\027\032\030\042\035" +
    "\045\036\040\037\052\001\001\000\026\004\236\020\037" +
    "\021\033\022\034\024\050\027\032\030\042\035\045\036" +
    "\040\037\052\001\001\000\004\023\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\273\020" +
    "\037\021\033\022\034\024\050\027\032\030\042\035\045" +
    "\036\040\037\052\001\001\000\026\004\260\020\037\021" +
    "\033\022\034\024\050\027\032\030\042\035\045\036\040" +
    "\037\052\001\001\000\004\023\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\303\020\037\021\033\022\034\024" +
    "\050\027\032\030\042\035\045\036\040\037\052\001\001" +
    "\000\004\023\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\311" +
    "\020\037\021\033\022\034\024\050\027\032\030\042\035" +
    "\045\036\040\037\052\001\001\000\004\023\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\324\020\037\021\033\022\034\024\050\027\032\030\042" +
    "\035\045\036\040\037\052\001\001\000\004\023\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\346\020\037\021\033\022" +
    "\034\024\050\027\032\030\042\035\045\036\040\037\052" +
    "\001\001\000\026\004\333\020\037\021\033\022\034\024" +
    "\050\027\032\030\042\035\045\036\040\037\052\001\001" +
    "\000\004\023\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\370\020\037\021\033\022\034" +
    "\024\050\027\032\030\042\035\045\036\040\037\052\001" +
    "\001\000\026\004\355\020\037\021\033\022\034\024\050" +
    "\027\032\030\042\035\045\036\040\037\052\001\001\000" +
    "\004\023\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u0100\020\037\021\033\022\034\024\050\027\032\030\042" +
    "\035\045\036\040\037\052\001\001\000\004\023\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u0106\020\037\021\033\022" +
    "\034\024\050\027\032\030\042\035\045\036\040\037\052" +
    "\001\001\000\004\023\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\u014b\040\u014c\041\u0135\042\u013a" +
    "\001\001\000\012\030\u0139\040\u013b\041\u0135\042\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\u0143\041\u0135\042\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\u013e\042" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u0173\020" +
    "\037\021\033\022\034\024\050\027\032\030\042\035\045" +
    "\036\040\037\052\001\001\000\026\004\u015d\020\037\021" +
    "\033\022\034\024\050\027\032\030\042\035\045\036\040" +
    "\037\052\001\001\000\004\025\u015e\001\001\000\004\026" +
    "\u0167\001\001\000\012\030\115\032\u0160\033\111\034\112" +
    "\001\001\000\002\001\001\000\026\004\u0165\020\037\021" +
    "\033\022\034\024\050\027\032\030\042\035\045\036\040" +
    "\037\052\001\001\000\026\004\u0163\020\037\021\033\022" +
    "\034\024\050\027\032\030\042\035\045\036\040\037\052" +
    "\001\001\000\004\025\u0164\001\001\000\002\001\001\000" +
    "\004\025\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\u0169\020\037\021\033\022\034\024\050\027" +
    "\032\030\042\035\045\036\040\037\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0174\001\001\000\004\026\u0175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u017c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\u0192\020\037\021\033\022\034\024\050\027\032" +
    "\030\042\035\045\036\040\037\052\001\001\000\026\004" +
    "\u0187\020\037\021\033\022\034\024\050\027\032\030\042" +
    "\035\045\036\040\037\052\001\001\000\004\023\u0188\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0193\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u01c6\001\001\000\004\014\u019e\001\001\000\006\015\u01c4" +
    "\016\u01b0\001\001\000\006\015\u01af\016\u01b0\001\001\000" +
    "\002\001\001\000\004\043\u01a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u01a7\006\017\007\030\010\023" +
    "\011\015\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u01a9\020\037\021\033\022\034\024\050" +
    "\027\032\030\042\035\045\036\040\037\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u01ba\001\001\000\004" +
    "\017\u01b5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u01b6\001\001\000\002\001\001\000\006\015\u01b8" +
    "\016\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u01bb\001\001\000\002\001\001\000\006\015\u01bd" +
    "\016\u01b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01c1\001\001\000\002\001\001" +
    "\000\004\016\u01c3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u01de" +
    "\001\001\000\004\043\u01c9\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u01cd\006\017\007\030\010\023" +
    "\011\015\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\u01da\020\037\021\033\022\034\024\050" +
    "\027\032\030\042\035\045\036\040\037\052\001\001\000" +
    "\026\004\u01d0\020\037\021\033\022\034\024\050\027\032" +
    "\030\042\035\045\036\040\037\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\u01e1\006\017\007\030" +
    "\010\023\011\015\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u01e3\020\037\021\033\022\034" +
    "\024\050\027\032\030\042\035\045\036\040\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u01f4\001\001" +
    "\000\006\007\u01f2\043\u01f1\001\001\000\004\043\u01ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\u0206\020\037" +
    "\021\033\022\034\024\050\027\032\030\042\035\045\036" +
    "\040\037\052\001\001\000\026\004\u01f9\020\037\021\033" +
    "\022\034\024\050\027\032\030\042\035\045\036\040\037" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0215\001\001\000\004\014\u020c\001\001\000\002\001\001" +
    "\000\016\005\u020f\006\017\007\030\010\023\011\015\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\u0211\020\037\021\033\022\034\024\050\027\032\030" +
    "\042\035\045\036\040\037\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\u0219\006\017" +
    "\007\030\010\023\011\015\012\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u0226\020\037\021\033" +
    "\022\034\024\050\027\032\030\042\035\045\036\040\037" +
    "\052\001\001\000\026\004\u021c\020\037\021\033\022\034" +
    "\024\050\027\032\030\042\035\045\036\040\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u022e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\u0236\001\001\000\020\003" +
    "\u0235\005\022\006\017\007\030\010\023\011\015\012\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\u0238\005\022\006\017\007\030\010\023\011\015\012\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u023b\001\001\000\002\001\001\000\020\003\u023d\005\022" +
    "\006\017\007\030\010\023\011\015\012\016\001\001\000" +
    "\002\001\001\000\004\013\u0243\001\001\000\004\013\u0240" +
    "\001\001\000\002\001\001\000\020\003\u0242\005\022\006" +
    "\017\007\030\010\023\011\015\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\u0247\005\022\006" +
    "\017\007\030\010\023\011\015\012\016\001\001\000\020" +
    "\003\u0246\005\022\006\017\007\030\010\023\011\015\012" +
    "\016\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_body ::= PROCEDURE ID main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo beg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);
        
        Nodo tmp2 = new Nodo("PROCEDURE"); 
        tmp2.setNumNodo(parser.contador++);
        tmp2.setValor("null");
        tmp.addHijo((Nodo)tmp2);

        Nodo tmp3 = new Nodo("ID"); 
        tmp3.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        tmp.addHijo((Nodo)tmp3);
       
        
        tmp.addHijo((Nodo)beg);
        
	parser.padre = (Nodo) tmp;
	System.out.println("OK begin");
        RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= error ID main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= PROCEDURE error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_body ::= PROCEDURE ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_body ::= FUNCTION ID main_parameters RETURN var_type IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_body ::= FUNCTION error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_body ::= FUNCTION ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // begin_main_body ::= declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // begin_main_body ::= declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // begin_main_body ::= declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // begin_main_body ::= declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // begin_main_body ::= declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begin_main_body ::= declaration_list BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_main_body ::= BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        Nodo tmp = new Nodo("CONTENT");
                        tmp.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        System.out.println("OK content");
                        RESULT=tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_main_body ::= error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_main_body ::= BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // begin_main_body ::= BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // begin_main_body ::= BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // begin_main_body ::= BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_list ::= procedure_declaration declaration_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_list ::= procedure_declaration 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_list ::= variable_declaration declaration_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= variable_declaration 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration_list ::= function_declaration declaration_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_list ::= function_declaration 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_list ::= procedure_block declaration_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= procedure_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= function_block declaration_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_list ::= function_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_type ::= INT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_type ::= BOOLEAN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_type ::= FLOAT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_type ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration ::= PROCEDURE ID parameters PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_declaration ::= PROCEDURE error parameters PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_declaration ::= PROCEDURE ID parameters error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_declaration ::= ID COMA variable_declaration 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_declaration ::= ID error variable_declaration 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration ::= ID OPDEC var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration ::= ID error var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration ::= ID OPDEC var_type error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_declaration ::= FUNCTION ID parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_declaration ::= FUNCTION error parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= FUNCTION ID parameters error var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_declaration ::= FUNCTION ID parameters RETURN var_type error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // content ::= assignment content 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // content ::= assignment 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // content ::= while_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           
            Nodo tmp = new Nodo("WHILE-BLOCK");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);

            b.add(tmp);
            System.out.println("while + content ");
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // content ::= while_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("WHILE-BLOCK");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("ok while");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // content ::= if_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("IF_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
            b.add(tmp);
			
			System.out.println("if + content ");
			RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // content ::= if_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            Nodo tmp = new Nodo("IF_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("if block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // content ::= for_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Nodo tmp = new Nodo("FOR_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			b.add(tmp);

			System.out.println("for + content ");
			RESULT=b;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // content ::= for_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Nodo tmp = new Nodo("FOR_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("for_block");
			RESULT=list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // content ::= loop_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			tmp.setNumNodo(parser.contador++);
            b.add(tmp);
			
			System.out.println("loop + content ");
			RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // content ::= loop_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("loop_block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // content ::= put content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);
          
            System.out.println("put + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // content ::= put 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            System.out.println("put");
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // content ::= get content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);

            System.out.println("get + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // content ::= get 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("get");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // content ::= calling_subroutine content 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // content ::= calling_subroutine 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_block ::= PROCEDURE error parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_block ::= PROCEDURE ID parameters IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_block ::= FUNCTION error parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_block ::= FUNCTION ID parameters error var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // main_parameters ::= PARIZQ parameters_specification NT$0 PARDER 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // main_parameters ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // main_parameters ::= PARDER parameters_specification error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parameters ::= PARIZQ parameters_specification PARDER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameters ::= error parameters_specification PARDER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameters ::= PARIZQ parameters_specification error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameters_specification ::= ident_list error parameter_mode var_type PYC parameters_specification 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parameters_specification ::= ident_list OPDEC parameter_mode var_type 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parameters_specification ::= ident_list error parameter_mode var_type 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ident_list ::= ID COMA ident_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ident_list ::= ID 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ident_list ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ident_list ::= error COMA ident_list 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_mode ::= IN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_mode ::= OUT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_mode ::= IN OUT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter_mode ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment ::= ID OPASG E PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment ::= ID error E PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment ::= ID OPASG error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment ::= ID OPASG E error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment ::= ID OPASG call_subroutine PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment ::= ID error call_subroutine PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment ::= ID OPASG call_subroutine error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment ::= ID OPASG STR PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assignment ::= ID error STR PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assignment ::= ID OPASG STR error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment ::= ID OPASG TRUE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment ::= ID error TRUE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment ::= ID OPASG TRUE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment ::= ID OPASG FALSE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assignment ::= ID error FALSE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // assignment ::= ID OPASG FALSE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E OPSUM T 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("OPSUM");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= T 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("T");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("OK");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // T ::= T OPMULT F 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("OPMULT");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // T ::= F 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("F");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("OK");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= NUM 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    //tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    tmp.setValor(e);
    System.out.println("OK");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F ::= PARIZQ E PARDER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo tmp = new Nodo("E");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("EOK");
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // loop_block ::= LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("loop_block");
                    tmp.setNumNodo(parser.contador++);
                    
                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp3.addHijo((Nodo)a.get(i));
                    }
                    tmp.addHijo(tmp3);
                    /*Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setValor("null");
                    tmp3.addHijo((Nodo)a);
                    tmp3.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)tmp3);*/

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }
                    System.out.println("loop_block");
                    RESULT=tmp;
			
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // loop_block ::= LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // loop_block ::= LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_block ::= WHILE condition LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            Nodo tmp = new Nodo("CONDITION-CONTENT");
            tmp.setNumNodo(parser.contador++);
            //tmp.addHijo((Nodo)e);
            Nodo tmp2 = new Nodo("CONTENT");
            tmp2.setNumNodo(parser.contador++);
            for(int i = f.size()-1; i>=0;i--){
                tmp2.addHijo(f.get(i));
            }
            tmp.addHijo((Nodo)tmp2);

            tmp.addHijo((Nodo)g);
            System.out.println("ok in while-block ");
            RESULT=tmp;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_block ::= WHILE condition error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_block ::= WHILE condition LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while_block ::= WHILE condition LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while_block ::= WHILE condition LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exit_cycle ::= EXIT WHEN condition PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo tmp = new Nodo("EXIT_CYCLE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exit_cycle ::= 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exit_cycle ::= EXIT error condition PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exit_cycle ::= EXIT WHEN condition error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
				Nodo tmp = new Nodo("for_block");
    			tmp.setNumNodo(parser.contador++);

				Nodo tmp3 = new Nodo("ID");
				tmp3.setValor(id);
				tmp3.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp3);
				
				Nodo tmp4 = new Nodo("NUM");
				tmp4.setValor(num1);
				tmp4.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp4);

				Nodo tmp6 = new Nodo("NUM");
				tmp6.setValor(num2);
				tmp6.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp6);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = a.size()-1; i>=0;i--){
                    tmp2.addHijo(a.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

    			System.out.println("for_block");
    			RESULT=tmp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for_block ::= FOR error NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // for_block ::= FOR ID error DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // for_block ::= FOR ID NUM error NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for_block ::= FOR ID NUM DOSPUNTOS error LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // for_block ::= FOR ID NUM DOSPUNTOS NUM error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);
					


					Nodo tmp6 = new Nodo("NUM");
					tmp6.setValor(num2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_block ::= FOR error ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // for_block ::= FOR ID ID error NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for_block ::= FOR ID ID DOSPUNTOS error LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // for_block ::= FOR ID ID DOSPUNTOS NUM error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("NUM");
					tmp4.setValor(num1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);					

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id1);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // for_block ::= FOR error NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // for_block ::= FOR ID error DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // for_block ::= FOR ID NUM error ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // for_block ::= FOR ID NUM DOSPUNTOS ID error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);

                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }

                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // for_block ::= FOR error ID DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // for_block ::= FOR ID ID error ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // for_block ::= FOR ID ID DOSPUNTOS ID error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // if_block ::= IF condition THEN content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("if_block");
				tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }

                tmp.addHijo((Nodo)tmp2);

                if(a != null){
                    tmp.addHijo((Nodo)a);
                }

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // if_block ::= IF condition error content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // if_block ::= IF condition THEN content elsif_block else_block error IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // if_block ::= IF condition THEN content elsif_block else_block END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // if_block ::= IF condition THEN content elsif_block else_block END IF error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // elsif_block ::= ELSIF condition THEN content elsif_block 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSIF_BLOCK");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);
                
                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(r != null){
                    tmp.addHijo((Nodo)r);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // elsif_block ::= 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // elsif_block ::= ELSIF condition error content elsif_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // else_block ::= ELSE content 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSE_BLOCK");
                tmp.setNumNodo(parser.contador++);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // else_block ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condition ::= boolean_expr OR condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("OR");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);
                
                

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // condition ::= boolean_expr AND condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("AND");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condition ::= boolean_expr 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);
                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condition ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // boolean_expr ::= rel_operand OPREL rel_operand 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprel_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprel_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oprel_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("OPREL");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    tmp.setValor(oprel_val.toString());
    RESULT=tmp;
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // rel_operand ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(id);
        System.out.println("id rel operando");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // rel_operand ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("NUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(num);
        System.out.println("num rel operando");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // rel_operand ::= call_subroutine 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // rel_operand ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // put ::= PUT PARIZQ NUM PARDER PYC 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // put ::= PUT error NUM PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // put ::= PUT PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // put ::= PUT PARIZQ NUM error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // put ::= PUT PARIZQ STR PARDER PYC 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo tmp = new Nodo("STR");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(str.toString().replaceAll("\"",""));
        System.out.println("str in put");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // put ::= PUT error STR PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // put ::= PUT PARIZQ STR error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // put ::= PUT PARIZQ STR PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // get ::= GET PARIZQ ID PARDER PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("ID");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(id);
    System.out.println("id in get");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // get ::= GET error ID PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // get ::= GET PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // get ::= GET PARIZQ ID error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // get ::= GET PARIZQ ID PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // calling_subroutine ::= call_subroutine PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // calling_subroutine ::= call_subroutine error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // call_subroutine ::= ID PARIZQ parameter_values PARDER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // call_subroutine ::= ID PARIZQ parameter_values error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parameter_values ::= ID COMA parameter_values 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parameter_values ::= ID 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // parameter_values ::= error COMA parameter_values 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // parameter_values ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parameter_values ::= NUM COMA parameter_values 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // parameter_values ::= NUM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
