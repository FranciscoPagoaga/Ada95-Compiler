
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pack;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\350\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\012" +
    "\000\002\002\007\000\002\002\007\000\002\044\002\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\010\000\002\006" +
    "\007\000\002\006\007\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\004\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\012\014\000\002\012\014\000\002\012" +
    "\014\000\002\012\014\000\002\012\014\000\002\012\014" +
    "\000\002\012\014\000\002\012\013\000\002\012\013\000" +
    "\002\012\013\000\002\012\013\000\002\012\013\000\002" +
    "\012\013\000\002\012\013\000\002\011\016\000\002\011" +
    "\016\000\002\011\016\000\002\011\016\000\002\011\016" +
    "\000\002\011\016\000\002\011\016\000\002\011\016\000" +
    "\002\011\015\000\002\011\015\000\002\011\015\000\002" +
    "\011\015\000\002\011\015\000\002\011\015\000\002\011" +
    "\015\000\002\011\015\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\013\005\000" +
    "\002\013\002\000\002\013\005\000\002\026\010\000\002" +
    "\026\010\000\002\026\006\000\002\026\006\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\004\000" +
    "\002\043\002\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\006\000\002\034\006\000\002\034" +
    "\006\000\002\034\006\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\037\005\000\002\037\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\015\010" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\017\012\000\002\017\012\000\002\017\012\000\002" +
    "\017\012\000\002\017\012\000\002\017\012\000\002\020" +
    "\006\000\002\020\002\000\002\020\006\000\002\020\006" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\016\015\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\016\015\000\002\016\015\000\002\016\015" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\016\015\000\002\016\015\000\002" +
    "\016\015\000\002\016\015\000\002\016\015\000\002\016" +
    "\015\000\002\021\013\000\002\021\013\000\002\021\013" +
    "\000\002\021\013\000\002\021\013\000\002\022\007\000" +
    "\002\022\002\000\002\022\007\000\002\023\004\000\002" +
    "\023\002\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\031\003\000\002\033\005\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\035\007\000\002\035\007\000\002\035\007\000\002" +
    "\035\007\000\002\035\007\000\002\035\007\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\036\007\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\024\004\000\002\024" +
    "\004\000\002\025\006\000\002\025\006\000\002\027\005" +
    "\000\002\027\003\000\002\027\005\000\002\027\003\000" +
    "\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ad\000\010\003\005\004\004\005\007\001\002\000" +
    "\006\003\u02a6\051\u02a5\001\002\000\004\051\u02a1\001\002" +
    "\000\004\002\u02a0\001\002\000\006\003\011\051\010\001" +
    "\002\000\012\003\uff9d\006\uff9d\040\013\041\012\001\002" +
    "\000\010\007\uff9d\040\013\041\012\001\002\000\006\003" +
    "\u0281\051\u0280\001\002\000\006\003\u0281\051\u0280\001\002" +
    "\000\004\007\015\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\014\003\uffe3\004\022" +
    "\005\027\010\uffe3\051\025\001\002\000\014\003\uffe5\004" +
    "\022\005\027\010\uffe5\051\025\001\002\000\014\003\uffe7" +
    "\004\022\005\027\010\uffe7\051\025\001\002\000\004\002" +
    "\ufffb\001\002\000\006\003\u0241\051\u0240\001\002\000\006" +
    "\003\u022c\010\u022d\001\002\000\014\003\uffeb\004\022\005" +
    "\027\010\uffeb\051\025\001\002\000\010\003\u0222\037\u0223" +
    "\044\u0221\001\002\000\022\006\041\012\043\016\053\017" +
    "\036\020\037\046\046\047\056\051\045\001\002\000\006" +
    "\003\u01ca\051\u01c9\001\002\000\024\003\050\006\041\012" +
    "\043\016\053\017\036\020\037\046\046\047\056\051\045" +
    "\001\002\000\014\003\uffe9\004\022\005\027\010\uffe9\051" +
    "\025\001\002\000\006\003\uffea\010\uffea\001\002\000\034" +
    "\003\uffc3\006\041\011\uffc3\012\043\014\uffc3\015\uffc3\016" +
    "\053\017\036\020\037\021\uffc3\046\046\047\056\051\045" +
    "\001\002\000\034\003\uffcb\006\041\011\uffcb\012\043\014" +
    "\uffcb\015\uffcb\016\053\017\036\020\037\021\uffcb\046\046" +
    "\047\056\051\045\001\002\000\034\003\uffcf\006\041\011" +
    "\uffcf\012\043\014\uffcf\015\uffcf\016\053\017\036\020\037" +
    "\021\uffcf\046\046\047\056\051\045\001\002\000\010\003" +
    "\120\050\116\051\117\001\002\000\024\003\u01a0\006\041" +
    "\012\043\016\053\017\036\020\037\046\046\047\056\051" +
    "\045\001\002\000\034\003\uffc9\006\041\011\uffc9\012\043" +
    "\014\uffc9\015\uffc9\016\053\017\036\020\037\021\uffc9\046" +
    "\046\047\056\051\045\001\002\000\010\025\u0198\026\u0199" +
    "\051\u0197\001\002\000\034\003\uffc7\006\041\011\uffc7\012" +
    "\043\014\uffc7\015\uffc7\016\053\017\036\020\037\021\uffc7" +
    "\046\046\047\056\051\045\001\002\000\010\003\120\050" +
    "\116\051\117\001\002\000\006\003\u0175\042\u0176\001\002" +
    "\000\010\003\u0152\036\u0151\040\125\001\002\000\006\003" +
    "\u0131\040\u0132\001\002\000\034\003\uffd1\006\041\011\uffd1" +
    "\012\043\014\uffd1\015\uffd1\016\053\017\036\020\037\021" +
    "\uffd1\046\046\047\056\051\045\001\002\000\004\011\u012d" +
    "\001\002\000\006\003\u0124\011\u0125\001\002\000\034\003" +
    "\uffcd\006\041\011\uffcd\012\043\014\uffcd\015\uffcd\016\053" +
    "\017\036\020\037\021\uffcd\046\046\047\056\051\045\001" +
    "\002\000\006\003\100\051\077\001\002\000\034\003\uffc5" +
    "\006\041\011\uffc5\012\043\014\uffc5\015\uffc5\016\053\017" +
    "\036\020\037\021\uffc5\046\046\047\056\051\045\001\002" +
    "\000\034\003\uffc1\006\041\011\uffc1\012\043\014\uffc1\015" +
    "\uffc1\016\053\017\036\020\037\021\uffc1\046\046\047\056" +
    "\051\045\001\002\000\006\003\057\040\060\001\002\000" +
    "\004\051\072\001\002\000\006\003\062\051\061\001\002" +
    "\000\006\003\065\041\066\001\002\000\004\041\063\001" +
    "\002\000\004\042\064\001\002\000\034\003\uff26\006\uff26" +
    "\011\uff26\012\uff26\014\uff26\015\uff26\016\uff26\017\uff26\020" +
    "\uff26\021\uff26\046\uff26\047\uff26\051\uff26\001\002\000\004" +
    "\042\071\001\002\000\006\003\067\042\070\001\002\000" +
    "\034\003\uff24\006\uff24\011\uff24\012\uff24\014\uff24\015\uff24" +
    "\016\uff24\017\uff24\020\uff24\021\uff24\046\uff24\047\uff24\051" +
    "\uff24\001\002\000\034\003\uff28\006\uff28\011\uff28\012\uff28" +
    "\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28\021\uff28\046" +
    "\uff28\047\uff28\051\uff28\001\002\000\034\003\uff25\006\uff25" +
    "\011\uff25\012\uff25\014\uff25\015\uff25\016\uff25\017\uff25\020" +
    "\uff25\021\uff25\046\uff25\047\uff25\051\uff25\001\002\000\004" +
    "\041\073\001\002\000\004\042\074\001\002\000\034\003" +
    "\uff27\006\uff27\011\uff27\012\uff27\014\uff27\015\uff27\016\uff27" +
    "\017\uff27\020\uff27\021\uff27\046\uff27\047\uff27\051\uff27\001" +
    "\002\000\014\003\uffc2\011\uffc2\014\uffc2\015\uffc2\021\uffc2" +
    "\001\002\000\014\003\uffc6\011\uffc6\014\uffc6\015\uffc6\021" +
    "\uffc6\001\002\000\010\003\205\050\204\051\203\001\002" +
    "\000\006\050\101\051\102\001\002\000\004\045\164\001" +
    "\002\000\004\045\103\001\002\000\006\050\105\051\104" +
    "\001\002\000\004\020\156\001\002\000\004\020\106\001" +
    "\002\000\022\006\041\012\043\016\053\017\036\020\037" +
    "\046\046\047\056\051\045\001\002\000\006\011\uff6f\021" +
    "\111\001\002\000\004\011\153\001\002\000\006\003\112" +
    "\022\113\001\002\000\010\003\120\050\116\051\117\001" +
    "\002\000\010\003\120\050\116\051\117\001\002\000\004" +
    "\043\146\001\002\000\016\003\uff3c\013\uff3c\020\uff3c\023" +
    "\142\024\143\042\uff3c\001\002\000\020\003\uff38\013\uff38" +
    "\020\uff38\023\uff38\024\uff38\042\uff38\043\uff38\001\002\000" +
    "\022\003\uff39\013\uff39\020\uff39\023\uff39\024\uff39\040\125" +
    "\042\uff39\043\uff39\001\002\000\014\003\uff3b\013\uff3b\020" +
    "\uff3b\042\uff3b\043\uff36\001\002\000\020\003\uff37\013\uff37" +
    "\020\uff37\023\uff37\024\uff37\042\uff37\043\uff37\001\002\000" +
    "\006\003\123\042\124\001\002\000\006\003\uff6d\011\uff6d" +
    "\001\002\000\006\003\uff70\011\uff70\001\002\000\010\003" +
    "\131\050\127\051\126\001\002\000\010\003\uff1e\041\uff1e" +
    "\044\140\001\002\000\010\003\uff1a\041\uff1a\044\136\001" +
    "\002\000\006\003\134\041\135\001\002\000\010\003\uff1c" +
    "\041\uff1c\044\132\001\002\000\010\003\131\050\127\051" +
    "\126\001\002\000\006\003\uff1d\041\uff1d\001\002\000\026" +
    "\003\uff20\013\uff20\020\uff20\023\uff20\024\uff20\034\uff20\035" +
    "\uff20\041\uff20\042\uff20\043\uff20\001\002\000\026\003\uff21" +
    "\013\uff21\020\uff21\023\uff21\024\uff21\034\uff21\035\uff21\041" +
    "\uff21\042\uff21\043\uff21\001\002\000\010\003\131\050\127" +
    "\051\126\001\002\000\006\003\uff1b\041\uff1b\001\002\000" +
    "\010\003\131\050\127\051\126\001\002\000\006\003\uff1f" +
    "\041\uff1f\001\002\000\010\003\120\050\116\051\117\001" +
    "\002\000\010\003\120\050\116\051\117\001\002\000\012" +
    "\003\uff3e\013\uff3e\020\uff3e\042\uff3e\001\002\000\012\003" +
    "\uff3d\013\uff3d\020\uff3d\042\uff3d\001\002\000\010\003\150" +
    "\050\116\051\117\001\002\000\016\003\uff3a\013\uff3a\020" +
    "\uff3a\023\uff3a\024\uff3a\042\uff3a\001\002\000\016\003\uff36" +
    "\013\uff36\020\uff36\023\uff36\024\uff36\042\uff36\001\002\000" +
    "\004\042\152\001\002\000\006\003\uff6e\011\uff6e\001\002" +
    "\000\004\020\154\001\002\000\004\042\155\001\002\000" +
    "\034\003\uff61\006\uff61\011\uff61\012\uff61\014\uff61\015\uff61" +
    "\016\uff61\017\uff61\020\uff61\021\uff61\046\uff61\047\uff61\051" +
    "\uff61\001\002\000\022\006\041\012\043\016\053\017\036" +
    "\020\037\046\046\047\056\051\045\001\002\000\006\011" +
    "\uff6f\021\111\001\002\000\004\011\161\001\002\000\004" +
    "\020\162\001\002\000\004\042\163\001\002\000\034\003" +
    "\uff4f\006\uff4f\011\uff4f\012\uff4f\014\uff4f\015\uff4f\016\uff4f" +
    "\017\uff4f\020\uff4f\021\uff4f\046\uff4f\047\uff4f\051\uff4f\001" +
    "\002\000\006\050\166\051\165\001\002\000\004\020\175" +
    "\001\002\000\004\020\167\001\002\000\022\006\041\012" +
    "\043\016\053\017\036\020\037\046\046\047\056\051\045" +
    "\001\002\000\006\011\uff6f\021\111\001\002\000\004\011" +
    "\172\001\002\000\004\020\173\001\002\000\004\042\174" +
    "\001\002\000\034\003\uff6b\006\uff6b\011\uff6b\012\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\046\uff6b" +
    "\047\uff6b\051\uff6b\001\002\000\022\006\041\012\043\016" +
    "\053\017\036\020\037\046\046\047\056\051\045\001\002" +
    "\000\006\011\uff6f\021\111\001\002\000\004\011\200\001" +
    "\002\000\004\020\201\001\002\000\004\042\202\001\002" +
    "\000\034\003\uff58\006\uff58\011\uff58\012\uff58\014\uff58\015" +
    "\uff58\016\uff58\017\uff58\020\uff58\021\uff58\046\uff58\047\uff58" +
    "\051\uff58\001\002\000\006\003\334\045\335\001\002\000" +
    "\006\003\225\045\226\001\002\000\004\045\206\001\002" +
    "\000\006\050\210\051\207\001\002\000\004\020\217\001" +
    "\002\000\004\020\211\001\002\000\022\006\041\012\043" +
    "\016\053\017\036\020\037\046\046\047\056\051\045\001" +
    "\002\000\006\011\uff6f\021\111\001\002\000\004\011\214" +
    "\001\002\000\004\020\215\001\002\000\004\042\216\001" +
    "\002\000\034\003\uff6a\006\uff6a\011\uff6a\012\uff6a\014\uff6a" +
    "\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\046\uff6a\047" +
    "\uff6a\051\uff6a\001\002\000\022\006\041\012\043\016\053" +
    "\017\036\020\037\046\046\047\056\051\045\001\002\000" +
    "\006\011\uff6f\021\111\001\002\000\004\011\222\001\002" +
    "\000\004\020\223\001\002\000\004\042\224\001\002\000" +
    "\034\003\uff57\006\uff57\011\uff57\012\uff57\014\uff57\015\uff57" +
    "\016\uff57\017\uff57\020\uff57\021\uff57\046\uff57\047\uff57\051" +
    "\uff57\001\002\000\006\050\317\051\316\001\002\000\010" +
    "\003\231\050\230\051\227\001\002\000\006\003\267\020" +
    "\270\001\002\000\006\003\240\020\241\001\002\000\004" +
    "\020\232\001\002\000\022\006\041\012\043\016\053\017" +
    "\036\020\037\046\046\047\056\051\045\001\002\000\006" +
    "\011\uff6f\021\111\001\002\000\004\011\235\001\002\000" +
    "\004\020\236\001\002\000\004\042\237\001\002\000\034" +
    "\003\uff68\006\uff68\011\uff68\012\uff68\014\uff68\015\uff68\016" +
    "\uff68\017\uff68\020\uff68\021\uff68\046\uff68\047\uff68\051\uff68" +
    "\001\002\000\022\006\041\012\043\016\053\017\036\020" +
    "\037\046\046\047\056\051\045\001\002\000\024\003\242" +
    "\006\041\012\043\016\053\017\036\020\037\046\046\047" +
    "\056\051\045\001\002\000\006\011\uff6f\021\111\001\002" +
    "\000\010\003\uff6f\011\uff6f\021\111\001\002\000\006\003" +
    "\245\011\246\001\002\000\004\020\254\001\002\000\006" +
    "\003\247\020\250\001\002\000\004\042\253\001\002\000" +
    "\006\003\251\042\252\001\002\000\034\003\uff64\006\uff64" +
    "\011\uff64\012\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020" +
    "\uff64\021\uff64\046\uff64\047\uff64\051\uff64\001\002\000\034" +
    "\003\uff6c\006\uff6c\011\uff6c\012\uff6c\014\uff6c\015\uff6c\016" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\046\uff6c\047\uff6c\051\uff6c" +
    "\001\002\000\034\003\uff65\006\uff65\011\uff65\012\uff65\014" +
    "\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\046\uff65" +
    "\047\uff65\051\uff65\001\002\000\004\042\255\001\002\000" +
    "\034\003\uff66\006\uff66\011\uff66\012\uff66\014\uff66\015\uff66" +
    "\016\uff66\017\uff66\020\uff66\021\uff66\046\uff66\047\uff66\051" +
    "\uff66\001\002\000\004\011\257\001\002\000\004\020\260" +
    "\001\002\000\004\042\261\001\002\000\034\003\uff63\006" +
    "\uff63\011\uff63\012\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\020\uff63\021\uff63\046\uff63\047\uff63\051\uff63\001\002\000" +
    "\006\011\uff6f\021\111\001\002\000\004\011\264\001\002" +
    "\000\004\020\265\001\002\000\004\042\266\001\002\000" +
    "\034\003\uff67\006\uff67\011\uff67\012\uff67\014\uff67\015\uff67" +
    "\016\uff67\017\uff67\020\uff67\021\uff67\046\uff67\047\uff67\051" +
    "\uff67\001\002\000\022\006\041\012\043\016\053\017\036" +
    "\020\037\046\046\047\056\051\045\001\002\000\024\003" +
    "\271\006\041\012\043\016\053\017\036\020\037\046\046" +
    "\047\056\051\045\001\002\000\006\011\uff6f\021\111\001" +
    "\002\000\010\003\uff6f\011\uff6f\021\111\001\002\000\006" +
    "\003\274\011\275\001\002\000\004\020\303\001\002\000" +
    "\006\003\276\020\277\001\002\000\004\042\302\001\002" +
    "\000\006\003\300\042\301\001\002\000\034\003\uff52\006" +
    "\uff52\011\uff52\012\uff52\014\uff52\015\uff52\016\uff52\017\uff52" +
    "\020\uff52\021\uff52\046\uff52\047\uff52\051\uff52\001\002\000" +
    "\034\003\uff59\006\uff59\011\uff59\012\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\021\uff59\046\uff59\047\uff59\051" +
    "\uff59\001\002\000\034\003\uff53\006\uff53\011\uff53\012\uff53" +
    "\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021\uff53\046" +
    "\uff53\047\uff53\051\uff53\001\002\000\004\042\304\001\002" +
    "\000\034\003\uff54\006\uff54\011\uff54\012\uff54\014\uff54\015" +
    "\uff54\016\uff54\017\uff54\020\uff54\021\uff54\046\uff54\047\uff54" +
    "\051\uff54\001\002\000\004\011\306\001\002\000\004\020" +
    "\307\001\002\000\004\042\310\001\002\000\034\003\uff51" +
    "\006\uff51\011\uff51\012\uff51\014\uff51\015\uff51\016\uff51\017" +
    "\uff51\020\uff51\021\uff51\046\uff51\047\uff51\051\uff51\001\002" +
    "\000\006\011\uff6f\021\111\001\002\000\004\011\313\001" +
    "\002\000\004\020\314\001\002\000\004\042\315\001\002" +
    "\000\034\003\uff55\006\uff55\011\uff55\012\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\020\uff55\021\uff55\046\uff55\047\uff55" +
    "\051\uff55\001\002\000\004\020\326\001\002\000\004\020" +
    "\320\001\002\000\022\006\041\012\043\016\053\017\036" +
    "\020\037\046\046\047\056\051\045\001\002\000\006\011" +
    "\uff6f\021\111\001\002\000\004\011\323\001\002\000\004" +
    "\020\324\001\002\000\004\042\325\001\002\000\034\003" +
    "\uff69\006\uff69\011\uff69\012\uff69\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\046\uff69\047\uff69\051\uff69\001" +
    "\002\000\022\006\041\012\043\016\053\017\036\020\037" +
    "\046\046\047\056\051\045\001\002\000\006\011\uff6f\021" +
    "\111\001\002\000\004\011\331\001\002\000\004\020\332" +
    "\001\002\000\004\042\333\001\002\000\034\003\uff56\006" +
    "\uff56\011\uff56\012\uff56\014\uff56\015\uff56\016\uff56\017\uff56" +
    "\020\uff56\021\uff56\046\uff56\047\uff56\051\uff56\001\002\000" +
    "\006\050\u0116\051\u0115\001\002\000\010\003\340\050\337" +
    "\051\336\001\002\000\006\003\376\020\377\001\002\000" +
    "\006\003\347\020\350\001\002\000\004\020\341\001\002" +
    "\000\022\006\041\012\043\016\053\017\036\020\037\046" +
    "\046\047\056\051\045\001\002\000\006\011\uff6f\021\111" +
    "\001\002\000\004\011\344\001\002\000\004\020\345\001" +
    "\002\000\004\042\346\001\002\000\034\003\uff5f\006\uff5f" +
    "\011\uff5f\012\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020" +
    "\uff5f\021\uff5f\046\uff5f\047\uff5f\051\uff5f\001\002\000\022" +
    "\006\041\012\043\016\053\017\036\020\037\046\046\047" +
    "\056\051\045\001\002\000\024\003\351\006\041\012\043" +
    "\016\053\017\036\020\037\046\046\047\056\051\045\001" +
    "\002\000\006\011\uff6f\021\111\001\002\000\010\003\uff6f" +
    "\011\uff6f\021\111\001\002\000\006\003\354\011\355\001" +
    "\002\000\004\020\363\001\002\000\006\003\356\020\357" +
    "\001\002\000\004\042\362\001\002\000\006\003\360\042" +
    "\361\001\002\000\034\003\uff5b\006\uff5b\011\uff5b\012\uff5b" +
    "\014\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\046" +
    "\uff5b\047\uff5b\051\uff5b\001\002\000\034\003\uff62\006\uff62" +
    "\011\uff62\012\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020" +
    "\uff62\021\uff62\046\uff62\047\uff62\051\uff62\001\002\000\034" +
    "\003\uff5c\006\uff5c\011\uff5c\012\uff5c\014\uff5c\015\uff5c\016" +
    "\uff5c\017\uff5c\020\uff5c\021\uff5c\046\uff5c\047\uff5c\051\uff5c" +
    "\001\002\000\004\042\364\001\002\000\034\003\uff5d\006" +
    "\uff5d\011\uff5d\012\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d" +
    "\020\uff5d\021\uff5d\046\uff5d\047\uff5d\051\uff5d\001\002\000" +
    "\004\011\366\001\002\000\004\020\367\001\002\000\004" +
    "\042\370\001\002\000\034\003\uff5a\006\uff5a\011\uff5a\012" +
    "\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a" +
    "\046\uff5a\047\uff5a\051\uff5a\001\002\000\006\011\uff6f\021" +
    "\111\001\002\000\004\011\373\001\002\000\004\020\374" +
    "\001\002\000\004\042\375\001\002\000\034\003\uff5e\006" +
    "\uff5e\011\uff5e\012\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e" +
    "\020\uff5e\021\uff5e\046\uff5e\047\uff5e\051\uff5e\001\002\000" +
    "\022\006\041\012\043\016\053\017\036\020\037\046\046" +
    "\047\056\051\045\001\002\000\024\003\u0100\006\041\012" +
    "\043\016\053\017\036\020\037\046\046\047\056\051\045" +
    "\001\002\000\006\011\uff6f\021\111\001\002\000\010\003" +
    "\uff6f\011\uff6f\021\111\001\002\000\006\003\u0103\011\u0104" +
    "\001\002\000\004\020\u010a\001\002\000\006\003\u0105\020" +
    "\u0106\001\002\000\004\042\u0109\001\002\000\006\003\u0107" +
    "\042\u0108\001\002\000\034\003\uff4a\006\uff4a\011\uff4a\012" +
    "\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a" +
    "\046\uff4a\047\uff4a\051\uff4a\001\002\000\034\003\uff50\006" +
    "\uff50\011\uff50\012\uff50\014\uff50\015\uff50\016\uff50\017\uff50" +
    "\020\uff50\021\uff50\046\uff50\047\uff50\051\uff50\001\002\000" +
    "\034\003\uff4b\006\uff4b\011\uff4b\012\uff4b\014\uff4b\015\uff4b" +
    "\016\uff4b\017\uff4b\020\uff4b\021\uff4b\046\uff4b\047\uff4b\051" +
    "\uff4b\001\002\000\004\042\u010b\001\002\000\034\003\uff4c" +
    "\006\uff4c\011\uff4c\012\uff4c\014\uff4c\015\uff4c\016\uff4c\017" +
    "\uff4c\020\uff4c\021\uff4c\046\uff4c\047\uff4c\051\uff4c\001\002" +
    "\000\004\011\u010d\001\002\000\004\020\u010e\001\002\000" +
    "\004\042\u010f\001\002\000\034\003\uff49\006\uff49\011\uff49" +
    "\012\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021" +
    "\uff49\046\uff49\047\uff49\051\uff49\001\002\000\006\011\uff6f" +
    "\021\111\001\002\000\004\011\u0112\001\002\000\004\020" +
    "\u0113\001\002\000\004\042\u0114\001\002\000\034\003\uff4d" +
    "\006\uff4d\011\uff4d\012\uff4d\014\uff4d\015\uff4d\016\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\046\uff4d\047\uff4d\051\uff4d\001\002" +
    "\000\004\020\u011d\001\002\000\004\020\u0117\001\002\000" +
    "\022\006\041\012\043\016\053\017\036\020\037\046\046" +
    "\047\056\051\045\001\002\000\006\011\uff6f\021\111\001" +
    "\002\000\004\011\u011a\001\002\000\004\020\u011b\001\002" +
    "\000\004\042\u011c\001\002\000\034\003\uff60\006\uff60\011" +
    "\uff60\012\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60" +
    "\021\uff60\046\uff60\047\uff60\051\uff60\001\002\000\022\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\006\011\uff6f\021\111\001\002\000" +
    "\004\011\u0120\001\002\000\004\020\u0121\001\002\000\004" +
    "\042\u0122\001\002\000\034\003\uff4e\006\uff4e\011\uff4e\012" +
    "\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e" +
    "\046\uff4e\047\uff4e\051\uff4e\001\002\000\014\003\uffce\011" +
    "\uffce\014\uffce\015\uffce\021\uffce\001\002\000\004\051\u012b" +
    "\001\002\000\006\003\u0127\051\u0126\001\002\000\006\003" +
    "\u0129\042\u012a\001\002\000\004\042\u0128\001\002\000\004" +
    "\002\uffef\001\002\000\004\002\uffee\001\002\000\004\002" +
    "\ufff2\001\002\000\004\042\u012c\001\002\000\004\002\ufff0" +
    "\001\002\000\004\051\u012e\001\002\000\004\042\u012f\001" +
    "\002\000\004\002\uffed\001\002\000\014\003\uffd2\011\uffd2" +
    "\014\uffd2\015\uffd2\021\uffd2\001\002\000\010\050\u0149\051" +
    "\u0148\052\u014a\001\002\000\012\003\u0135\050\u0133\051\u0134" +
    "\052\u0136\001\002\000\006\003\u0143\041\u0144\001\002\000" +
    "\006\003\u013e\041\u013f\001\002\000\004\041\u013c\001\002" +
    "\000\006\003\u0137\041\u0138\001\002\000\004\042\u013b\001" +
    "\002\000\006\003\u0139\042\u013a\001\002\000\034\003\uff2d" +
    "\006\uff2d\011\uff2d\012\uff2d\014\uff2d\015\uff2d\016\uff2d\017" +
    "\uff2d\020\uff2d\021\uff2d\046\uff2d\047\uff2d\051\uff2d\001\002" +
    "\000\034\003\uff30\006\uff30\011\uff30\012\uff30\014\uff30\015" +
    "\uff30\016\uff30\017\uff30\020\uff30\021\uff30\046\uff30\047\uff30" +
    "\051\uff30\001\002\000\034\003\uff2e\006\uff2e\011\uff2e\012" +
    "\uff2e\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e" +
    "\046\uff2e\047\uff2e\051\uff2e\001\002\000\004\042\u013d\001" +
    "\002\000\034\003\uff33\006\uff33\011\uff33\012\uff33\014\uff33" +
    "\015\uff33\016\uff33\017\uff33\020\uff33\021\uff33\046\uff33\047" +
    "\uff33\051\uff33\001\002\000\004\042\u0142\001\002\000\006" +
    "\003\u0140\042\u0141\001\002\000\034\003\uff29\006\uff29\011" +
    "\uff29\012\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020\uff29" +
    "\021\uff29\046\uff29\047\uff29\051\uff29\001\002\000\034\003" +
    "\uff2c\006\uff2c\011\uff2c\012\uff2c\014\uff2c\015\uff2c\016\uff2c" +
    "\017\uff2c\020\uff2c\021\uff2c\046\uff2c\047\uff2c\051\uff2c\001" +
    "\002\000\034\003\uff2a\006\uff2a\011\uff2a\012\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\046\uff2a\047" +
    "\uff2a\051\uff2a\001\002\000\004\042\u0147\001\002\000\006" +
    "\003\u0145\042\u0146\001\002\000\034\003\uff31\006\uff31\011" +
    "\uff31\012\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31" +
    "\021\uff31\046\uff31\047\uff31\051\uff31\001\002\000\034\003" +
    "\uff35\006\uff35\011\uff35\012\uff35\014\uff35\015\uff35\016\uff35" +
    "\017\uff35\020\uff35\021\uff35\046\uff35\047\uff35\051\uff35\001" +
    "\002\000\034\003\uff32\006\uff32\011\uff32\012\uff32\014\uff32" +
    "\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32\046\uff32\047" +
    "\uff32\051\uff32\001\002\000\004\041\u014f\001\002\000\004" +
    "\041\u014d\001\002\000\004\041\u014b\001\002\000\004\042" +
    "\u014c\001\002\000\034\003\uff2f\006\uff2f\011\uff2f\012\uff2f" +
    "\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\046" +
    "\uff2f\047\uff2f\051\uff2f\001\002\000\004\042\u014e\001\002" +
    "\000\034\003\uff34\006\uff34\011\uff34\012\uff34\014\uff34\015" +
    "\uff34\016\uff34\017\uff34\020\uff34\021\uff34\046\uff34\047\uff34" +
    "\051\uff34\001\002\000\004\042\u0150\001\002\000\034\003" +
    "\uff2b\006\uff2b\011\uff2b\012\uff2b\014\uff2b\015\uff2b\016\uff2b" +
    "\017\uff2b\020\uff2b\021\uff2b\046\uff2b\047\uff2b\051\uff2b\001" +
    "\002\000\020\003\u016a\025\u0168\026\u0169\040\u0158\050\u0153" +
    "\051\u0159\052\u0167\001\002\000\016\025\u0155\026\u0157\040" +
    "\u0158\050\u0153\051\u0159\052\u0154\001\002\000\014\003\uff7e" +
    "\034\uff7e\035\uff7e\041\uff7e\042\uff7e\001\002\000\004\042" +
    "\u0166\001\002\000\004\042\u0165\001\002\000\014\003\uff81" +
    "\034\uff81\035\u0160\041\uff81\042\uff81\001\002\000\004\042" +
    "\u0164\001\002\000\010\040\u0158\050\u0153\051\u0159\001\002" +
    "\000\016\003\uff7d\034\uff7d\035\uff7d\040\125\041\uff7d\042" +
    "\uff7d\001\002\000\014\003\uff7c\034\uff7c\035\uff7c\041\uff7c" +
    "\042\uff7c\001\002\000\014\003\uff7f\034\uff7f\035\uff7f\041" +
    "\uff7f\042\uff7f\001\002\000\006\034\u015d\042\u015e\001\002" +
    "\000\010\040\u0158\050\u0153\051\u0159\001\002\000\034\003" +
    "\uff8e\006\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\046\uff8e\047\uff8e\051\uff8e\001" +
    "\002\000\014\003\uff82\034\uff82\035\u0160\041\uff82\042\uff82" +
    "\001\002\000\010\040\u0158\050\u0153\051\u0159\001\002\000" +
    "\014\003\uff80\034\uff80\035\uff80\041\uff80\042\uff80\001\002" +
    "\000\006\034\u015d\041\u0163\001\002\000\014\003\uff7b\034" +
    "\uff7b\035\uff7b\041\uff7b\042\uff7b\001\002\000\034\003\uff84" +
    "\006\uff84\011\uff84\012\uff84\014\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\021\uff84\046\uff84\047\uff84\051\uff84\001\002" +
    "\000\034\003\uff87\006\uff87\011\uff87\012\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\046\uff87\047\uff87" +
    "\051\uff87\001\002\000\034\003\uff8a\006\uff8a\011\uff8a\012" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\046\uff8a\047\uff8a\051\uff8a\001\002\000\006\003\u0173\042" +
    "\u0174\001\002\000\006\003\u0171\042\u0172\001\002\000\006" +
    "\003\u016f\042\u0170\001\002\000\004\042\u016e\001\002\000" +
    "\010\003\u016c\034\u015d\042\u016d\001\002\000\034\003\uff8c" +
    "\006\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\020\uff8c\021\uff8c\046\uff8c\047\uff8c\051\uff8c\001\002" +
    "\000\034\003\uff8f\006\uff8f\011\uff8f\012\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\046\uff8f\047\uff8f" +
    "\051\uff8f\001\002\000\034\003\uff8d\006\uff8d\011\uff8d\012" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\046\uff8d\047\uff8d\051\uff8d\001\002\000\034\003\uff83\006" +
    "\uff83\011\uff83\012\uff83\014\uff83\015\uff83\016\uff83\017\uff83" +
    "\020\uff83\021\uff83\046\uff83\047\uff83\051\uff83\001\002\000" +
    "\034\003\uff85\006\uff85\011\uff85\012\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\046\uff85\047\uff85\051" +
    "\uff85\001\002\000\034\003\uff86\006\uff86\011\uff86\012\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\046" +
    "\uff86\047\uff86\051\uff86\001\002\000\034\003\uff88\006\uff88" +
    "\011\uff88\012\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\046\uff88\047\uff88\051\uff88\001\002\000\034" +
    "\003\uff89\006\uff89\011\uff89\012\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\046\uff89\047\uff89\051\uff89" +
    "\001\002\000\034\003\uff8b\006\uff8b\011\uff8b\012\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\046\uff8b" +
    "\047\uff8b\051\uff8b\001\002\000\034\003\uff22\006\uff22\011" +
    "\uff22\012\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020\uff22" +
    "\021\uff22\046\uff22\047\uff22\051\uff22\001\002\000\034\003" +
    "\uff23\006\uff23\011\uff23\012\uff23\014\uff23\015\uff23\016\uff23" +
    "\017\uff23\020\uff23\021\uff23\046\uff23\047\uff23\051\uff23\001" +
    "\002\000\006\003\u0178\013\u0179\001\002\000\022\006\041" +
    "\012\043\016\053\017\036\020\037\046\046\047\056\051" +
    "\045\001\002\000\022\006\041\012\043\016\053\017\036" +
    "\020\037\046\046\047\056\051\045\001\002\000\012\003" +
    "\uff42\011\uff42\014\uff42\015\u017c\001\002\000\010\003\uff3f" +
    "\011\uff3f\014\u0185\001\002\000\010\003\120\050\116\051" +
    "\117\001\002\000\006\003\u017e\013\u017f\001\002\000\022" +
    "\006\041\012\043\016\053\017\036\020\037\046\046\047" +
    "\056\051\045\001\002\000\022\006\041\012\043\016\053" +
    "\017\036\020\037\046\046\047\056\051\045\001\002\000" +
    "\012\003\uff42\011\uff42\014\uff42\015\u017c\001\002\000\010" +
    "\003\uff43\011\uff43\014\uff43\001\002\000\012\003\uff42\011" +
    "\uff42\014\uff42\015\u017c\001\002\000\010\003\uff41\011\uff41" +
    "\014\uff41\001\002\000\006\003\u0187\011\u0188\001\002\000" +
    "\022\006\041\012\043\016\053\017\036\020\037\046\046" +
    "\047\056\051\045\001\002\000\006\003\uff40\011\uff40\001" +
    "\002\000\004\012\u018e\001\002\000\006\003\u0189\012\u018a" +
    "\001\002\000\004\042\u018d\001\002\000\006\003\u018b\042" +
    "\u018c\001\002\000\034\003\uff44\006\uff44\011\uff44\012\uff44" +
    "\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\046" +
    "\uff44\047\uff44\051\uff44\001\002\000\034\003\uff48\006\uff48" +
    "\011\uff48\012\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020" +
    "\uff48\021\uff48\046\uff48\047\uff48\051\uff48\001\002\000\034" +
    "\003\uff45\006\uff45\011\uff45\012\uff45\014\uff45\015\uff45\016" +
    "\uff45\017\uff45\020\uff45\021\uff45\046\uff45\047\uff45\051\uff45" +
    "\001\002\000\004\042\u018f\001\002\000\034\003\uff46\006" +
    "\uff46\011\uff46\012\uff46\014\uff46\015\uff46\016\uff46\017\uff46" +
    "\020\uff46\021\uff46\046\uff46\047\uff46\051\uff46\001\002\000" +
    "\010\011\uff42\014\uff42\015\u017c\001\002\000\006\011\uff3f" +
    "\014\u0185\001\002\000\004\011\u0193\001\002\000\004\012" +
    "\u0194\001\002\000\004\042\u0195\001\002\000\034\003\uff47" +
    "\006\uff47\011\uff47\012\uff47\014\uff47\015\uff47\016\uff47\017" +
    "\uff47\020\uff47\021\uff47\046\uff47\047\uff47\051\uff47\001\002" +
    "\000\014\003\uffc8\011\uffc8\014\uffc8\015\uffc8\021\uffc8\001" +
    "\002\000\006\040\125\042\u019e\001\002\000\004\042\u019d" +
    "\001\002\000\004\042\u019c\001\002\000\004\042\u019b\001" +
    "\002\000\034\003\uff9f\006\uff9f\011\uff9f\012\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\046\uff9f\047" +
    "\uff9f\051\uff9f\001\002\000\034\003\uffa1\006\uffa1\011\uffa1" +
    "\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\046\uffa1\047\uffa1\051\uffa1\001\002\000\034\003\uffa2" +
    "\006\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\046\uffa2\047\uffa2\051\uffa2\001\002" +
    "\000\034\003\uffa0\006\uffa0\011\uffa0\012\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\046\uffa0\047\uffa0" +
    "\051\uffa0\001\002\000\014\003\uffca\011\uffca\014\uffca\015" +
    "\uffca\021\uffca\001\002\000\006\011\uff6f\021\111\001\002" +
    "\000\010\003\uff6f\011\uff6f\021\111\001\002\000\006\003" +
    "\u01a3\011\u01a4\001\002\000\004\020\u01a8\001\002\000\004" +
    "\020\u01a5\001\002\000\006\003\u01a6\042\u01a7\001\002\000" +
    "\034\003\uff78\006\uff78\011\uff78\012\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\020\uff78\021\uff78\046\uff78\047\uff78\051" +
    "\uff78\001\002\000\034\003\uff7a\006\uff7a\011\uff7a\012\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\046" +
    "\uff7a\047\uff7a\051\uff7a\001\002\000\004\042\u01a9\001\002" +
    "\000\034\003\uff79\006\uff79\011\uff79\012\uff79\014\uff79\015" +
    "\uff79\016\uff79\017\uff79\020\uff79\021\uff79\046\uff79\047\uff79" +
    "\051\uff79\001\002\000\004\011\u01ab\001\002\000\004\020" +
    "\u01ac\001\002\000\004\042\u01ad\001\002\000\034\003\uff77" +
    "\006\uff77\011\uff77\012\uff77\014\uff77\015\uff77\016\uff77\017" +
    "\uff77\020\uff77\021\uff77\046\uff77\047\uff77\051\uff77\001\002" +
    "\000\006\003\u01af\020\u01b0\001\002\000\022\006\041\012" +
    "\043\016\053\017\036\020\037\046\046\047\056\051\045" +
    "\001\002\000\024\003\u01b1\006\041\012\043\016\053\017" +
    "\036\020\037\046\046\047\056\051\045\001\002\000\006" +
    "\011\uff6f\021\111\001\002\000\010\003\uff6f\011\uff6f\021" +
    "\111\001\002\000\006\003\u01b4\011\u01b5\001\002\000\004" +
    "\020\u01bb\001\002\000\006\003\u01b6\020\u01b7\001\002\000" +
    "\004\042\u01ba\001\002\000\006\003\u01b8\042\u01b9\001\002" +
    "\000\034\003\uff72\006\uff72\011\uff72\012\uff72\014\uff72\015" +
    "\uff72\016\uff72\017\uff72\020\uff72\021\uff72\046\uff72\047\uff72" +
    "\051\uff72\001\002\000\034\003\uff76\006\uff76\011\uff76\012" +
    "\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76" +
    "\046\uff76\047\uff76\051\uff76\001\002\000\034\003\uff73\006" +
    "\uff73\011\uff73\012\uff73\014\uff73\015\uff73\016\uff73\017\uff73" +
    "\020\uff73\021\uff73\046\uff73\047\uff73\051\uff73\001\002\000" +
    "\004\042\u01bc\001\002\000\034\003\uff74\006\uff74\011\uff74" +
    "\012\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021" +
    "\uff74\046\uff74\047\uff74\051\uff74\001\002\000\004\011\u01be" +
    "\001\002\000\004\020\u01bf\001\002\000\004\003\u01c0\001" +
    "\002\000\034\003\uff71\006\uff71\011\uff71\012\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\046\uff71\047" +
    "\uff71\051\uff71\001\002\000\006\011\uff6f\021\111\001\002" +
    "\000\004\011\u01c3\001\002\000\004\020\u01c4\001\002\000" +
    "\004\042\u01c5\001\002\000\034\003\uff75\006\uff75\011\uff75" +
    "\012\uff75\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021" +
    "\uff75\046\uff75\047\uff75\051\uff75\001\002\000\014\003\uffd0" +
    "\011\uffd0\014\uffd0\015\uffd0\021\uffd0\001\002\000\014\003" +
    "\uffcc\011\uffcc\014\uffcc\015\uffcc\021\uffcc\001\002\000\014" +
    "\003\uffc4\011\uffc4\014\uffc4\015\uffc4\021\uffc4\001\002\000" +
    "\012\003\uff9d\006\uff9d\040\013\041\012\001\002\000\010" +
    "\006\uff9d\040\013\041\012\001\002\000\004\006\u01cc\001" +
    "\002\000\012\003\u01ce\031\u01d1\032\u01d0\033\u01cf\001\002" +
    "\000\006\007\u01d2\042\u01d3\001\002\000\012\003\uffdf\007" +
    "\uffdf\041\uffdf\042\uffdf\001\002\000\012\003\uffe0\007\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\012\003\uffe1\007\uffe1\041" +
    "\uffe1\042\uffe1\001\002\000\012\003\uffe2\007\uffe2\041\uffe2" +
    "\042\uffe2\001\002\000\012\004\022\005\027\010\u01d5\051" +
    "\025\001\002\000\014\003\uffd5\004\uffd5\005\uffd5\010\uffd5" +
    "\051\uffd5\001\002\000\004\010\u01da\001\002\000\022\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\004\011\u01d7\001\002\000\004\051" +
    "\u01d8\001\002\000\004\042\u01d9\001\002\000\014\003\uffa9" +
    "\004\uffa9\005\uffa9\010\uffa9\051\uffa9\001\002\000\022\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\004\011\u01dc\001\002\000\004\051" +
    "\u01dd\001\002\000\004\042\u01de\001\002\000\014\003\uffb1" +
    "\004\uffb1\005\uffb1\010\uffb1\051\uffb1\001\002\000\006\003" +
    "\u01e0\006\u01e1\001\002\000\012\003\u01ce\031\u01d1\032\u01d0" +
    "\033\u01cf\001\002\000\012\003\u01ce\031\u01d1\032\u01d0\033" +
    "\u01cf\001\002\000\010\003\u01e3\007\u01e4\042\u01e5\001\002" +
    "\000\014\003\uffd3\004\uffd3\005\uffd3\010\uffd3\051\uffd3\001" +
    "\002\000\014\003\u01e7\004\022\005\027\010\u01e8\051\025" +
    "\001\002\000\014\003\uffd6\004\uffd6\005\uffd6\010\uffd6\051" +
    "\uffd6\001\002\000\006\003\u01fb\010\u01fc\001\002\000\022" +
    "\006\041\012\043\016\053\017\036\020\037\046\046\047" +
    "\056\051\045\001\002\000\024\003\u01e9\006\041\012\043" +
    "\016\053\017\036\020\037\046\046\047\056\051\045\001" +
    "\002\000\004\011\u01f4\001\002\000\006\003\u01eb\011\u01ec" +
    "\001\002\000\004\051\u01f2\001\002\000\006\003\u01ee\051" +
    "\u01ed\001\002\000\006\003\u01f0\042\u01f1\001\002\000\004" +
    "\042\u01ef\001\002\000\014\003\uffa5\004\uffa5\005\uffa5\010" +
    "\uffa5\051\uffa5\001\002\000\014\003\uffa4\004\uffa4\005\uffa4" +
    "\010\uffa4\051\uffa4\001\002\000\014\003\uffaa\004\uffaa\005" +
    "\uffaa\010\uffaa\051\uffaa\001\002\000\004\042\u01f3\001\002" +
    "\000\014\003\uffa6\004\uffa6\005\uffa6\010\uffa6\051\uffa6\001" +
    "\002\000\004\051\u01f5\001\002\000\004\042\u01f6\001\002" +
    "\000\014\003\uffa3\004\uffa3\005\uffa3\010\uffa3\051\uffa3\001" +
    "\002\000\004\011\u01f8\001\002\000\004\051\u01f9\001\002" +
    "\000\004\042\u01fa\001\002\000\014\003\uffa7\004\uffa7\005" +
    "\uffa7\010\uffa7\051\uffa7\001\002\000\022\006\041\012\043" +
    "\016\053\017\036\020\037\046\046\047\056\051\045\001" +
    "\002\000\024\003\u01fd\006\041\012\043\016\053\017\036" +
    "\020\037\046\046\047\056\051\045\001\002\000\004\011" +
    "\u0208\001\002\000\006\003\u01ff\011\u0200\001\002\000\004" +
    "\051\u0206\001\002\000\006\003\u0202\051\u0201\001\002\000" +
    "\006\003\u0204\042\u0205\001\002\000\004\042\u0203\001\002" +
    "\000\014\003\uffad\004\uffad\005\uffad\010\uffad\051\uffad\001" +
    "\002\000\014\003\uffac\004\uffac\005\uffac\010\uffac\051\uffac" +
    "\001\002\000\014\003\uffb2\004\uffb2\005\uffb2\010\uffb2\051" +
    "\uffb2\001\002\000\004\042\u0207\001\002\000\014\003\uffae" +
    "\004\uffae\005\uffae\010\uffae\051\uffae\001\002\000\004\051" +
    "\u0209\001\002\000\004\042\u020a\001\002\000\014\003\uffab" +
    "\004\uffab\005\uffab\010\uffab\051\uffab\001\002\000\004\011" +
    "\u020c\001\002\000\004\051\u020d\001\002\000\004\042\u020e" +
    "\001\002\000\014\003\uffaf\004\uffaf\005\uffaf\010\uffaf\051" +
    "\uffaf\001\002\000\006\007\u0210\042\u0211\001\002\000\012" +
    "\004\022\005\027\010\u0213\051\025\001\002\000\014\003" +
    "\uffd4\004\uffd4\005\uffd4\010\uffd4\051\uffd4\001\002\000\004" +
    "\010\u0218\001\002\000\022\006\041\012\043\016\053\017" +
    "\036\020\037\046\046\047\056\051\045\001\002\000\004" +
    "\011\u0215\001\002\000\004\051\u0216\001\002\000\004\042" +
    "\u0217\001\002\000\014\003\uffa8\004\uffa8\005\uffa8\010\uffa8" +
    "\051\uffa8\001\002\000\022\006\041\012\043\016\053\017" +
    "\036\020\037\046\046\047\056\051\045\001\002\000\004" +
    "\011\u021a\001\002\000\004\051\u021b\001\002\000\004\042" +
    "\u021c\001\002\000\014\003\uffb0\004\uffb0\005\uffb0\010\uffb0" +
    "\051\uffb0\001\002\000\004\011\u021e\001\002\000\004\051" +
    "\u021f\001\002\000\004\042\u0220\001\002\000\004\002\ufff1" +
    "\001\002\000\004\051\025\001\002\000\014\003\u01ce\031" +
    "\u01d1\032\u01d0\033\u01cf\051\025\001\002\000\012\003\u01ce" +
    "\031\u01d1\032\u01d0\033\u01cf\001\002\000\006\003\u0225\042" +
    "\u0226\001\002\000\014\003\uffd7\004\uffd7\005\uffd7\010\uffd7" +
    "\051\uffd7\001\002\000\014\003\uffd9\004\uffd9\005\uffd9\010" +
    "\uffd9\051\uffd9\001\002\000\004\042\u0229\001\002\000\014" +
    "\003\uffda\004\uffda\005\uffda\010\uffda\051\uffda\001\002\000" +
    "\014\003\uffd8\004\uffd8\005\uffd8\010\uffd8\051\uffd8\001\002" +
    "\000\014\003\uffdb\004\uffdb\005\uffdb\010\uffdb\051\uffdb\001" +
    "\002\000\006\003\uffec\010\uffec\001\002\000\022\006\041" +
    "\012\043\016\053\017\036\020\037\046\046\047\056\051" +
    "\045\001\002\000\024\003\u022e\006\041\012\043\016\053" +
    "\017\036\020\037\046\046\047\056\051\045\001\002\000" +
    "\004\011\u0239\001\002\000\006\003\u0230\011\u0231\001\002" +
    "\000\004\051\u0237\001\002\000\006\003\u0233\051\u0232\001" +
    "\002\000\006\003\u0235\042\u0236\001\002\000\004\042\u0234" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\ufff8\001\002\000\004\042\u0238\001\002" +
    "\000\004\002\ufff6\001\002\000\004\051\u023a\001\002\000" +
    "\004\042\u023b\001\002\000\004\002\ufff3\001\002\000\004" +
    "\011\u023d\001\002\000\004\051\u023e\001\002\000\004\042" +
    "\u023f\001\002\000\004\002\ufff7\001\002\000\014\003\uff9d" +
    "\007\uff9d\040\013\041\012\042\uff9d\001\002\000\012\007" +
    "\uff9d\040\013\041\012\042\uff9d\001\002\000\006\007\u0243" +
    "\042\u0244\001\002\000\012\004\022\005\027\010\u0246\051" +
    "\025\001\002\000\014\003\uffdd\004\uffdd\005\uffdd\010\uffdd" +
    "\051\uffdd\001\002\000\004\010\u024b\001\002\000\022\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\004\011\u0248\001\002\000\004\051" +
    "\u0249\001\002\000\004\042\u024a\001\002\000\014\003\uffb8" +
    "\004\uffb8\005\uffb8\010\uffb8\051\uffb8\001\002\000\022\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\004\011\u024d\001\002\000\004\051" +
    "\u024e\001\002\000\004\042\u024f\001\002\000\014\003\uffbf" +
    "\004\uffbf\005\uffbf\010\uffbf\051\uffbf\001\002\000\010\003" +
    "\u0251\007\u0252\042\u0253\001\002\000\014\003\uffdc\004\uffdc" +
    "\005\uffdc\010\uffdc\051\uffdc\001\002\000\014\003\u0255\004" +
    "\022\005\027\010\u0256\051\025\001\002\000\014\003\uffde" +
    "\004\uffde\005\uffde\010\uffde\051\uffde\001\002\000\006\003" +
    "\u0269\010\u026a\001\002\000\022\006\041\012\043\016\053" +
    "\017\036\020\037\046\046\047\056\051\045\001\002\000" +
    "\024\003\u0257\006\041\012\043\016\053\017\036\020\037" +
    "\046\046\047\056\051\045\001\002\000\004\011\u0262\001" +
    "\002\000\006\003\u0259\011\u025a\001\002\000\004\051\u0260" +
    "\001\002\000\006\003\u025c\051\u025b\001\002\000\006\003" +
    "\u025e\042\u025f\001\002\000\004\042\u025d\001\002\000\014" +
    "\003\uffb5\004\uffb5\005\uffb5\010\uffb5\051\uffb5\001\002\000" +
    "\014\003\uffb4\004\uffb4\005\uffb4\010\uffb4\051\uffb4\001\002" +
    "\000\014\003\uffb9\004\uffb9\005\uffb9\010\uffb9\051\uffb9\001" +
    "\002\000\004\042\u0261\001\002\000\014\003\uffb6\004\uffb6" +
    "\005\uffb6\010\uffb6\051\uffb6\001\002\000\004\051\u0263\001" +
    "\002\000\004\042\u0264\001\002\000\014\003\uffb3\004\uffb3" +
    "\005\uffb3\010\uffb3\051\uffb3\001\002\000\004\011\u0266\001" +
    "\002\000\004\051\u0267\001\002\000\004\042\u0268\001\002" +
    "\000\014\003\uffb7\004\uffb7\005\uffb7\010\uffb7\051\uffb7\001" +
    "\002\000\022\006\041\012\043\016\053\017\036\020\037" +
    "\046\046\047\056\051\045\001\002\000\024\003\u026b\006" +
    "\041\012\043\016\053\017\036\020\037\046\046\047\056" +
    "\051\045\001\002\000\004\011\u0276\001\002\000\006\003" +
    "\u026d\011\u026e\001\002\000\004\051\u0274\001\002\000\006" +
    "\003\u0270\051\u026f\001\002\000\006\003\u0272\042\u0273\001" +
    "\002\000\004\042\u0271\001\002\000\014\003\uffbc\004\uffbc" +
    "\005\uffbc\010\uffbc\051\uffbc\001\002\000\014\003\uffbb\004" +
    "\uffbb\005\uffbb\010\uffbb\051\uffbb\001\002\000\014\003\uffc0" +
    "\004\uffc0\005\uffc0\010\uffc0\051\uffc0\001\002\000\004\042" +
    "\u0275\001\002\000\014\003\uffbd\004\uffbd\005\uffbd\010\uffbd" +
    "\051\uffbd\001\002\000\004\051\u0277\001\002\000\004\042" +
    "\u0278\001\002\000\014\003\uffba\004\uffba\005\uffba\010\uffba" +
    "\051\uffba\001\002\000\004\011\u027a\001\002\000\004\051" +
    "\u027b\001\002\000\004\042\u027c\001\002\000\014\003\uffbe" +
    "\004\uffbe\005\uffbe\010\uffbe\051\uffbe\001\002\000\006\003" +
    "\uffe8\010\uffe8\001\002\000\006\003\uffe6\010\uffe6\001\002" +
    "\000\006\003\uffe4\010\uffe4\001\002\000\010\003\uff96\037" +
    "\uff96\044\u0294\001\002\000\010\003\uff95\037\uff95\044\u0292" +
    "\001\002\000\004\041\u0291\001\002\000\006\003\u0284\037" +
    "\u0285\001\002\000\016\003\uff90\027\u0287\030\u0286\031\uff90" +
    "\032\uff90\033\uff90\001\002\000\016\003\uff90\027\u0287\030" +
    "\u0286\031\uff90\032\uff90\033\uff90\001\002\000\012\003\uff92" +
    "\031\uff92\032\uff92\033\uff92\001\002\000\014\003\uff93\030" +
    "\u028c\031\uff93\032\uff93\033\uff93\001\002\000\012\003\u01ce" +
    "\031\u01d1\032\u01d0\033\u01cf\001\002\000\010\003\uff99\041" +
    "\uff99\042\u028a\001\002\000\006\003\u0281\051\u0280\001\002" +
    "\000\006\003\uff9b\041\uff9b\001\002\000\012\003\uff91\031" +
    "\uff91\032\uff91\033\uff91\001\002\000\012\003\u01ce\031\u01d1" +
    "\032\u01d0\033\u01cf\001\002\000\010\003\uff98\041\uff98\042" +
    "\u028f\001\002\000\006\003\u0281\051\u0280\001\002\000\006" +
    "\003\uff9a\041\uff9a\001\002\000\012\003\uff9e\006\uff9e\007" +
    "\uff9e\042\uff9e\001\002\000\006\003\u0281\051\u0280\001\002" +
    "\000\006\003\uff94\037\uff94\001\002\000\006\003\u0281\051" +
    "\u0280\001\002\000\006\003\uff97\037\uff97\001\002\000\004" +
    "\003\u0297\001\002\000\012\003\uff9c\006\uff9c\007\uff9c\042" +
    "\uff9c\001\002\000\006\003\u029a\006\u0299\001\002\000\012" +
    "\003\u01ce\031\u01d1\032\u01d0\033\u01cf\001\002\000\014\003" +
    "\026\004\022\005\027\010\030\051\025\001\002\000\004" +
    "\002\ufffa\001\002\000\004\007\u029d\001\002\000\014\003" +
    "\026\004\022\005\027\010\030\051\025\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\001\001\002\000\010\007\uff9d\040\013\041\012\001\002" +
    "\000\004\007\u02a3\001\002\000\014\003\026\004\022\005" +
    "\027\010\030\051\025\001\002\000\004\002\uffff\001\002" +
    "\000\012\003\uff9d\007\uff9d\040\013\041\012\001\002\000" +
    "\010\007\uff9d\040\013\041\012\001\002\000\004\007\u02a8" +
    "\001\002\000\014\003\026\004\022\005\027\010\030\051" +
    "\025\001\002\000\004\002\ufffe\001\002\000\006\003\u02ab" +
    "\007\u02ac\001\002\000\014\003\026\004\022\005\027\010" +
    "\030\051\025\001\002\000\014\003\026\004\022\005\027" +
    "\010\030\051\025\001\002\000\004\002\ufff9\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ad\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0297\001\001\000\004\013\013\001\001\000\006\004" +
    "\u0282\026\u0295\001\001\000\006\004\u0282\026\u0281\001\001" +
    "\000\002\001\001\000\020\003\022\006\020\007\017\010" +
    "\023\011\015\012\016\030\030\001\001\000\016\003\u027e" +
    "\007\017\010\023\011\015\012\016\030\030\001\001\000" +
    "\016\003\u027d\007\017\010\023\011\015\012\016\030\030" +
    "\001\001\000\016\003\u027c\007\017\010\023\011\015\012" +
    "\016\030\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u022a\007\017\010\023\011" +
    "\015\012\016\030\030\001\001\000\002\001\001\000\030" +
    "\005\u021c\014\054\015\037\016\033\017\034\021\051\024" +
    "\032\025\043\034\046\035\041\036\053\001\001\000\002" +
    "\001\001\000\030\005\050\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\016\003\031\007\017\010\023\011\015\012" +
    "\016\030\030\001\001\000\002\001\001\000\030\005\u01c7" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\030\005\u01c6" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\030\005\u01c5" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\012\025\120" +
    "\031\u01ad\032\113\033\114\001\001\000\030\005\u01a0\014" +
    "\054\015\037\016\033\017\034\021\051\024\032\025\043" +
    "\034\046\035\041\036\053\001\001\000\030\005\u019e\014" +
    "\054\015\037\016\033\017\034\021\051\024\032\025\043" +
    "\034\046\035\041\036\053\001\001\000\004\025\u0199\001" +
    "\001\000\030\005\u0195\014\054\015\037\016\033\017\034" +
    "\021\051\024\032\025\043\034\046\035\041\036\053\001" +
    "\001\000\012\025\120\031\u0176\032\113\033\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\u012f\014\054\015\037\016\033\017\034\021\051" +
    "\024\032\025\043\034\046\035\041\036\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\u0122\014\054" +
    "\015\037\016\033\017\034\021\051\024\032\025\043\034" +
    "\046\035\041\036\053\001\001\000\002\001\001\000\030" +
    "\005\075\014\054\015\037\016\033\017\034\021\051\024" +
    "\032\025\043\034\046\035\041\036\053\001\001\000\030" +
    "\005\074\014\054\015\037\016\033\017\034\021\051\024" +
    "\032\025\043\034\046\035\041\036\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\106\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\004\020\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\120\031\150\032\113\033" +
    "\114\001\001\000\012\025\120\031\121\032\113\033\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\136\001\001\000\002\001\001\000\004\027" +
    "\140\001\001\000\002\001\001\000\012\025\120\031\144" +
    "\032\113\033\114\001\001\000\012\025\120\031\143\032" +
    "\113\033\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\120\032\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\156\014\054\015\037\016\033\017\034\021\051\024\032" +
    "\025\043\034\046\035\041\036\053\001\001\000\004\020" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\167\014\054\015\037" +
    "\016\033\017\034\021\051\024\032\025\043\034\046\035" +
    "\041\036\053\001\001\000\004\020\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\175\014\054\015\037\016\033\017\034" +
    "\021\051\024\032\025\043\034\046\035\041\036\053\001" +
    "\001\000\004\020\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\211\014" +
    "\054\015\037\016\033\017\034\021\051\024\032\025\043" +
    "\034\046\035\041\036\053\001\001\000\004\020\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\217\014\054\015\037\016" +
    "\033\017\034\021\051\024\032\025\043\034\046\035\041" +
    "\036\053\001\001\000\004\020\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\232\014\054" +
    "\015\037\016\033\017\034\021\051\024\032\025\043\034" +
    "\046\035\041\036\053\001\001\000\004\020\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\261\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\030\005\242\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\004\020\255\001\001\000\004\020\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\310\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\030\005\271\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\004\020\304\001\001\000\004\020\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\320" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\004\020\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\326\014\054\015\037" +
    "\016\033\017\034\021\051\024\032\025\043\034\046\035" +
    "\041\036\053\001\001\000\004\020\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\341\014" +
    "\054\015\037\016\033\017\034\021\051\024\032\025\043" +
    "\034\046\035\041\036\053\001\001\000\004\020\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\370\014\054\015\037\016" +
    "\033\017\034\021\051\024\032\025\043\034\046\035\041" +
    "\036\053\001\001\000\030\005\351\014\054\015\037\016" +
    "\033\017\034\021\051\024\032\025\043\034\046\035\041" +
    "\036\053\001\001\000\004\020\364\001\001\000\004\020" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\371\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\u010f\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\030\005\u0100\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\004\020\u010b\001\001\000\004\020\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\u0117\014\054\015\037\016\033\017\034\021\051\024\032" +
    "\025\043\034\046\035\041\036\053\001\001\000\004\020" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\u011d\014\054\015" +
    "\037\016\033\017\034\021\051\024\032\025\043\034\046" +
    "\035\041\036\053\001\001\000\004\020\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\u0159\037\u016a\040\u0155\041" +
    "\u015a\001\001\000\012\025\u0159\037\u015b\040\u0155\041\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\u0159" +
    "\037\u0161\040\u0155\041\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\u0159\040\u015e\041\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u0159\041\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\u018f\014\054\015\037\016\033\017\034\021\051" +
    "\024\032\025\043\034\046\035\041\036\053\001\001\000" +
    "\030\005\u0179\014\054\015\037\016\033\017\034\021\051" +
    "\024\032\025\043\034\046\035\041\036\053\001\001\000" +
    "\004\022\u017a\001\001\000\004\023\u0183\001\001\000\012" +
    "\025\120\031\u017c\032\113\033\114\001\001\000\002\001" +
    "\001\000\030\005\u0181\014\054\015\037\016\033\017\034" +
    "\021\051\024\032\025\043\034\046\035\041\036\053\001" +
    "\001\000\030\005\u017f\014\054\015\037\016\033\017\034" +
    "\021\051\024\032\025\043\034\046\035\041\036\053\001" +
    "\001\000\004\022\u0180\001\001\000\002\001\001\000\004" +
    "\022\u0182\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\u0185\014\054\015\037\016\033\017\034\021\051" +
    "\024\032\025\043\034\046\035\041\036\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0190\001\001\000\004\023\u0191\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u01a9\001\001\000\004\020\u01a1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\u01c0\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\030\005\u01b1\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\004\020\u01bc\001\001\000\004\020\u01b2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u01c1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u01de\001\001\000\004\013\u01ca\001\001\000" +
    "\002\001\001\000\004\042\u01cc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\u01d3\007\017\010\023\011\015" +
    "\012\016\030\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\u01d5\014\054\015\037\016\033\017\034" +
    "\021\051\024\032\025\043\034\046\035\041\036\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\u01da\014\054\015\037\016" +
    "\033\017\034\021\051\024\032\025\043\034\046\035\041" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\u020e\001\001\000\004\042\u01e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u01e5\007\017\010\023" +
    "\011\015\012\016\030\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\u01f6\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\030\005\u01e9\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\u020a\014\054\015\037\016\033\017\034\021\051\024\032" +
    "\025\043\034\046\035\041\036\053\001\001\000\030\005" +
    "\u01fd\014\054\015\037\016\033\017\034\021\051\024\032" +
    "\025\043\034\046\035\041\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u0211\007" +
    "\017\010\023\011\015\012\016\030\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\u0213\014\054\015" +
    "\037\016\033\017\034\021\051\024\032\025\043\034\046" +
    "\035\041\036\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\u0218" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u0229\001\001\000\006\030\u0227\042" +
    "\u0226\001\001\000\004\042\u0223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\u023b\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\030\005\u022e\014\054\015\037\016\033\017" +
    "\034\021\051\024\032\025\043\034\046\035\041\036\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u024f" +
    "\001\001\000\004\013\u0241\001\001\000\002\001\001\000" +
    "\016\003\u0244\007\017\010\023\011\015\012\016\030\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\u0246\014\054\015\037\016\033\017\034\021\051\024\032" +
    "\025\043\034\046\035\041\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\u024b\014\054\015\037\016\033\017\034\021" +
    "\051\024\032\025\043\034\046\035\041\036\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u0253\007\017\010\023\011\015\012\016\030\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\u0264" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\030\005\u0257" +
    "\014\054\015\037\016\033\017\034\021\051\024\032\025" +
    "\043\034\046\035\041\036\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\u0278\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\030\005\u026b\014\054\015\037\016\033" +
    "\017\034\021\051\024\032\025\043\034\046\035\041\036" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u028c\001\001\000\004\043\u0287\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0288\001\001\000" +
    "\002\001\001\000\006\004\u0282\026\u028a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u028d\001\001\000" +
    "\002\001\001\000\006\004\u0282\026\u028f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0292\001\001\000" +
    "\002\001\001\000\004\004\u0294\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u029b\001\001\000\020\003\022\006\u029a\007\017" +
    "\010\023\011\015\012\016\030\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\022\006\u029d\007\017" +
    "\010\023\011\015\012\016\030\030\001\001\000\004\044" +
    "\u029e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u02a1\001\001\000\002\001\001\000\020\003\022\006" +
    "\u02a3\007\017\010\023\011\015\012\016\030\030\001\001" +
    "\000\002\001\001\000\004\013\u02a9\001\001\000\004\013" +
    "\u02a6\001\001\000\002\001\001\000\020\003\022\006\u02a8" +
    "\007\017\010\023\011\015\012\016\030\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\022\006\u02ae" +
    "\007\017\010\023\011\015\012\016\030\030\001\001\000" +
    "\020\003\022\006\u02ac\007\017\010\023\011\015\012\016" +
    "\030\030\001\001\000\004\044\u02ad\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main_body EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main_body ::= PROCEDURE ID main_parameters IS begin_main_body fin_parseo 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> beg = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	    Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);

        Nodo tmp3 = new Nodo("ID"); 
        tmp3.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        tmp.addHijo((Nodo)tmp3);

        if (b != null){
            tmp.addHijo(b);        
        }

        System.out.println(beg);

        for(int i = beg.size()-1; i>=0;i--){
            tmp.addHijo(beg.get(i));
        }

        parser.padre = (Nodo) tmp;
        System.out.println("OK begin");
        RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_body ::= error ID main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_body ::= PROCEDURE error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_body ::= PROCEDURE ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_body ::= FUNCTION ID main_parameters RETURN var_type IS begin_main_body fin_parseo 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> beg = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            Nodo tmp = new Nodo("Inicio");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor("null");

            Nodo tmp2 = new Nodo("ID");
            tmp2.setNumNodo(parser.contador++);
            tmp2.setValor(id);
            tmp.addHijo(tmp2);

            if (b != null){
                tmp.addHijo(b);
            }

            Nodo tmp3 = new Nodo("RETURN_TYPE");
            tmp3.setNumNodo(parser.contador++);
            tmp3.setValor(a);
            tmp.addHijo(tmp3);
            
            for(int i = beg.size()-1; i>=0;i--){
                tmp.addHijo(beg.get(i));
            }

            parser.padre = (Nodo) tmp;
            System.out.println("OK begin");
            RESULT=tmp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_body ::= FUNCTION error main_parameters IS begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_body ::= FUNCTION ID main_parameters error begin_main_body 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fin_parseo ::= 
            {
              Nodo RESULT =null;
		 System.out.println("Parseo ha finalizado.");
        MainGui.outputArea.append("Parseo ha finalizado \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_parseo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // begin_main_body ::= declaration_list BEGIN content END ID PYC 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                        LinkedList list = new LinkedList<Nodo>();                        
                        
                        Nodo tmp = new Nodo("DECLARATIONS");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = a.size()-1; i>=0;i--){
                            tmp.addHijo(a.get(i));
                        }

                        Nodo tmp2 = new Nodo("CONTENT");
                        tmp2.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp2.addHijo(e.get(i));
                        }
                        
                        list.add(tmp);

                        list.add(tmp2);
                    
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // begin_main_body ::= declaration_list error content END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // begin_main_body ::= declaration_list BEGIN content error ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // begin_main_body ::= declaration_list BEGIN content END error PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begin_main_body ::= declaration_list BEGIN content END ID error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_main_body ::= declaration_list BEGIN error END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_main_body ::= BEGIN content END ID PYC 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        Nodo tmp = new Nodo("CONTENT");
                        tmp.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        System.out.println("OK content");
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_main_body ::= error content END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // begin_main_body ::= BEGIN content error ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // begin_main_body ::= BEGIN content END error PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // begin_main_body ::= BEGIN content END ID error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // begin_main_body ::= BEGIN error END ID PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_main_body",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_list ::= procedure_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_list ::= procedure_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= variable_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("VARIABLE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = a.size()-1; i>=0;i--){
                            tmp.addHijo(a.get(i));
                            System.out.println(a.get(i).getNombre());
                        }
                        b.add((Nodo)tmp);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration_list ::= variable_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("VARIABLE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT=list;                
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_list ::= function_declaration declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_list ::= function_declaration 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= procedure_block declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= procedure_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(e);
                        RESULT=list;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_list ::= function_block declaration_list 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        b.add(a);
                        RESULT=b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_list ::= function_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        LinkedList list = new LinkedList<Nodo>();
                        System.out.println(e.getNombre());
                        list.add(e);
                        RESULT=list;                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_type ::= INT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_type ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_type ::= FLOAT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_type ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_declaration ::= PROCEDURE ID main_parameters PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("PROCEDURE_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo(tmp2);

                        tmp.addHijo(a);
                        RESULT = tmp;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_declaration ::= PROCEDURE error main_parameters PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_declaration ::= PROCEDURE ID main_parameters error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable_declaration ::= ID COMA variable_declaration 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("ID");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        System.out.println(tmp);
                        b.add(tmp);

                        RESULT = b;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration ::= ID error variable_declaration 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration ::= ID OPDEC var_type PYC 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("ID"); 
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        LinkedList list = new LinkedList<Nodo>();
                        Nodo tmp2 = new Nodo("VAR_TYPE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(x);
                        list.add(tmp2);
                        list.add(tmp);
                        System.out.println("ok variable declaration caso final");

                        RESULT = list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable_declaration ::= ID error var_type PYC 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable_declaration ::= ID OPDEC var_type error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_declaration ::= FUNCTION ID main_parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("FUNCTION_DECLARATION");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo(tmp2);

                        tmp.addHijo(a);

                        Nodo tmp3 = new Nodo("RETURN_TYPE");
                        tmp3.setNumNodo(parser.contador++);
                        tmp3.setValor(b);
                        tmp.addHijo(tmp3);

                        RESULT = tmp;    
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= FUNCTION error main_parameters RETURN var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_declaration ::= FUNCTION ID main_parameters error var_type PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= FUNCTION ID main_parameters RETURN var_type error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // content ::= assignment content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // content ::= assignment 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // content ::= while_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		           
            b.add(a);
            System.out.println("while + content ");
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // content ::= while_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            System.out.println("ok while");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // content ::= if_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            b.add(a);
			
			System.out.println("if + content ");
			RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // content ::= if_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("if block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // content ::= for_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			b.add(a);

			System.out.println("for + content ");
			RESULT=b;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // content ::= for_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("for_block");
			RESULT=list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // content ::= loop_block content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			tmp.setNumNodo(parser.contador++);*/
            b.add(a);
			
			System.out.println("loop + content ");
			RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // content ::= loop_block 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
			System.out.println("loop_block");
			RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // content ::= put content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);
          
            System.out.println("put + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // content ::= put 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            System.out.println("put");
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // content ::= get content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);

            System.out.println("get + content ");
            RESULT=b;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // content ::= get 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("get");
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // content ::= calling_subroutine content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // content ::= calling_subroutine 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // content ::= return_statement content 
            {
              List<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            b.add(a);
            RESULT=b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // content ::= return_statement 
            {
              List<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            LinkedList list = new LinkedList<Nodo>();
            list.add(e);
            RESULT=list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("content",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("PROCEDURE_BLOCK");
                    tmp.setNumNodo(parser.contador++);

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);

                    tmp.addHijo(tmp2);

                    Nodo tmp4 = new Nodo("DECLARATIONS");
                    tmp4.setNumNodo(parser.contador++);
                    for(int i = d.size()-1; i>=0;i--){
                        tmp4.addHijo(d.get(i));
                    }
                    tmp.addHijo(tmp4);

                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp3.addHijo(c.get(i));
                    }
                    tmp.addHijo((Nodo)tmp3);                    

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_block ::= PROCEDURE error main_parameters IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // procedure_block ::= PROCEDURE ID main_parameters IS declaration_list BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("PROCEDURE_BLOCK");
                    tmp.setNumNodo(parser.contador++);

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);

                    tmp.addHijo(tmp2);

                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp3.addHijo(c.get(i));
                    }
                    tmp.addHijo((Nodo)tmp3);                    

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // procedure_block ::= PROCEDURE error main_parameters IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_block ::= PROCEDURE ID main_parameters IS error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_block ::= PROCEDURE ID main_parameters IS BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("FUNCTION_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("null");

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);
                    tmp.addHijo(tmp2);

                    System.out.println("Prueba: "+ b);
                    tmp.addHijo(b);

                    Nodo tmp3 = new Nodo("RETURN_TYPE");
                    tmp3.setNumNodo(parser.contador++);
                    tmp3.setValor(a);
                    tmp.addHijo(tmp3);
                    
                    Nodo tmp4 = new Nodo("DECLARATIONS");
                    tmp4.setNumNodo(parser.contador++);
                    for(int i = d.size()-1; i>=0;i--){
                        tmp4.addHijo(d.get(i));
                    }
                    tmp.addHijo(tmp4);

                    Nodo tmp5 = new Nodo("CONTENT");
                    tmp5.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp5.addHijo(c.get(i));
                    }
                    tmp.addHijo(tmp5);

                    RESULT=tmp;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // function_block ::= FUNCTION error main_parameters RETURN var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_block ::= FUNCTION ID main_parameters error var_type IS declaration_list BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS declaration_list BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> c = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("FUNCTION_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    tmp.setValor("null");

                    Nodo tmp2 = new Nodo("ID");
                    tmp2.setNumNodo(parser.contador++);
                    tmp2.setValor(id);
                    tmp.addHijo(tmp2);

                    System.out.println("Prueba: "+ b);
                    tmp.addHijo(b);

                    Nodo tmp3 = new Nodo("RETURN_TYPE");
                    tmp3.setNumNodo(parser.contador++);
                    tmp3.setValor(a);
                    tmp.addHijo(tmp3);

                    Nodo tmp5 = new Nodo("CONTENT");
                    tmp5.setNumNodo(parser.contador++);
                    for(int i = c.size()-1; i>=0;i--){
                        tmp5.addHijo(c.get(i));
                    }
                    tmp.addHijo(tmp5);

                    RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_block ::= FUNCTION error main_parameters RETURN var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_block ::= FUNCTION ID main_parameters error var_type IS BEGIN content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS error content END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content error ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN content END ID error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_block ::= FUNCTION ID main_parameters RETURN var_type IS BEGIN error END ID PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // return_statement ::= RETURN TRUE PYC 
            {
              Nodo RESULT =null;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);
                        
                        Nodo tmp2 = new Nodo("BOOLEAN_VALUE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor("True");

                        tmp.addHijo(tmp2);
                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // return_statement ::= RETURN FALSE PYC 
            {
              Nodo RESULT =null;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);

                        Nodo tmp2 = new Nodo("BOOLEAN_VALUE");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor("False");

                        tmp.addHijo(tmp2);
                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // return_statement ::= RETURN ID PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);

                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);

                        tmp.addHijo(tmp2);

                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // return_statement ::= RETURN call_subroutine PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("RETURN_STATEMENT");
                        tmp.setNumNodo(parser.contador++);


                        tmp.addHijo(e);
                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // main_parameters ::= PARIZQ parameters_specification PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo tmp = new Nodo("MAIN_PARAMETERS");
                    tmp.setNumNodo(parser.contador++);

                    for(int i = a.size()-1; i>=0;i--){
                        tmp.addHijo(a.get(i));
                        System.out.println(i+") "+a.get(i).getNombre() );
                    }

                    RESULT=tmp;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // main_parameters ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // main_parameters ::= PARDER parameters_specification error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> d = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("PARAMETERS_SPECIFICATION");
                                tmp.setNumNodo(parser.contador++);

                                Nodo tmp2 = new Nodo("ID_LIST");
                                tmp2.setNumNodo(parser.contador++);
                                for(int i = b.size()-1; i>=0;i--){
                                    tmp2.addHijo(b.get(i));
                                }
                                tmp.addHijo((Nodo)tmp2);

                                
                                Nodo tmp3 = new Nodo("PARAMETER_MODE");
                                tmp3.setNumNodo(parser.contador++);
                                tmp3.setValor(c);   
                                tmp.addHijo(tmp3);
                                
                                Nodo tmp4 = new Nodo("VARIABLE_TYPE");
                                tmp4.setNumNodo(parser.contador++);
                                tmp4.setValor(a);   
                                tmp.addHijo(tmp4);

                                d.add(tmp);

                                RESULT=d;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameters_specification ::= ident_list error parameter_mode var_type PYC parameters_specification 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameters_specification ::= ident_list OPDEC parameter_mode var_type 
            {
              List<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Nodo tmp = new Nodo("PARAMETERS_SPECIFICATION");
                                tmp.setNumNodo(parser.contador++);

                                Nodo tmp2 = new Nodo("ID_LIST");
                                tmp2.setNumNodo(parser.contador++);
                                for(int i = b.size()-1; i>=0;i--){
                                    tmp2.addHijo(b.get(i));
                                }
                                tmp.addHijo((Nodo)tmp2);

                                
                                Nodo tmp3 = new Nodo("PARAMETER_MODE");
                                tmp3.setNumNodo(parser.contador++);
                                tmp3.setValor(c);   
                                tmp.addHijo(tmp3);
                                
                                Nodo tmp4 = new Nodo("VARIABLE_TYPE");
                                tmp4.setNumNodo(parser.contador++);
                                tmp4.setValor(a);   
                                tmp.addHijo(tmp4);
                                
                                LinkedList list = new LinkedList<Nodo>();
                                list.add(tmp);

                                RESULT=list;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameters_specification ::= ident_list error parameter_mode var_type 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_specification",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ident_list ::= ID COMA ident_list 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> b = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Nodo tmp = new Nodo("ID");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(id);   

                b.add(tmp); 
                RESULT=b;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ident_list ::= ID 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Nodo tmp = new Nodo("ID");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(id);   

                LinkedList list = new LinkedList<Nodo>();
                list.add(tmp);
                
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ident_list ::= error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ident_list ::= error COMA ident_list 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_mode ::= IN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="In"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter_mode ::= OUT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter_mode ::= IN OUT 
            {
              String RESULT =null;
		 RESULT="In Out"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameter_mode ::= 
            {
              String RESULT =null;
		 RESULT="null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_mode",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignment ::= ID OPASG E PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("MATHEMATICAL_EXPRESSION");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("null");
                tmp3.addHijo(e);
                tmp.addHijo(tmp3);

                RESULT=tmp;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment ::= ID error E PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment ::= ID OPASG error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment ::= ID OPASG E error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment ::= ID OPASG STR PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("STR");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor(str.toString().replaceAll("\"",""));
                tmp.addHijo(tmp3);
                
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment ::= ID error STR PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // assignment ::= ID OPASG STR error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // assignment ::= ID OPASG TRUE PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("BOOLEAN_VALUE");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("True");
                tmp.addHijo(tmp3);
                
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // assignment ::= ID error TRUE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // assignment ::= ID OPASG TRUE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assignment ::= ID OPASG FALSE PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("ASSIGNMENT");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor("null");

                Nodo tmp2 = new Nodo("ID");
                tmp2.setNumNodo(parser.contador++);
                tmp2.setValor(id);
                tmp.addHijo(tmp2);

                Nodo tmp3 = new Nodo("BOOLEAN_VALUE");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor("False");
                tmp.addHijo(tmp3);
                
                RESULT=tmp;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assignment ::= ID error FALSE PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assignment ::= ID OPASG FALSE error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E OPSUM T 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("OPSUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(c);
        tmp.addHijo((Nodo)a);
        tmp.addHijo((Nodo)b);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= T 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        System.out.println("OK");
        RESULT=e;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // T ::= T OPMULT F 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("OPMULT");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(c);
        tmp.addHijo((Nodo)a);
        tmp.addHijo((Nodo)b);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // T ::= F 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        System.out.println("OK");
        RESULT=e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // F ::= NUM 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("NUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(e);
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // F ::= ID 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(e);
        System.out.println("OK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // F ::= call_subroutine 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // F ::= PARIZQ E PARDER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        Nodo tmp = new Nodo("PARENTHESIS");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo)e);
        System.out.println("EOK");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // loop_block ::= LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                    Nodo tmp = new Nodo("LOOP_BLOCK");
                    tmp.setNumNodo(parser.contador++);
                    
                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp3.addHijo((Nodo)a.get(i));
                    }
                    tmp.addHijo(tmp3);
                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }
                    System.out.println("loop_block");
                    RESULT=tmp;
			
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // loop_block ::= LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // loop_block ::= LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // loop_block ::= LOOP error exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // while_block ::= WHILE condition LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            Nodo tmp = new Nodo("WHILE_BLOCK");
            tmp.setNumNodo(parser.contador++);
            
            tmp.addHijo((Nodo)e);
            
            Nodo tmp2 = new Nodo("CONTENT");
            tmp2.setNumNodo(parser.contador++);
            for(int i = f.size()-1; i>=0;i--){
                tmp2.addHijo(f.get(i));
            }
            tmp.addHijo((Nodo)tmp2);

            if(g != null){
                tmp.addHijo((Nodo)g);
            }
            System.out.println("ok in while-block ");
            RESULT=tmp;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_block ::= WHILE condition error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // while_block ::= WHILE condition LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // while_block ::= WHILE condition LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // while_block ::= WHILE condition LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // while_block ::= WHILE condition LOOP error exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // exit_cycle ::= EXIT WHEN condition PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo tmp = new Nodo("EXIT_CYCLE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                RESULT=tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // exit_cycle ::= 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // exit_cycle ::= EXIT error condition PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // exit_cycle ::= EXIT WHEN condition error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_cycle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
				Nodo tmp = new Nodo("FOR_BLOCK");
    			tmp.setNumNodo(parser.contador++);

				Nodo tmp3 = new Nodo("ID");
				tmp3.setValor(id);
				tmp3.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp3);
				
				Nodo tmp4 = new Nodo("NUM");
				tmp4.setValor(num1);
				tmp4.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp4);

				Nodo tmp6 = new Nodo("NUM");
				tmp6.setValor(num2);
				tmp6.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp6);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = a.size()-1; i>=0;i--){
                    tmp2.addHijo(a.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

    			System.out.println("for_block");
    			RESULT=tmp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // for_block ::= FOR error NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_block ::= FOR ID error DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_block ::= FOR ID NUM error NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_block ::= FOR ID NUM DOSPUNTOS error LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // for_block ::= FOR ID NUM DOSPUNTOS NUM error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP error exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);
					


					Nodo tmp6 = new Nodo("NUM");
					tmp6.setValor(num2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // for_block ::= FOR error ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // for_block ::= FOR ID ID error NUM LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // for_block ::= FOR ID ID DOSPUNTOS error LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // for_block ::= FOR ID ID DOSPUNTOS NUM error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // for_block ::= FOR ID ID DOSPUNTOS NUM LOOP error exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("NUM");
					tmp4.setValor(num1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);					

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id1);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // for_block ::= FOR error NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // for_block ::= FOR ID error DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // for_block ::= FOR ID NUM error ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // for_block ::= FOR ID NUM DOSPUNTOS ID error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_block ::= FOR ID NUM DOSPUNTOS ID LOOP error exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Nodo> a = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					Nodo tmp = new Nodo("FOR_BLOCK");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);

                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }

                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // for_block ::= FOR error ID DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // for_block ::= FOR ID ID error ID LOOP content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // for_block ::= FOR ID ID DOSPUNTOS ID error content exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END LOOP error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_block ::= FOR ID ID DOSPUNTOS ID LOOP error exit_cycle END LOOP PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // if_block ::= IF condition THEN content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Nodo tmp = new Nodo("IF_BLOCK");
				tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }

                tmp.addHijo((Nodo)tmp2);

                if(a != null){
                    tmp.addHijo((Nodo)a);
                }

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // if_block ::= IF condition error content elsif_block else_block END IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // if_block ::= IF condition THEN content elsif_block else_block error IF PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // if_block ::= IF condition THEN content elsif_block else_block END error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // if_block ::= IF condition THEN content elsif_block else_block END IF error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // elsif_block ::= ELSIF condition THEN content elsif_block 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSIF_BLOCK");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);
                
                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(r != null){
                    tmp.addHijo((Nodo)r);
                }

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // elsif_block ::= 
            {
              Nodo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // elsif_block ::= ELSIF condition error content elsif_block 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // else_block ::= ELSE content 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("ELSE_BLOCK");
                tmp.setNumNodo(parser.contador++);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // else_block ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // condition ::= boolean_expr OR condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("OR");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);
                
                

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // condition ::= boolean_expr AND condition 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("AND");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);

                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // condition ::= boolean_expr 
            {
              Nodo RESULT =null;
		int boolExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo boolExp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);
                System.out.println("just booleanExp");
                RESULT=tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // condition ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // boolean_expr ::= rel_operand OPREL rel_operand 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprel_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprel_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String oprel_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("OPREL");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    tmp.setValor(oprel_val.toString());
    RESULT=tmp;
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // rel_operand ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(id);
        System.out.println("id rel operando");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // rel_operand ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo tmp = new Nodo("NUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(num);
        System.out.println("num rel operando");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // rel_operand ::= call_subroutine 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // rel_operand ::= error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_operand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // put ::= PUT PARIZQ NUM PARDER PYC 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // put ::= PUT error NUM PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // put ::= PUT PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // put ::= PUT PARIZQ NUM error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // put ::= PUT PARIZQ STR PARDER PYC 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo tmp = new Nodo("STR");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(str.toString().replaceAll("\"",""));
        System.out.println("str in put");
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // put ::= PUT error STR PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // put ::= PUT PARIZQ STR error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // put ::= PUT PARIZQ STR PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // put ::= PUT PARIZQ ID PARDER PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(id);
        RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // put ::= PUT error ID PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // put ::= PUT PARIZQ ID error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // put ::= PUT PARIZQ ID PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // get ::= GET PARIZQ ID PARDER PYC 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo tmp = new Nodo("ID");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(id);
    System.out.println("id in get");
    RESULT=tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // get ::= GET error ID PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // get ::= GET PARIZQ error PARDER PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // get ::= GET PARIZQ ID error PYC 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // get ::= GET PARIZQ ID PARDER error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // calling_subroutine ::= call_subroutine PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // calling_subroutine ::= call_subroutine error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("calling_subroutine",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // call_subroutine ::= ID PARIZQ parameter_values PARDER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Nodo> f = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                        Nodo tmp = new Nodo("Call_Subroutine");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor("NULL");

                        Nodo tmp2 = new Nodo("ID");
                        tmp2.setNumNodo(parser.contador++);
                        tmp2.setValor(id);
                        tmp.addHijo((Nodo)tmp2);

                        Nodo tmp3 = new Nodo("PARAMETER_VALUES");
                        tmp3.setNumNodo(parser.contador++);
                        for(int i = f.size()-1; i>=0;i--){
                            tmp3.addHijo(f.get(i));
                        }

                        tmp.addHijo(tmp3);

                        RESULT = tmp;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // call_subroutine ::= ID PARIZQ parameter_values error 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_subroutine",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parameter_values ::= ID COMA parameter_values 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("ID");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        e.add(tmp);
                        
                        RESULT=e;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // parameter_values ::= ID 
            {
              List<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("ID");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(id);
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT= list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // parameter_values ::= error COMA parameter_values 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // parameter_values ::= error 
            {
              List<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // parameter_values ::= NUM COMA parameter_values 
            {
              List<Nodo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Nodo> e = (List<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        Nodo tmp = new Nodo("NUM");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(n);
                        e.add(tmp);
                        RESULT=e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // parameter_values ::= NUM 
            {
              List<Nodo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo tmp = new Nodo("NUM");
                        tmp.setNumNodo(parser.contador++);
                        tmp.setValor(n);
                        LinkedList list = new LinkedList<Nodo>();
                        list.add(tmp);
                        RESULT= list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_values",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
