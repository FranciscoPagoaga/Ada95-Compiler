package Pack;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

parser code
{:
	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}
:}



//terminales
terminal PROCEDURE, FUNCTION, RETURN, IS, BEGIN, END, IF, THEN, ELSE, ELSIF, FOR, WHILE, LOOP, EXIT, WHEN, AND, OR, TRUE, FALSE, IN, OUT;
terminal String INT, BOOLEAN, FLOAT;
terminal String OPSUM, OPMULT, OPASG, OPDEC, PARIZQ, PARDER, PYC, OPREL, COMA, DOSPUNTOS;
terminal PUT, GET;
terminal String NUM;
terminal String ID;
terminal STR; 

//no terminales
non terminal Nodo main_body, begin_main_body;
non terminal List<Nodo> content;
non terminal Nodo declaration_list, function_declaration, variable_declaration, procedure_declaration, function_block, procedure_block;
non terminal Nodo main_parameters, parameters, parameters_specification, ident_list, parameter_mode;
non terminal Nodo loop_block, for_block, while_block, exit_cycle, if_block, elsif_block, else_block;
non terminal Nodo calling_subroutine, call_subroutine, parameter_values;
non terminal Nodo condition, rel_operand, boolean_expr;
non terminal Nodo assignment; 
non terminal Nodo put, get;
non terminal Nodo E, T, F;
non terminal Nodo var_type;
non terminal Nodo fin_parseo;

precedence left OPREL;


start with main_body;

//Gramaticas

main_body ::= PROCEDURE ID:id main_parameters IS begin_main_body: beg  {:
	Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);
        
        Nodo tmp2 = new Nodo("PROCEDURE"); 
        tmp2.setNumNodo(parser.contador++);
        tmp2.setValor("null");
        tmp.addHijo((Nodo)tmp2);

        Nodo tmp3 = new Nodo("ID"); 
        tmp3.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        tmp.addHijo((Nodo)tmp3);
       
        
        tmp.addHijo((Nodo)beg);
        
	parser.padre = (Nodo) tmp;
	System.out.println("OK begin");
        RESULT=tmp;
:}
        // Errores
        | error ID main_parameters IS begin_main_body
        | PROCEDURE error main_parameters IS begin_main_body
        | PROCEDURE ID main_parameters error begin_main_body
        // Caso de function_block
        | FUNCTION  ID main_parameters RETURN var_type IS begin_main_body 
        // Errores
        | FUNCTION error main_parameters IS begin_main_body
        | FUNCTION ID main_parameters error begin_main_body
        ;

begin_main_body ::= declaration_list BEGIN content END ID PYC //node content
                    // Error
                    | declaration_list error content END ID PYC
                    | declaration_list BEGIN content error ID PYC
                    | declaration_list BEGIN content END error PYC
                    | declaration_list BEGIN content END ID error
                    | declaration_list BEGIN error END ID PYC
                    // Caso sin declaraciones
                    | BEGIN content:e END ID PYC {:
                        Nodo tmp = new Nodo("CONTENT");
                        tmp.setNumNodo(parser.contador++);
                        System.out.println(e);
                        for(int i = e.size()-1; i>=0;i--){
                            tmp.addHijo(e.get(i));
                        }
                        System.out.println("OK content");
                        RESULT=tmp;
                    :}
                    // Error
                    | error content END ID PYC 
                    | BEGIN content error ID PYC
                    | BEGIN content END error PYC
                    | BEGIN content END ID error
                    | BEGIN error END ID PYC
                    ;

												

declaration_list ::= procedure_declaration declaration_list
                    | procedure_declaration
                    | variable_declaration declaration_list
                    | variable_declaration
                    | function_declaration declaration_list
                    | function_declaration
                    | procedure_block declaration_list
                    | procedure_block
                    | function_block declaration_list
                    | function_block
                    ;

var_type ::= INT | BOOLEAN | FLOAT
                | error
                ;

procedure_declaration ::= PROCEDURE ID parameters PYC
                    // Errores 
                    | PROCEDURE error parameters PYC
                    | PROCEDURE ID parameters error
                    ;

variable_declaration ::= ID COMA variable_declaration
                    //Errores 
                    | ID error variable_declaration
                    // Caso final
                    | ID OPDEC var_type PYC
                    //Errores
                    | ID error var_type PYC
                    | ID OPDEC var_type error
                    ;

function_declaration ::= FUNCTION ID parameters RETURN var_type PYC
                        // Errores 
                        | FUNCTION error parameters RETURN var_type PYC
                        | FUNCTION ID parameters error var_type PYC
                        | FUNCTION ID parameters RETURN var_type error
                        ;


content ::= assignment content | assignment
        | while_block:a content: b {:           
            Nodo tmp = new Nodo("WHILE-BLOCK");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);

            b.add(tmp);
            System.out.println("while + content ");
            RESULT=b;
        :}  

            
        | while_block:e {:
            Nodo tmp = new Nodo("WHILE-BLOCK");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("ok while");
            RESULT=list;
        :}
        | if_block:a content:b {:
            Nodo tmp = new Nodo("IF_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
            b.add(tmp);
			
			System.out.println("if + content ");
			RESULT=b;

        :}

        | if_block: e {: 
            Nodo tmp = new Nodo("IF_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("if block");
			RESULT=list;
        :}
        | for_block:a content:b {:
			Nodo tmp = new Nodo("FOR_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			b.add(tmp);

			System.out.println("for + content ");
			RESULT=b;
		:} 

		| for_block: e {:
			Nodo tmp = new Nodo("FOR_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("for_block");
			RESULT=list;
		:}
        
        | loop_block:a content:b {:
            Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)a);
			tmp.setNumNodo(parser.contador++);
            b.add(tmp);
			
			System.out.println("loop + content ");
			RESULT=b;
        :} 
        
        | loop_block:e {: 
            Nodo tmp = new Nodo("LOOP_BLOCK");
			tmp.setNumNodo(parser.contador++);
			tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
			System.out.println("loop_block");
			RESULT=list;
        :}
		
        | put:a content: b {:
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);
          
            System.out.println("put + content ");
            RESULT=b;

        :} 

        | put: e {:
            Nodo tmp = new Nodo("PUT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            System.out.println("put");
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            
            RESULT=list;
        :} 

        | get:a content:b  {:

            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
            b.add(tmp);

            System.out.println("get + content ");
            RESULT=b;

        :} 

        | get: e {:
            Nodo tmp = new Nodo("GET");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            LinkedList list = new LinkedList<Nodo>();
            list.add(tmp);
            System.out.println("get");
            RESULT=list;
        :}  
        | calling_subroutine content | calling_subroutine
        ;

procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID PYC
                // errores
                | PROCEDURE error parameters IS declaration_list BEGIN content END ID PYC
                | PROCEDURE ID parameters IS declaration_list error content END ID PYC
                | PROCEDURE ID parameters IS declaration_list BEGIN content error ID PYC
                | PROCEDURE ID parameters IS declaration_list BEGIN content END error PYC
                | PROCEDURE ID parameters IS declaration_list BEGIN content END ID error
                ;

function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID PYC
                // Errores
                | FUNCTION error parameters RETURN var_type IS declaration_list BEGIN content END ID PYC
                | FUNCTION ID parameters error var_type IS declaration_list BEGIN content END ID PYC
                | FUNCTION ID parameters RETURN var_type IS declaration_list error content END ID PYC
                | FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content error ID PYC
                | FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END error PYC
                | FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID error
                ;
		
main_parameters ::= PARIZQ parameters_specification:a {:RESULT = a;:} PARDER
                |
                //Errores
                | PARDER parameters_specification error
                ;

parameters ::= PARIZQ parameters_specification PARDER
                //Errores
                | error parameters_specification PARDER
                | PARIZQ parameters_specification error
                ;

parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification
                            // Error
                            | ident_list error parameter_mode var_type PYC parameters_specification
                            //Caso final
                            | ident_list OPDEC parameter_mode var_type 
                            //Error
                            | ident_list error parameter_mode var_type
											;
												
ident_list ::= ID COMA ident_list
            | ID
            //Errores
            | error
            | error COMA ident_list
            ;
				
parameter_mode ::= IN | OUT | IN OUT
                |
                ;





//gramatica

assignment ::= ID OPASG E PYC
            // Errores expresion matematica 
            | ID error E PYC
            | ID OPASG error PYC
            | ID OPASG E error
            // Subprograma 
            | ID OPASG call_subroutine PYC
            // Errores Subprograma 
            | ID error call_subroutine PYC
            | ID OPASG call_subroutine error
            // String 
            | ID OPASG STR PYC
            // Errores String 
            | ID error STR PYC
            | ID OPASG STR error
            // Boolean True  
            | ID OPASG TRUE PYC
            // Errores True 
            | ID error TRUE PYC
            | ID OPASG TRUE error
            // Boolean False 
            | ID OPASG FALSE PYC
            // Errores False 
            | ID error FALSE PYC
            | ID OPASG FALSE error			
            ;

	

E::= E:a OPSUM T: b{:
    Nodo tmp = new Nodo("OPSUM");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    RESULT=tmp;
:};

E::= T :e{:
    Nodo tmp = new Nodo("T");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("OK");
    RESULT=tmp;
:};

T::= T:a OPMULT F : b{:
    Nodo tmp = new Nodo("OPMULT");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    RESULT=tmp;
:};
T::= F :e{:
    Nodo tmp = new Nodo("F");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("OK");
    RESULT=tmp;
:} ;

F::= NUM:e{:
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    //tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    tmp.setValor(e);
    System.out.println("OK");
    RESULT=tmp;
:};

F::= PARIZQ E:e PARDER {:
    Nodo tmp = new Nodo("E");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    //parser.padre = (Nodo) tmp;
    System.out.println("EOK");
    RESULT=tmp;
:} ; 

//bloque loop
loop_block ::= LOOP content:a exit_cycle:b END LOOP PYC {: 
                    Nodo tmp = new Nodo("loop_block");
                    tmp.setNumNodo(parser.contador++);
                    
                    Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp3.addHijo((Nodo)a.get(i));
                    }
                    tmp.addHijo(tmp3);
                    /*Nodo tmp3 = new Nodo("CONTENT");
                    tmp3.setValor("null");
                    tmp3.addHijo((Nodo)a);
                    tmp3.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)tmp3);*/

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }
                    System.out.println("loop_block");
                    RESULT=tmp;
			
                :}
				//Errores
				| LOOP content exit_cycle error LOOP PYC
				| LOOP content exit_cycle END LOOP error
				;



// bloque while
while_block ::= WHILE condition:e  LOOP content: f  exit_cycle:g  END LOOP PYC {:
            Nodo tmp = new Nodo("CONDITION-CONTENT");
            tmp.setNumNodo(parser.contador++);
            //tmp.addHijo((Nodo)e);
            Nodo tmp2 = new Nodo("CONTENT");
            tmp2.setNumNodo(parser.contador++);
            for(int i = f.size()-1; i>=0;i--){
                tmp2.addHijo(f.get(i));
            }
            tmp.addHijo((Nodo)tmp2);

            tmp.addHijo((Nodo)g);
            System.out.println("ok in while-block ");
            RESULT=tmp;

        :}
                //Error
                | WHILE condition error content exit_cycle END LOOP PYC
                | WHILE condition LOOP content exit_cycle error LOOP PYC
                | WHILE condition LOOP content exit_cycle END error PYC
                | WHILE condition LOOP content exit_cycle END LOOP error
                ;

exit_cycle ::=EXIT WHEN condition:e PYC {:
                Nodo tmp = new Nodo("EXIT_CYCLE");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                RESULT=tmp;
                :}
                | {: :}
                //Errores
                | EXIT error condition PYC
                | EXIT WHEN condition error
				;

// Bloque for
for_block ::= FOR ID:id NUM:num1 DOSPUNTOS NUM:num2 LOOP content:a exit_cycle:b END LOOP PYC {: 
				Nodo tmp = new Nodo("for_block");
    			tmp.setNumNodo(parser.contador++);

				Nodo tmp3 = new Nodo("ID");
				tmp3.setValor(id);
				tmp3.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp3);
				
				Nodo tmp4 = new Nodo("NUM");
				tmp4.setValor(num1);
				tmp4.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp4);

				Nodo tmp6 = new Nodo("NUM");
				tmp6.setValor(num2);
				tmp6.setNumNodo(parser.contador++);
				tmp.addHijo((Nodo)tmp6);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = a.size()-1; i>=0;i--){
                    tmp2.addHijo(a.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

    			System.out.println("for_block");
    			RESULT=tmp;
			:}
				//Errores
				| FOR error NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC
				| FOR ID error DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC
				| FOR ID NUM error NUM LOOP content exit_cycle END LOOP PYC
				| FOR ID NUM DOSPUNTOS error LOOP content exit_cycle END LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM error content exit_cycle END LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END error PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content exit_cycle END LOOP error
				// Caso ID NUM
				| FOR ID:id ID:id1 DOSPUNTOS NUM:num2 LOOP content:a exit_cycle:b END LOOP PYC {:
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);
					


					Nodo tmp6 = new Nodo("NUM");
					tmp6.setValor(num2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				:}
				// Errores
				| FOR error ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP PYC
				| FOR ID ID error NUM LOOP content exit_cycle END LOOP PYC
				| FOR ID ID DOSPUNTOS error LOOP content exit_cycle END LOOP PYC
				| FOR ID ID DOSPUNTOS NUM error content exit_cycle END LOOP PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle error LOOP PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END error PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content exit_cycle END LOOP error
				// Caso NUM ID
				| FOR ID:id NUM:num1 DOSPUNTOS ID:id1 LOOP content:a exit_cycle:b END LOOP PYC {: 
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("NUM");
					tmp4.setValor(num1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);					

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id1);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);
					
                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }
                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				:}
				// Error
				| FOR error NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC
				| FOR ID error DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC
				| FOR ID NUM error ID LOOP content exit_cycle END LOOP PYC
				| FOR ID NUM DOSPUNTOS ID error content exit_cycle END LOOP PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END error PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content exit_cycle END LOOP error
				// Caso ID ID
				| FOR ID:id ID:id1 DOSPUNTOS ID:id2 LOOP content:a exit_cycle:b END LOOP PYC {: 
					Nodo tmp = new Nodo("for_block");
					tmp.setNumNodo(parser.contador++);

					Nodo tmp3 = new Nodo("ID");
					tmp3.setValor(id);
					tmp3.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp3);
					
					Nodo tmp4 = new Nodo("ID");
					tmp4.setValor(id1);
					tmp4.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp4);

					Nodo tmp6 = new Nodo("ID");
					tmp6.setValor(id2);
					tmp6.setNumNodo(parser.contador++);
					tmp.addHijo((Nodo)tmp6);

                    Nodo tmp2 = new Nodo("CONTENT");
                    tmp2.setNumNodo(parser.contador++);
                    System.out.println(a);
                    for(int i = a.size()-1; i>=0;i--){
                        tmp2.addHijo(a.get(i));
                    }

                    tmp.addHijo((Nodo)tmp2);

                    if(b != null){
                        tmp.addHijo((Nodo)b);
                    }

					System.out.println("for_block");
					RESULT=tmp;
				:}
				//Error
				| FOR error ID DOSPUNTOS ID LOOP content exit_cycle END LOOP PYC
				| FOR ID ID error ID LOOP content exit_cycle END LOOP PYC
				| FOR ID ID DOSPUNTOS ID error content exit_cycle END LOOP PYC
				| FOR ID ID DOSPUNTOS ID LOOP content exit_cycle error LOOP PYC
				| FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END error PYC
				| FOR ID ID DOSPUNTOS ID LOOP content exit_cycle END LOOP error
				;

// bloque if
if_block ::= IF condition:e THEN content:f elsif_block:a else_block:b END IF PYC {:
                Nodo tmp = new Nodo("if_block");
				tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }

                tmp.addHijo((Nodo)tmp2);

                if(a != null){
                    tmp.addHijo((Nodo)a);
                }

                if(b != null){
                    tmp.addHijo((Nodo)b);
                }

                RESULT=tmp;
            :}
            | IF condition error content elsif_block else_block END IF PYC
            | IF condition THEN content elsif_block else_block error IF PYC
            | IF condition THEN content elsif_block else_block END error PYC
            | IF condition THEN content elsif_block else_block END IF error
            ;

//Bloque elsif
elsif_block ::= ELSIF condition:e THEN content:f elsif_block:r {:
                Nodo tmp = new Nodo("ELSIF_BLOCK");
                tmp.setNumNodo(parser.contador++);

                tmp.addHijo((Nodo)e);
                
                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                if(r != null){
                    tmp.addHijo((Nodo)r);
                }

                RESULT=tmp;
            :}
            | {: :}
            // errores
            | ELSIF condition error content elsif_block
            ;
	
//bloque else
else_block ::= ELSE content:f {:
                Nodo tmp = new Nodo("ELSE_BLOCK");
                tmp.setNumNodo(parser.contador++);

                Nodo tmp2 = new Nodo("CONTENT");
                tmp2.setNumNodo(parser.contador++);
                for(int i = f.size()-1; i>=0;i--){
                    tmp2.addHijo(f.get(i));
                }
                tmp.addHijo((Nodo)tmp2);

                RESULT=tmp;
            :}
            |
            ;

condition ::= boolean_expr: boolExp OR condition:a {:
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("OR");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);
                
                

                System.out.println("just booleanExp");
                RESULT=tmp;
            :}

            | boolean_expr: boolExp AND condition:a {:
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);

                Nodo tmp2 = new Nodo("AND");
                tmp2.setValor("null");
                tmp2.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)tmp2);

                tmp.addHijo((Nodo)a);

                System.out.println("just booleanExp");
                RESULT=tmp;
            :}

            | boolean_expr: boolExp {:
                Nodo tmp = new Nodo("BooleanExp");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)boolExp);
                System.out.println("just booleanExp");
                RESULT=tmp;
            :}
            //errores
            | error
            ;

boolean_expr ::= rel_operand:a OPREL:oprel_val rel_operand:b {:
    Nodo tmp = new Nodo("OPREL");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
    tmp.addHijo((Nodo)b);
    tmp.setValor(oprel_val.toString());
    RESULT=tmp;
   :};

rel_operand ::= ID: id{:
        Nodo tmp = new Nodo("ID");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(id);
        System.out.println("id rel operando");
        RESULT=tmp;
    :} 
    |NUM:num {:
        Nodo tmp = new Nodo("NUM");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(num);
        System.out.println("num rel operando");
        RESULT=tmp;
    :} 
    | call_subroutine
    | error
                ;

put ::= PUT PARIZQ NUM:num PARDER PYC {:
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;
    :} 
    //Errores
    | PUT error NUM PARDER PYC
    | PUT PARIZQ error PARDER PYC
    | PUT PARIZQ NUM error PYC
    | PUT PARIZQ NUM PARDER error
    //Caso String
    | PUT PARIZQ STR:str PARDER PYC {:
        Nodo tmp = new Nodo("STR");
        tmp.setNumNodo(parser.contador++);
        tmp.setValor(str.toString().replaceAll("\"",""));
        System.out.println("str in put");
        RESULT=tmp;
    :} 
    //Errores
    | PUT error STR PARDER PYC
    | PUT PARIZQ STR error PYC
    | PUT PARIZQ STR PARDER error
    ;

get ::= GET PARIZQ ID :id PARDER PYC {:
    Nodo tmp = new Nodo("ID");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(id);
    System.out.println("id in get");
    RESULT=tmp;
    :} 
    //Errores
    | GET error ID PARDER PYC
    | GET PARIZQ error PARDER PYC
    | GET PARIZQ ID error PYC
    | GET PARIZQ ID PARDER error
    

    
    ;




calling_subroutine ::= call_subroutine PYC
                    // Error
                    | call_subroutine error
                    ;

call_subroutine ::= ID PARIZQ parameter_values PARDER
                    //Error
                    | ID PARIZQ parameter_values error
                    ;

parameter_values ::= ID COMA parameter_values
                    | ID
                    // Errores
                    | error COMA parameter_values
                    | error
                    //Caso Numero
                    | NUM COMA parameter_values
                    | NUM
                    ;