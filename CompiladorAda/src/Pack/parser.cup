package Pack;

import java.io.*;
import java_cup.runtime.*;

parser code
{:
	
        
        public String resultado="";
	public Nodo padre;
	public int contador = 1;
        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                MainGui.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                MainGui.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}
:}



//terminales
terminal PROCEDURE, FUNCTION, RETURN, IS, BEGIN, END, IF, THEN, ELSE, ELSIF, FOR, WHILE, LOOP, EXIT, WHEN, AND, OR, TRUE, FALSE, IN, OUT;
terminal String INT, BOOLEAN, FLOAT;
terminal String OPSUM, OPMULT, OPASG, OPDEC, PARIZQ, PARDER, PYC, OPREL, COMA, DOSPUNTOS;
terminal PUT, GET;
terminal String NUM;
terminal String ID;
terminal STR; 

//no terminales
non terminal main_body, begin_main_body;
non terminal content;
non terminal declaration_list, function_declaration, variable_declaration, procedure_declaration, function_block, procedure_block;
non terminal main_parameters, parameters, parameters_specification, ident_list, parameter_mode;
non terminal loop_block, for_block, while_block, salir_ciclo, if_block, elsif_block, else_block;
non terminal calling_subroutine, call_subroutine, parameter_values;
non terminal condition, rel_operand, boolean_expr;
non terminal assignment; 
non terminal put, get;
non terminal E, T, F;
non terminal var_type;
non terminal fin_parseo;

precedence left OPREL;


start with main_body;

//Gramaticas

main_body ::= PROCEDURE:pro ID:id main_parameters IS begin_main_body: beg  {:
	Nodo tmp = new Nodo("Inicio");
        tmp.setNumNodo(parser.contador++);
        
        Nodo tmp2 = new Nodo("PROCEDURE"); 
        tmp.setNumNodo(parser.contador++);
        tmp2.setValor("null");
        
        Nodo tmp3 = new Nodo("ID"); 
        tmp.setNumNodo(parser.contador++);
        tmp3.setValor(id);
        
        tmp.addHijo((Nodo)tmp2);
        tmp.addHijo((Nodo)tmp3);
        tmp.addHijo((Nodo)beg);
        
	parser.padre = (Nodo) tmp;
	System.out.println("OK begin");
        RESULT=tmp;
:}
				// Errores
				| error ID main_parameters IS begin_main_body
				| PROCEDURE error main_parameters IS begin_main_body
				| PROCEDURE ID main_parameters error begin_main_body
				// Caso de function_block
				| FUNCTION  ID main_parameters RETURN var_type IS begin_main_body 
				// Errores
				| FUNCTION error main_parameters IS begin_main_body
				| FUNCTION ID main_parameters error begin_main_body
				;

						begin_main_body ::= declaration_list BEGIN content END ID PYC 
												// Error
												| declaration_list error content END ID PYC
												| declaration_list BEGIN content error ID PYC
												| declaration_list BEGIN content END error PYC
												| declaration_list BEGIN content END ID error
												// Caso sin declaraciones
												| BEGIN content:e END ID PYC {:
                                                                                                        Nodo tmp = new Nodo("CONTENT");
                                                                                                        tmp.setNumNodo(parser.contador++);
                                                                                                        tmp.addHijo((Nodo)e);
                                                                                                            //parser.padre = (Nodo) tmp;
                                                                                                            System.out.println("OK begin main body");
                                                                                                        RESULT=tmp;
                                                                                                                    :}
												// Error
												| error content END ID PYC 
												| BEGIN content error ID PYC
												| BEGIN content END error PYC
												| BEGIN content END ID error
												;

												

declaration_list ::= procedure_declaration declaration_list
					| procedure_declaration
					| variable_declaration declaration_list
					| variable_declaration
					| function_declaration declaration_list
					| function_declaration
					| procedure_block declaration_list
					| procedure_block
					| function_block declaration_list
					| function_block
					;

					var_type ::= INT | BOOLEAN | FLOAT
							| error
							;

procedure_declaration ::= PROCEDURE ID parameters PYC
								// Errores 
								| PROCEDURE error parameters PYC
								| PROCEDURE ID parameters error
								;

variable_declaration ::= ID COMA variable_declaration
						//Errores 
						| ID error variable_declaration
						// Caso final
						| ID OPDEC var_type PYC
						//Errores
						| ID error var_type PYC
						| ID OPDEC var_type error
						;

function_declaration ::= FUNCTION ID parameters RETURN var_type PYC
						// Errores 
						| FUNCTION error parameters RETURN var_type PYC
						| FUNCTION ID parameters error var_type PYC
						| FUNCTION ID parameters RETURN var_type error
						;


content ::= assignment content | assignment
 		| while_block content | while_block
		| if_block content | if_block
		| for_block content | for_block
		| loop_block content | loop_block
		
| put: e content: a {:
    Nodo tmp = new Nodo("PUT");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    tmp.addHijo((Nodo)a);
    System.out.println("put + content ");
    RESULT=tmp;
:} 

| put: e {:
    Nodo tmp = new Nodo("PUT");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    System.out.println("put");
    RESULT=tmp;
:} 
		| get content | get
		| calling_subroutine content | calling_subroutine
		;

procedure_block ::= PROCEDURE ID parameters IS declaration_list BEGIN content END ID PYC
				// errores
				| PROCEDURE error parameters IS declaration_list BEGIN content END ID PYC
				| PROCEDURE ID parameters IS declaration_list error content END ID PYC
				| PROCEDURE ID parameters IS declaration_list BEGIN content error ID PYC
				| PROCEDURE ID parameters IS declaration_list BEGIN content END error PYC
				| PROCEDURE ID parameters IS declaration_list BEGIN content END ID error
				;

function_block ::= FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID PYC
			// Errores
			| FUNCTION error parameters RETURN var_type IS declaration_list BEGIN content END ID PYC
			| FUNCTION ID parameters error var_type IS declaration_list BEGIN content END ID PYC
			| FUNCTION ID parameters RETURN var_type IS declaration_list error content END ID PYC
			| FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content error ID PYC
			| FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END error PYC
			| FUNCTION ID parameters RETURN var_type IS declaration_list BEGIN content END ID error
			;
		
		main_parameters ::= PARIZQ parameters_specification:a {:RESULT = a;:} PARDER
								|
								//Errores
								| PARDER parameters_specification error
								;
		
		parameters ::= PARIZQ parameters_specification PARDER
						//Errores
						| error parameters_specification PARDER
						| PARIZQ parameters_specification error
						;
				
				parameters_specification ::= ident_list OPDEC parameter_mode var_type PYC parameters_specification
												// Error
												| ident_list error parameter_mode var_type PYC parameters_specification
												//Caso final
												| ident_list OPDEC parameter_mode var_type 
												//Error
												| ident_list error parameter_mode var_type
											;
												
				ident_list ::= ID COMA ident_list
										| ID
										//Errores
										| error
										| error COMA ident_list
										;
				
				parameter_mode ::= IN | OUT | IN OUT
								|
								;





//gramatica

assignment ::= ID OPASG E PYC
				// Errores expresion matematica 
				| ID error E PYC
				| ID OPASG error PYC
				| ID OPASG E error
				// Subprograma 
				| ID OPASG call_subroutine PYC
				// Errores Subprograma 
				| ID error call_subroutine PYC
				| ID OPASG call_subroutine error
				// String 
				| ID OPASG STR PYC
				// Errores String 
				| ID error STR PYC
				| ID OPASG STR error
				// Boolean True  
				| ID OPASG TRUE PYC
				// Errores True 
				| ID error TRUE PYC
				| ID OPASG TRUE error
				// Boolean False 
				| ID OPASG FALSE PYC
				// Errores False 
				| ID error FALSE PYC
				| ID OPASG FALSE error			
				;

	

        E::= E:a OPSUM T: b{:
                Nodo tmp = new Nodo("OPSUM");
                tmp.setNumNodo(parser.contador++);
                tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo)b);
                RESULT=tmp;
        :};

        E::= T :e{:
                Nodo tmp = new Nodo("T");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
                //parser.padre = (Nodo) tmp;
                System.out.println("OK");
            RESULT=tmp;
        :};

        T::= T:a OPMULT F : b{:
                Nodo tmp = new Nodo("OPMULT");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)a);
                tmp.addHijo((Nodo)b);
            RESULT=tmp;
        :};
        T::= F :e{:
                Nodo tmp = new Nodo("F");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
                //parser.padre = (Nodo) tmp;
                System.out.println("OK");
            RESULT=tmp;
        :} ;

        F::= NUM:e{:
            Nodo tmp = new Nodo("NUM");
            tmp.setNumNodo(parser.contador++);
            //tmp.addHijo((Nodo)e);
            //parser.padre = (Nodo) tmp;
            tmp.setValor(e);
            System.out.println("OK");
            RESULT=tmp;
        :};

        F::= PARIZQ E:e PARDER {:
            Nodo tmp = new Nodo("E");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e);
            //parser.padre = (Nodo) tmp;
            System.out.println("EOK");
            RESULT=tmp;
        :} ; 

//bloque loop
loop_block ::= LOOP content salir_ciclo END LOOP PYC
				//Errores
				| LOOP content salir_ciclo error LOOP PYC
				| LOOP content salir_ciclo END LOOP error
				;



// bloque while
while_block ::= WHILE condition LOOP content salir_ciclo END LOOP PYC
				//Error
				| WHILE condition error content salir_ciclo END LOOP PYC
				| WHILE condition LOOP content salir_ciclo error LOOP PYC
				| WHILE condition LOOP content salir_ciclo END error PYC
				| WHILE condition LOOP content salir_ciclo END LOOP error
				;
		
		salir_ciclo ::=EXIT WHEN condition PYC
				|
				//Errores
				| EXIT error condition PYC
				| EXIT WHEN condition error
				;

// Bloque for
for_block ::= FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC
				//Errores
				| FOR error NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC
				| FOR ID error DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC
				| FOR ID NUM error NUM LOOP content salir_ciclo END LOOP PYC
				| FOR ID NUM DOSPUNTOS error LOOP content salir_ciclo END LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM error content salir_ciclo END LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo error LOOP PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END error PYC
				| FOR ID NUM DOSPUNTOS NUM LOOP content salir_ciclo END LOOP error
				// Caso ID NUM
				| FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC
				// Errores
				| FOR error ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP PYC
				| FOR ID ID error NUM LOOP content salir_ciclo END LOOP PYC
				| FOR ID ID DOSPUNTOS error LOOP content salir_ciclo END LOOP PYC
				| FOR ID ID DOSPUNTOS NUM error content salir_ciclo END LOOP PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo error LOOP PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END error PYC
				| FOR ID ID DOSPUNTOS NUM LOOP content salir_ciclo END LOOP error
				// Caso NUM ID
				| FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC
				// Error
				| FOR error NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC
				| FOR ID error DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC
				| FOR ID NUM error ID LOOP content salir_ciclo END LOOP PYC
				| FOR ID NUM DOSPUNTOS ID error content salir_ciclo END LOOP PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo error LOOP PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END error PYC
				| FOR ID NUM DOSPUNTOS ID LOOP content salir_ciclo END LOOP error
				// Caso ID ID
				| FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC
				//Error
				| FOR error ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP PYC
				| FOR ID ID error ID LOOP content salir_ciclo END LOOP PYC
				| FOR ID ID DOSPUNTOS ID error content salir_ciclo END LOOP PYC
				| FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo error LOOP PYC
				| FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END error PYC
				| FOR ID ID DOSPUNTOS ID LOOP content salir_ciclo END LOOP error
				;

// bloque if
if_block ::= IF condition THEN content elsif_block else_block END IF PYC
				| IF condition error content elsif_block else_block END IF PYC
				| IF condition THEN content elsif_block else_block error IF PYC
				| IF condition THEN content elsif_block else_block END error PYC
				| IF condition THEN content elsif_block else_block END IF error
				;

	//Bloque elsif
	elsif_block ::= ELSIF condition THEN content elsif_block
					|
					// errores
					| ELSIF condition error content elsif_block
					;
	
	//bloque else
	else_block ::= ELSE content
					|
					;

			condition ::= boolean_expr OR condition
							| boolean_expr AND condition
							| boolean_expr
							//errores
							| error
							;
					
					boolean_expr ::= rel_operand OPREL rel_operand
									;
							
							rel_operand ::= ID | NUM | call_subroutine
									| error
									;

put ::= PUT PARIZQ NUM:num PARDER PYC {:
    Nodo tmp = new Nodo("NUM");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(num);
    System.out.println("num in put");
    RESULT=tmp;
:} 
		//Errores
		| PUT error NUM PARDER PYC
		| PUT PARIZQ error PARDER PYC
		| PUT PARIZQ NUM error PYC
		| PUT PARIZQ NUM PARDER error
		//Caso String
		| PUT PARIZQ STR:str PARDER PYC {:
    Nodo tmp = new Nodo("STR");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(str.toString().replaceAll("\"",""));
    System.out.println("str in put");
    RESULT=tmp;
:} 
		//Errores
		| PUT error STR PARDER PYC
		| PUT PARIZQ STR error PYC
		| PUT PARIZQ STR PARDER error
		;

get ::= GET PARIZQ ID PARDER PYC
		//Errores
		| GET error ID PARDER PYC
		| GET PARIZQ error PARDER PYC
		| GET PARIZQ ID error PYC
		| GET PARIZQ ID PARDER error
		;




calling_subroutine ::= call_subroutine PYC
						// Error
						| call_subroutine error
						;

	call_subroutine ::= ID PARIZQ parameter_values PARDER
							//Error
							| ID PARIZQ parameter_values error
							;

		parameter_values ::= ID COMA parameter_values
								| ID
								// Errores
								| error COMA parameter_values
								| error
								//Caso Numero
								| NUM COMA parameter_values
								| NUM
								;