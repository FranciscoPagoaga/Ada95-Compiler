package Pack;

import java.io.*;
import java_cup.runtime.*;

parser code
{:
	

        
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");

	}
:}



//terminales
terminal PROCEDURE, FUNCTION, RETURN, IS, BEGIN, END, IF, THEN, ELSE, ELSIF, FOR, WHILE, LOOP, EXIT, WHEN, AND, OR;
terminal OPSUM, OPMULT, PARIZQ, PARDER, PYC, OPREL, COMA;
terminal PUT, GET;
terminal Integer NUM;
terminal String ID;
terminal STR; 

//no terminales
non terminal codigo;
non terminal bloque_loop, bloque_for, bloque_while, salir_ciclo, bloque_if, bloque_elsif, bloque_else;
non terminal llamada_subprograma, llamar_subprograma, valores_parametros;
non terminal condicion, operando_rel, expresion_booleana;
non terminal put, get;
non terminal E, T, Eprime, Tprime, F;


codigo ::= bloque_while codigo | bloque_while
		| bloque_if codigo | bloque_if
		| put codigo | put
		| get codigo | get
		| llamada_subprograma codigo | llamada_subprograma
		;

//gramatica

E ::= T Eprime ;
Eprime ::= OPSUM T Eprime  | ;
T ::= F Tprime ;
Tprime::= OPMULT F Tprime | ;
F ::= NUM | PARIZQ E PARDER ;

//bloque loop
bloque_loop ::= LOOP codigo salir_ciclo END LOOP PYC
				| LOOP codigo salir_ciclo error LOOP PYC
				| LOOP codigo salir_ciclo END LOOP error
				;



// bloque while
bloque_while ::= WHILE condicion LOOP codigo salir_ciclo END LOOP PYC
				
				| WHILE condicion error codigo salir_ciclo END LOOP PYC
				| WHILE condicion error codigo salir_ciclo error LOOP PYC
				| WHILE condicion error codigo salir_ciclo END error PYC
				| WHILE condicion error codigo salir_ciclo END LOOP error
				;
		
		salir_ciclo ::=EXIT WHEN condicion PYC
				|
				| EXIT error condicion PYC
				| EXIT WHEN condicion error
				;


// bloque if
bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF PYC
				| IF condicion error codigo bloque_elsif bloque_else END IF PYC
				| IF condicion THEN codigo bloque_elsif bloque_else error IF PYC
				| IF condicion THEN codigo bloque_elsif bloque_else END error PYC
				| IF condicion THEN codigo bloque_elsif bloque_else END IF error
				;

	//Bloque elsif
	bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif
					|
					| ELSIF condicion error codigo bloque_elsif
					;
	
	//bloque else
	bloque_else ::= ELSE codigo
					|
					;

			condicion ::= expresion_booleana OR condicion
							| expresion_booleana AND condicion
							| expresion_booleana
							| error
							;
					
					expresion_booleana ::= operando_rel OPREL operando_rel
									;
							
							operando_rel ::= ID | NUM | llamar_subprograma
									| error
									;

put ::= PUT PARIZQ NUM PARDER PYC
		| PUT PARIZQ STR PARDER PYC
		| PUT error NUM PARDER PYC
		| PUT PARIZQ error PARDER PYC
		| PUT PARIZQ NUM error PYC
		| PUT PARIZQ NUM PARDER error
		;

get ::= GET PARIZQ ID PARDER PYC
		| GET error ID PARDER PYC
		| GET PARIZQ error PARDER PYC
		| GET PARIZQ ID error PYC
		| GET PARIZQ ID PARDER error
		;




llamada_subprograma ::= llamar_subprograma PYC
						| ID PARIZQ valores_parametros error
						;

	llamar_subprograma ::= ID PARIZQ valores_parametros PARDER
							| ID PARIZQ valores_parametros error
							;

		valores_parametros ::= ID COMA valores_parametros
								| ID
								| error COMA valores_parametros
								| error
								| NUM COMA valores_parametros
								| NUM
								;