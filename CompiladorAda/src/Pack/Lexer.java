// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Pack/lexer.flex


package Pack; 
import java_cup.runtime.Symbol;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int comentarioLine = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\1\6\5\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\12\17\1\20\1\21\1\22\1\23\1\22"+
    "\1\5\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\35\1\36\1\35\1\37\1\40"+
    "\1\41\1\35\1\42\1\43\1\44\1\45\1\35\1\46"+
    "\1\47\2\35\4\0\1\50\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\35\1\36"+
    "\1\35\1\37\1\40\1\41\1\35\1\42\1\43\1\44"+
    "\1\45\1\35\1\46\1\47\2\35\1\0\1\51\10\0"+
    "\1\3\252\0\2\52\u01f6\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\6\1\1\1\5\1\10\1\11\1\12\2\13"+
    "\15\14\2\1\1\15\1\0\1\16\1\17\1\20\1\0"+
    "\1\21\2\14\2\0\2\14\1\0\3\14\1\0\4\14"+
    "\1\0\1\14\1\22\1\23\2\24\1\14\1\0\1\25"+
    "\1\14\1\25\2\14\1\0\1\14\1\0\2\14\1\0"+
    "\1\14\3\0\1\22\2\0\1\23\1\0\1\25\2\0"+
    "\1\24\1\0\1\10\2\26\2\14\1\0\2\14\1\0"+
    "\2\27\1\14\1\0\1\27\1\14\1\0\1\14\2\30"+
    "\1\14\1\0\1\30\1\31\2\14\1\0\2\32\1\14"+
    "\1\0\1\33\1\14\1\0\1\14\1\0\1\14\2\0"+
    "\2\14\5\0\1\30\1\0\1\32\2\0\1\32\1\27"+
    "\1\0\1\14\1\0\1\14\1\34\1\14\2\34\1\0"+
    "\2\35\1\14\1\0\2\14\2\0\1\14\2\36\1\14"+
    "\1\0\1\14\1\0\2\37\2\40\2\41\1\14\1\0"+
    "\1\41\1\0\1\37\1\40\1\35\1\36\2\0\1\37"+
    "\1\0\2\42\1\14\2\43\2\44\1\45\1\14\1\0"+
    "\1\44\2\14\1\0\1\14\1\0\2\46\1\42\1\0"+
    "\1\46\1\42\1\0\2\14\1\0\2\14\1\0\2\47"+
    "\1\0\1\47\1\0\1\50\1\14\1\0\1\51\1\14"+
    "\2\0\1\51\2\52\1\14\1\0\1\52\2\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\126\0\126\0\126"+
    "\0\126\0\126\0\254\0\327\0\u0102\0\u012d\0\u0158\0\126"+
    "\0\u0102\0\126\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\126\0\201\0\126\0\126\0\126\0\u0408\0\126"+
    "\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u01d9\0\u070e\0\u01d9\0\126\0\u0739\0\u0764\0\u01d9"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\126\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0408\0\u01d9\0\126\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u01d9\0\126\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a"+
    "\0\u0d45\0\u01d9\0\126\0\u0d70\0\u0d9b\0\u0dc6\0\u01d9\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u01d9\0\126\0\u0e72\0\u0e9d\0\u01d9\0\u0ec8"+
    "\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020"+
    "\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u0e47\0\u1122\0\u0d9b"+
    "\0\u114d\0\u1178\0\u0ef3\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u01d9\0\u127a\0\u12a5\0\126\0\u12a5\0\u01d9\0\126\0\u12d0"+
    "\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u01d9\0\126"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u01d9\0\126\0\u01d9\0\126"+
    "\0\u01d9\0\126\0\u14a9\0\u14d4\0\u14d4\0\u14ff\0\u14d4\0\u1428"+
    "\0\u14d4\0\u1428\0\u152a\0\u1555\0\u1580\0\u15ab\0\u01d9\0\126"+
    "\0\u15d6\0\u01d9\0\126\0\u01d9\0\126\0\u01d9\0\u1601\0\u162c"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u01d9\0\126"+
    "\0\u1703\0\u172e\0\u16ad\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u01d9\0\126\0\u18b1\0\u18b1\0\u18dc"+
    "\0\u01d9\0\u1907\0\u1932\0\u01d9\0\u195d\0\u1988\0\u19b3\0\126"+
    "\0\u01d9\0\126\0\u19de\0\u1a09\0\u1a09\0\u01d9\0\126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\1\26\1\27"+
    "\1\30\1\25\1\31\1\25\1\32\1\25\1\33\1\34"+
    "\1\35\1\25\1\36\1\25\1\37\1\25\1\3\1\40"+
    "\1\41\2\4\1\42\2\0\46\4\54\0\2\43\1\0"+
    "\2\43\1\44\10\0\1\43\4\0\24\43\17\0\1\45"+
    "\2\0\1\16\50\0\1\46\60\0\1\22\44\0\1\47"+
    "\1\0\1\16\56\0\1\50\46\0\1\51\4\0\13\25"+
    "\1\52\10\25\1\53\1\54\20\0\1\51\4\0\4\25"+
    "\1\55\7\25\1\56\7\25\1\53\1\57\20\0\1\51"+
    "\4\0\24\25\1\53\21\0\1\51\4\0\12\25\1\60"+
    "\1\61\7\25\1\62\1\53\1\63\20\0\1\51\4\0"+
    "\1\64\11\25\1\65\1\25\1\66\4\25\1\67\2\25"+
    "\1\53\1\70\20\0\1\51\4\0\4\25\1\71\17\25"+
    "\1\53\21\0\1\51\4\0\5\25\1\72\5\25\1\73"+
    "\3\25\1\74\4\25\1\53\1\75\20\0\1\51\4\0"+
    "\14\25\1\76\7\25\1\53\1\77\20\0\1\51\4\0"+
    "\16\25\1\100\2\25\1\101\2\25\1\53\1\102\20\0"+
    "\1\51\4\0\16\25\1\103\2\25\1\104\2\25\1\53"+
    "\1\105\20\0\1\51\4\0\4\25\1\106\17\25\1\53"+
    "\1\107\20\0\1\51\4\0\7\25\1\110\6\25\1\111"+
    "\5\25\1\53\1\112\20\0\1\51\4\0\7\25\1\113"+
    "\14\25\1\53\1\114\25\0\1\115\3\0\1\116\1\117"+
    "\1\0\1\120\2\0\1\121\1\122\1\123\1\0\1\124"+
    "\1\75\1\0\1\125\1\0\1\126\1\0\1\127\40\0"+
    "\1\130\32\0\1\131\52\0\1\51\4\0\24\51\22\0"+
    "\1\51\4\0\3\25\1\132\20\25\1\53\1\133\20\0"+
    "\1\134\4\0\24\134\32\0\1\133\21\0\1\133\20\0"+
    "\1\51\4\0\6\25\1\135\15\25\1\53\1\136\20\0"+
    "\1\51\4\0\14\25\1\137\7\25\1\53\34\0\1\136"+
    "\16\0\1\136\20\0\1\51\4\0\17\25\1\140\4\25"+
    "\1\53\1\141\20\0\1\51\4\0\3\25\1\142\20\25"+
    "\1\53\1\143\20\0\1\51\4\0\10\25\1\144\13\25"+
    "\1\53\1\145\30\0\1\143\4\0\1\145\6\0\1\141"+
    "\5\0\1\146\20\0\1\51\4\0\12\25\1\147\11\25"+
    "\1\53\1\150\20\0\1\51\4\0\14\25\1\151\7\25"+
    "\1\53\21\0\1\51\4\0\16\25\1\152\5\25\1\53"+
    "\1\153\20\0\1\51\4\0\13\25\1\154\10\25\1\53"+
    "\1\155\37\0\1\150\1\155\2\0\1\153\6\0\1\156"+
    "\20\0\1\51\4\0\20\25\1\157\3\25\1\53\21\0"+
    "\1\51\4\0\20\25\1\160\3\25\1\53\21\0\1\51"+
    "\4\0\14\25\1\161\7\25\1\53\1\162\41\0\1\162"+
    "\10\0\1\162\20\0\1\51\4\0\20\25\1\163\3\25"+
    "\1\53\1\164\45\0\1\164\4\0\1\164\20\0\1\51"+
    "\4\0\14\25\1\165\7\25\1\53\1\166\20\0\1\51"+
    "\4\0\20\25\1\167\3\25\1\53\42\0\1\166\10\0"+
    "\1\166\20\0\1\51\4\0\20\25\1\170\3\25\1\53"+
    "\1\171\45\0\1\171\4\0\1\171\20\0\1\51\4\0"+
    "\4\25\1\172\17\25\1\53\1\173\20\0\1\51\4\0"+
    "\21\25\1\174\2\25\1\53\1\175\31\0\1\173\14\0"+
    "\1\175\3\0\1\176\20\0\1\51\4\0\4\25\1\177"+
    "\3\25\1\200\13\25\1\53\1\201\31\0\1\202\3\0"+
    "\1\203\14\0\1\201\37\0\1\150\12\0\1\150\33\0"+
    "\1\136\11\0\1\171\4\0\1\204\31\0\1\173\3\0"+
    "\1\203\14\0\1\205\44\0\1\141\5\0\1\141\30\0"+
    "\1\143\21\0\1\143\41\0\1\162\1\0\1\153\6\0"+
    "\1\206\41\0\1\166\4\0\1\175\3\0\1\207\40\0"+
    "\1\155\4\0\1\164\4\0\1\210\35\0\1\145\14\0"+
    "\1\145\30\0\1\143\1\173\1\0\1\136\1\0\1\211"+
    "\1\0\1\150\1\155\1\212\1\0\1\153\1\141\1\213"+
    "\1\175\3\0\1\214\45\0\1\215\25\0\1\134\4\0"+
    "\24\134\1\53\21\0\1\51\4\0\10\25\1\216\13\25"+
    "\1\53\1\217\35\0\1\217\14\0\1\217\20\0\1\51"+
    "\4\0\12\25\1\220\11\25\1\53\21\0\1\51\4\0"+
    "\4\25\1\221\3\25\1\222\13\25\1\53\1\223\31\0"+
    "\1\224\3\0\1\225\14\0\1\223\20\0\1\51\4\0"+
    "\20\25\1\226\3\25\1\53\1\227\45\0\1\227\4\0"+
    "\1\227\31\0\1\224\3\0\1\225\7\0\1\227\4\0"+
    "\1\223\20\0\1\51\4\0\17\25\1\230\4\25\1\53"+
    "\1\231\44\0\1\231\5\0\1\231\20\0\1\51\4\0"+
    "\1\232\23\25\1\53\21\0\1\51\4\0\2\25\1\233"+
    "\21\25\1\53\1\234\27\0\1\234\22\0\1\234\27\0"+
    "\1\234\14\0\1\231\5\0\1\235\20\0\1\51\4\0"+
    "\4\25\1\236\17\25\1\53\21\0\1\51\4\0\15\25"+
    "\1\237\6\25\1\53\1\240\42\0\1\240\7\0\1\240"+
    "\20\0\1\51\4\0\2\25\1\241\21\25\1\53\1\242"+
    "\27\0\1\242\22\0\1\242\20\0\1\51\4\0\21\25"+
    "\1\243\2\25\1\53\1\244\46\0\1\244\3\0\1\244"+
    "\20\0\1\51\4\0\13\25\1\245\10\25\1\53\1\246"+
    "\40\0\1\246\11\0\1\246\20\0\1\51\4\0\4\25"+
    "\1\247\17\25\1\53\1\250\31\0\1\250\20\0\1\250"+
    "\31\0\1\250\6\0\1\246\11\0\1\246\20\0\1\51"+
    "\4\0\13\25\1\251\10\25\1\53\1\252\20\0\1\51"+
    "\4\0\12\25\1\253\11\25\1\53\1\254\37\0\1\254"+
    "\1\252\11\0\1\255\40\0\1\252\11\0\1\252\37\0"+
    "\1\254\12\0\1\254\35\0\1\217\10\0\1\244\3\0"+
    "\1\256\37\0\1\254\1\246\11\0\1\257\27\0\1\242"+
    "\1\0\1\250\20\0\1\260\37\0\1\254\5\0\1\227"+
    "\4\0\1\261\27\0\1\242\12\0\1\240\7\0\1\262"+
    "\27\0\1\263\1\0\1\224\3\0\1\264\1\0\1\254"+
    "\1\246\1\0\1\240\1\0\1\231\1\227\1\244\3\0"+
    "\1\265\31\0\1\266\41\0\1\51\4\0\13\25\1\267"+
    "\10\25\1\53\1\270\40\0\1\270\11\0\1\270\20\0"+
    "\1\51\4\0\4\25\1\271\17\25\1\53\21\0\1\51"+
    "\4\0\5\25\1\272\16\25\1\53\1\273\32\0\1\273"+
    "\17\0\1\273\20\0\1\51\4\0\4\25\1\274\17\25"+
    "\1\53\1\275\31\0\1\275\20\0\1\275\20\0\1\51"+
    "\4\0\20\25\1\276\3\25\1\53\21\0\1\51\4\0"+
    "\20\25\1\277\3\25\1\53\1\300\45\0\1\300\4\0"+
    "\1\300\31\0\1\275\13\0\1\300\4\0\1\301\20\0"+
    "\1\51\4\0\6\25\1\302\15\25\1\53\21\0\1\51"+
    "\4\0\4\25\1\303\17\25\1\53\1\304\31\0\1\304"+
    "\20\0\1\304\20\0\1\51\4\0\16\25\1\305\5\25"+
    "\1\53\1\306\43\0\1\306\6\0\1\306\20\0\1\51"+
    "\4\0\4\25\1\307\17\25\1\53\1\310\31\0\1\310"+
    "\20\0\1\310\40\0\1\270\2\0\1\306\6\0\1\311"+
    "\31\0\1\304\13\0\1\300\4\0\1\312\32\0\1\273"+
    "\5\0\1\270\11\0\1\270\31\0\1\313\1\273\5\0"+
    "\1\270\2\0\1\306\1\0\1\300\4\0\1\314\33\0"+
    "\1\315\37\0\1\51\4\0\1\316\23\25\1\53\21\0"+
    "\1\51\4\0\10\25\1\317\13\25\1\53\1\320\35\0"+
    "\1\320\14\0\1\320\20\0\1\51\4\0\4\25\1\321"+
    "\17\25\1\53\21\0\1\51\4\0\3\25\1\322\20\25"+
    "\1\53\1\323\30\0\1\323\21\0\1\323\20\0\1\51"+
    "\4\0\13\25\1\324\10\25\1\53\1\325\40\0\1\325"+
    "\11\0\1\325\30\0\1\323\4\0\1\320\14\0\1\326"+
    "\30\0\1\323\4\0\1\320\2\0\1\325\11\0\1\327"+
    "\31\0\1\330\41\0\1\51\4\0\13\25\1\331\10\25"+
    "\1\53\21\0\1\51\4\0\14\25\1\332\7\25\1\53"+
    "\1\333\41\0\1\333\10\0\1\333\20\0\1\51\4\0"+
    "\16\25\1\334\5\25\1\53\21\0\1\51\4\0\21\25"+
    "\1\335\2\25\1\53\1\336\46\0\1\336\3\0\1\336"+
    "\41\0\1\333\4\0\1\336\3\0\1\337\43\0\1\340"+
    "\27\0\1\51\4\0\13\25\1\341\10\25\1\53\1\342"+
    "\40\0\1\342\11\0\1\342\20\0\1\51\4\0\16\25"+
    "\1\343\5\25\1\53\1\344\43\0\1\344\6\0\1\344"+
    "\40\0\1\342\2\0\1\344\6\0\1\345\20\0\1\51"+
    "\4\0\4\25\1\346\17\25\1\53\1\347\31\0\1\347"+
    "\20\0\1\347\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6708];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\5\11\5\1\1\11\1\1\1\11"+
    "\17\1\1\11\1\0\3\11\1\0\1\11\2\1\2\0"+
    "\2\1\1\0\3\1\1\0\4\1\1\0\4\1\1\11"+
    "\1\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\3\0\1\11\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\2\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\0\4\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\2\0\2\1\5\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\4\1\1\11\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\2\0\2\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\4\1\2\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\2\0\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("token no valido " + yytext());
            }
            // fall through
          case 44: break;
          case 2:
            { 
            }
            // fall through
          case 45: break;
          case 3:
            { return new Symbol(sym.PARIZQ, yycolumn, yyline, yytext());
            }
            // fall through
          case 46: break;
          case 4:
            { return new Symbol(sym.PARDER, yycolumn, yyline, yytext());
            }
            // fall through
          case 47: break;
          case 5:
            { return new Symbol(sym.OPMULT, yycolumn, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 6:
            { return new Symbol(sym.OPSUM, yycolumn, yyline, yytext());
            }
            // fall through
          case 49: break;
          case 7:
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 8:
            { return new Symbol(sym.NUM, yycolumn, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 9:
            { return new Symbol(sym.OPDEC, yycolumn, yyline, yytext());
            }
            // fall through
          case 52: break;
          case 10:
            { return new Symbol(sym.PYC, yycolumn, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 11:
            { return new Symbol(sym.OPREL, yycolumn, yyline, yytext());
            }
            // fall through
          case 54: break;
          case 12:
            { return new Symbol(sym.ID, yycolumn, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 13:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 56: break;
          case 14:
            { return new Symbol(sym.STR, yycolumn, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 15:
            { yybegin(comentarioLine);
            }
            // fall through
          case 58: break;
          case 16:
            { return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 17:
            { return new Symbol(sym.OPASG, yycolumn, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 18:
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 19:
            { return new Symbol(sym.IN, yycolumn, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 20:
            { return new Symbol(sym.IS, yycolumn, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 21:
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 22:
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 23:
            { return new Symbol(sym.END, yycolumn, yyline, yytext());
            }
            // fall through
          case 66: break;
          case 24:
            { return new Symbol(sym.FOR, yycolumn, yyline, yytext());
            }
            // fall through
          case 67: break;
          case 25:
            { return new Symbol(sym.GET, yycolumn, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 26:
            { return new Symbol(sym.OUT, yycolumn, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 27:
            { return new Symbol(sym.PUT, yycolumn, yyline, yytext());
            }
            // fall through
          case 70: break;
          case 28:
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 71: break;
          case 29:
            { return new Symbol(sym.EXIT, yycolumn, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 30:
            { return new Symbol(sym.LOOP, yycolumn, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 31:
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            }
            // fall through
          case 74: break;
          case 32:
            { return new Symbol(sym.TRUE, yycolumn, yyline, yytext());
            }
            // fall through
          case 75: break;
          case 33:
            { return new Symbol(sym.WHEN, yycolumn, yyline, yytext());
            }
            // fall through
          case 76: break;
          case 34:
            { return new Symbol(sym.BEGIN, yycolumn, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 35:
            { return new Symbol(sym.ELSIF, yycolumn, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 36:
            { return new Symbol(sym.FALSE, yycolumn, yyline, yytext());
            }
            // fall through
          case 79: break;
          case 37:
            { return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            }
            // fall through
          case 80: break;
          case 38:
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            }
            // fall through
          case 81: break;
          case 39:
            { return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 40:
            { return new Symbol(sym.FLOAT, yycolumn, yyline, yytext());
            }
            // fall through
          case 83: break;
          case 41:
            { return new Symbol(sym.INT, yycolumn, yyline, yytext());
            }
            // fall through
          case 84: break;
          case 42:
            { return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
            }
            // fall through
          case 85: break;
          case 43:
            { return new Symbol(sym.PROCEDURE, yycolumn, yyline, yytext());
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
